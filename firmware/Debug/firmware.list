
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b114  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b344  0800b344  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800b344  0800b344  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b344  0800b344  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800b34c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000155c  20000184  0800b4d0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016e0  0800b4d0  000216e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002442d  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004583  00000000  00000000  000445e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00048b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  0004a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002472f  00000000  00000000  0004bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e456  00000000  00000000  000703df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e231f  00000000  00000000  0008e835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c14  00000000  00000000  00170ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b2d4 	.word	0x0800b2d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800b2d4 	.word	0x0800b2d4

08000218 <CDC_On_Receive>:

ser_command_t cmd_in = {0};
__IO_b is_command_received= 0;
mcu_errors_t mcu_error;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  is_command_received = 1;
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <CDC_On_Receive+0x58>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
  mcu_error = MCU_USB_BAD_DATA;
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <CDC_On_Receive+0x5c>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
  if (*length == sizeof(cmd_in)) {
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b0a      	cmp	r3, #10
 8000234:	d117      	bne.n	8000266 <CDC_On_Receive+0x4e>
	  uint8_t ser_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *) &buffer, (*length)-1);
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	1e5a      	subs	r2, r3, #1
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <CDC_On_Receive+0x60>)
 8000242:	f002 fb2b 	bl	800289c <HAL_CRC_Calculate>
 8000246:	4603      	mov	r3, r0
 8000248:	73fb      	strb	r3, [r7, #15]
	  memcpy(&cmd_in, buffer, sizeof(ser_command_t));
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	220a      	movs	r2, #10
 800024e:	4619      	mov	r1, r3
 8000250:	480a      	ldr	r0, [pc, #40]	; (800027c <CDC_On_Receive+0x64>)
 8000252:	f00b f829 	bl	800b2a8 <memcpy>
    if(cmd_in.crc == ser_crc) {
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <CDC_On_Receive+0x64>)
 8000258:	7a1b      	ldrb	r3, [r3, #8]
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	429a      	cmp	r2, r3
 800025e:	d102      	bne.n	8000266 <CDC_On_Receive+0x4e>
    	//memcpy(&cmd_in, buffer, sizeof(ser_command_t));
    	mcu_error = MCU_OK;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <CDC_On_Receive+0x5c>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	200001aa 	.word	0x200001aa
 8000274:	200006f8 	.word	0x200006f8
 8000278:	200004b0 	.word	0x200004b0
 800027c:	200001a0 	.word	0x200001a0

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08c      	sub	sp, #48	; 0x30
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f001 f90a 	bl	800149e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f859 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fd51 	bl	8000d34 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000292:	f000 f98b 	bl	80005ac <MX_TIM1_Init>
  MX_RTC_Init();
 8000296:	f000 f95d 	bl	8000554 <MX_RTC_Init>
  MX_TIM2_Init();
 800029a:	f000 fa27 	bl	80006ec <MX_TIM2_Init>
  MX_TIM3_Init();
 800029e:	f000 fa9f 	bl	80007e0 <MX_TIM3_Init>
  MX_TIM8_Init();
 80002a2:	f000 fb49 	bl	8000938 <MX_TIM8_Init>
  MX_TIM17_Init();
 80002a6:	f000 fca1 	bl	8000bec <MX_TIM17_Init>
  MX_TIM16_Init();
 80002aa:	f000 fc25 	bl	8000af8 <MX_TIM16_Init>
  MX_TIM4_Init();
 80002ae:	f000 faed 	bl	800088c <MX_TIM4_Init>
  MX_TIM15_Init();
 80002b2:	f000 fb9b 	bl	80009ec <MX_TIM15_Init>
  MX_USB_Device_Init();
 80002b6:	f00a fad9 	bl	800a86c <MX_USB_Device_Init>
  MX_DMA_Init();
 80002ba:	f000 fd11 	bl	8000ce0 <MX_DMA_Init>
  MX_ADC1_Init();
 80002be:	f000 f8af 	bl	8000420 <MX_ADC1_Init>
  MX_CRC_Init();
 80002c2:	f000 f925 	bl	8000510 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  ser_feedback_t ser_feedback = {0};
 80002c6:	f107 031c 	add.w	r3, r7, #28
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]
  mot_status_t motor_status[3] = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
 80002e4:	615a      	str	r2, [r3, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <main+0xb8>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	621a      	str	r2, [r3, #32]
  while (1) {
	  //CDC_Transmit_FS(&num , 1);

	  //CDC_Transmit_FS(&internal_data , sizeof(internal_data));
	  //HAL_Delay(100);
	  if (is_command_received) {
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <main+0xbc>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0fa      	beq.n	80002ec <main+0x6c>
	        is_command_received = 0;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <main+0xbc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
	        //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
	        ser_feedback.enc_data[0] = motor_status[0].enc_status;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	623b      	str	r3, [r7, #32]
	        ser_feedback.enc_data[1] = motor_status[1].enc_status;
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	627b      	str	r3, [r7, #36]	; 0x24
	        ser_feedback.enc_data[2] = motor_status[2].enc_status;
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
	        memcpy(crc_calc_data, &ser_feedback, sizeof(ser_feedback) - 1);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	f107 011c 	add.w	r1, r7, #28
 800030e:	2213      	movs	r2, #19
 8000310:	4618      	mov	r0, r3
 8000312:	f00a ffc9 	bl	800b2a8 <memcpy>
	        ser_feedback.crc = HAL_CRC_Calculate(&hcrc, (uint32_t *) &crc_calc_data, sizeof(crc_calc_data));
 8000316:	463b      	mov	r3, r7
 8000318:	2204      	movs	r2, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4806      	ldr	r0, [pc, #24]	; (8000338 <main+0xb8>)
 800031e:	f002 fabd 	bl	800289c <HAL_CRC_Calculate>
 8000322:	4603      	mov	r3, r0
 8000324:	b2db      	uxtb	r3, r3
 8000326:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	        CDC_Transmit_FS((uint8_t*) &ser_feedback, sizeof(ser_feedback_t));
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	2114      	movs	r1, #20
 8000330:	4618      	mov	r0, r3
 8000332:	f00a fb5d 	bl	800a9f0 <CDC_Transmit_FS>
	  if (is_command_received) {
 8000336:	e7d9      	b.n	80002ec <main+0x6c>
 8000338:	200004b0 	.word	0x200004b0
 800033c:	200001aa 	.word	0x200001aa

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b0a4      	sub	sp, #144	; 0x90
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800034a:	2238      	movs	r2, #56	; 0x38
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f00a ffb8 	bl	800b2c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2244      	movs	r2, #68	; 0x44
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f00a ffaa 	bl	800b2c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000370:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000374:	f004 fc14 	bl	8004ba0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000378:	230a      	movs	r3, #10
 800037a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000380:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000382:	2340      	movs	r3, #64	; 0x40
 8000384:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038a:	2302      	movs	r3, #2
 800038c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800038e:	2302      	movs	r3, #2
 8000390:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000392:	2301      	movs	r3, #1
 8000394:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000396:	230c      	movs	r3, #12
 8000398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800039c:	2302      	movs	r3, #2
 800039e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003a2:	2304      	movs	r3, #4
 80003a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80003a8:	2306      	movs	r3, #6
 80003aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003b2:	4618      	mov	r0, r3
 80003b4:	f004 fca8 	bl	8004d08 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003be:	f000 fd2d 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c6:	2301      	movs	r3, #1
 80003c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f004 ffab 	bl	8005338 <HAL_RCC_ClockConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003e8:	f000 fd18 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
 80003ec:	f44f 230a 	mov.w	r3, #565248	; 0x8a000
 80003f0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80003f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80003fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000402:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000404:	463b      	mov	r3, r7
 8000406:	4618      	mov	r0, r3
 8000408:	f005 f97a 	bl	8005700 <HAL_RCCEx_PeriphCLKConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000412:	f000 fd03 	bl	8000e1c <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3790      	adds	r7, #144	; 0x90
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08c      	sub	sp, #48	; 0x30
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2220      	movs	r2, #32
 8000436:	2100      	movs	r1, #0
 8000438:	4618      	mov	r0, r3
 800043a:	f00a ff43 	bl	800b2c4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800043e:	4b32      	ldr	r3, [pc, #200]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000440:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000444:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000446:	4b30      	ldr	r3, [pc, #192]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000448:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800044c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800044e:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000454:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800045a:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <MX_ADC1_Init+0xe8>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000460:	4b29      	ldr	r3, [pc, #164]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000462:	2200      	movs	r2, #0
 8000464:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000468:	2204      	movs	r2, #4
 800046a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800046c:	4b26      	ldr	r3, [pc, #152]	; (8000508 <MX_ADC1_Init+0xe8>)
 800046e:	2200      	movs	r2, #0
 8000470:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000474:	2200      	movs	r2, #0
 8000476:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <MX_ADC1_Init+0xe8>)
 800047a:	2201      	movs	r2, #1
 800047c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000480:	2200      	movs	r2, #0
 8000482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000488:	2200      	movs	r2, #0
 800048a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_ADC1_Init+0xe8>)
 800048e:	2200      	movs	r2, #0
 8000490:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_ADC1_Init+0xe8>)
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_ADC1_Init+0xe8>)
 800049c:	2200      	movs	r2, #0
 800049e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_ADC1_Init+0xe8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004a8:	4817      	ldr	r0, [pc, #92]	; (8000508 <MX_ADC1_Init+0xe8>)
 80004aa:	f001 fa3f 	bl	800192c <HAL_ADC_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80004b4:	f000 fcb2 	bl	8000e1c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c0:	4619      	mov	r1, r3
 80004c2:	4811      	ldr	r0, [pc, #68]	; (8000508 <MX_ADC1_Init+0xe8>)
 80004c4:	f001 ffd2 	bl	800246c <HAL_ADCEx_MultiModeConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004ce:	f000 fca5 	bl	8000e1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_ADC1_Init+0xec>)
 80004d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d6:	2306      	movs	r3, #6
 80004d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004de:	237f      	movs	r3, #127	; 0x7f
 80004e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e2:	2304      	movs	r3, #4
 80004e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_ADC1_Init+0xe8>)
 80004f0:	f001 fba6 	bl	8001c40 <HAL_ADC_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80004fa:	f000 fc8f 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3730      	adds	r7, #48	; 0x30
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000056c 	.word	0x2000056c
 800050c:	c3210000 	.word	0xc3210000

08000510 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_CRC_Init+0x3c>)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <MX_CRC_Init+0x40>)
 8000518:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_CRC_Init+0x3c>)
 800051c:	2200      	movs	r2, #0
 800051e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_CRC_Init+0x3c>)
 8000522:	2200      	movs	r2, #0
 8000524:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_CRC_Init+0x3c>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <MX_CRC_Init+0x3c>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_CRC_Init+0x3c>)
 8000534:	2201      	movs	r2, #1
 8000536:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_CRC_Init+0x3c>)
 800053a:	f002 f94b 	bl	80027d4 <HAL_CRC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000544:	f000 fc6a 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200004b0 	.word	0x200004b0
 8000550:	40023000 	.word	0x40023000

08000554 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_RTC_Init+0x50>)
 800055a:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <MX_RTC_Init+0x54>)
 800055c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_RTC_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_RTC_Init+0x50>)
 8000566:	227f      	movs	r2, #127	; 0x7f
 8000568:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_RTC_Init+0x50>)
 800056c:	22ff      	movs	r2, #255	; 0xff
 800056e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_RTC_Init+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_RTC_Init+0x50>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_RTC_Init+0x50>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_RTC_Init+0x50>)
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_RTC_Init+0x50>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_RTC_Init+0x50>)
 8000592:	f005 faa5 	bl	8005ae0 <HAL_RTC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800059c:	f000 fc3e 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000638 	.word	0x20000638
 80005a8:	40002800 	.word	0x40002800

080005ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b098      	sub	sp, #96	; 0x60
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2234      	movs	r2, #52	; 0x34
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00a fe73 	bl	800b2c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005de:	4b41      	ldr	r3, [pc, #260]	; (80006e4 <MX_TIM1_Init+0x138>)
 80005e0:	4a41      	ldr	r2, [pc, #260]	; (80006e8 <MX_TIM1_Init+0x13c>)
 80005e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005e4:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <MX_TIM1_Init+0x138>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <MX_TIM1_Init+0x138>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005f0:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <MX_TIM1_Init+0x138>)
 80005f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <MX_TIM1_Init+0x138>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fe:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <MX_TIM1_Init+0x138>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <MX_TIM1_Init+0x138>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800060a:	4836      	ldr	r0, [pc, #216]	; (80006e4 <MX_TIM1_Init+0x138>)
 800060c:	f005 fbc5 	bl	8005d9a <HAL_TIM_PWM_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000616:	f000 fc01 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	2300      	movs	r3, #0
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800061e:	2300      	movs	r3, #0
 8000620:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800062a:	4619      	mov	r1, r3
 800062c:	482d      	ldr	r0, [pc, #180]	; (80006e4 <MX_TIM1_Init+0x138>)
 800062e:	f006 f947 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000638:	f000 fbf0 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063c:	2360      	movs	r3, #96	; 0x60
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800065c:	2200      	movs	r2, #0
 800065e:	4619      	mov	r1, r3
 8000660:	4820      	ldr	r0, [pc, #128]	; (80006e4 <MX_TIM1_Init+0x138>)
 8000662:	f005 fc97 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800066c:	f000 fbd6 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000670:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000674:	2204      	movs	r2, #4
 8000676:	4619      	mov	r1, r3
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <MX_TIM1_Init+0x138>)
 800067a:	f005 fc8b 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000684:	f000 fbca 	bl	8000e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	; (80006e4 <MX_TIM1_Init+0x138>)
 80006c6:	f006 f97d 	bl	80069c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80006d0:	f000 fba4 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <MX_TIM1_Init+0x138>)
 80006d6:	f000 fd8d 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 80006da:	bf00      	nop
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000660 	.word	0x20000660
 80006e8:	40012c00 	.word	0x40012c00

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <MX_TIM2_Init+0xf0>)
 8000712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000718:	4b30      	ldr	r3, [pc, #192]	; (80007dc <MX_TIM2_Init+0xf0>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <MX_TIM2_Init+0xf0>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_TIM2_Init+0xf0>)
 8000726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_TIM2_Init+0xf0>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_TIM2_Init+0xf0>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000738:	4828      	ldr	r0, [pc, #160]	; (80007dc <MX_TIM2_Init+0xf0>)
 800073a:	f005 fb2e 	bl	8005d9a <HAL_TIM_PWM_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 fb6a 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4821      	ldr	r0, [pc, #132]	; (80007dc <MX_TIM2_Init+0xf0>)
 8000758:	f006 f8b2 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000762:	f000 fb5b 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	; 0x60
 8000768:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <MX_TIM2_Init+0xf0>)
 800077e:	f005 fc09 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000788:	f000 fb48 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	2204      	movs	r2, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_TIM2_Init+0xf0>)
 8000794:	f005 fbfe 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800079e:	f000 fb3d 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	2208      	movs	r2, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_TIM2_Init+0xf0>)
 80007aa:	f005 fbf3 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80007b4:	f000 fb32 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	220c      	movs	r2, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_TIM2_Init+0xf0>)
 80007c0:	f005 fbe8 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80007ca:	f000 fb27 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_TIM2_Init+0xf0>)
 80007d0:	f000 fd10 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200006ac 	.word	0x200006ac

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2224      	movs	r2, #36	; 0x24
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f00a fd68 	bl	800b2c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_TIM3_Init+0xa8>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM3_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM3_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000824:	2301      	movs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083c:	2301      	movs	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM3_Init+0xa4>)
 8000850:	f005 fafa 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800085a:	f000 fadf 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM3_Init+0xa4>)
 800086c:	f006 f828 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000876:	f000 fad1 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000520 	.word	0x20000520
 8000888:	40000400 	.word	0x40000400

0800088c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2224      	movs	r2, #36	; 0x24
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00a fd12 	bl	800b2c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_TIM4_Init+0xa8>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM4_Init+0xa4>)
 80008fc:	f005 faa4 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000906:	f000 fa89 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_TIM4_Init+0xa4>)
 8000918:	f005 ffd2 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000922:	f000 fa7b 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000418 	.word	0x20000418
 8000934:	40000800 	.word	0x40000800

08000938 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2224      	movs	r2, #36	; 0x24
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00a fcbc 	bl	800b2c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_TIM8_Init+0xac>)
 8000958:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_TIM8_Init+0xb0>)
 800095a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_TIM8_Init+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_TIM8_Init+0xac>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM8_Init+0xac>)
 800096a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_TIM8_Init+0xac>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM8_Init+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM8_Init+0xac>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800099a:	2301      	movs	r3, #1
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_TIM8_Init+0xac>)
 80009ae:	f005 fa4b 	bl	8005e48 <HAL_TIM_Encoder_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80009b8:	f000 fa30 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_TIM8_Init+0xac>)
 80009ce:	f005 ff77 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80009d8:	f000 fa20 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3730      	adds	r7, #48	; 0x30
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200003cc 	.word	0x200003cc
 80009e8:	40013400 	.word	0x40013400

080009ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b098      	sub	sp, #96	; 0x60
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2234      	movs	r2, #52	; 0x34
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00a fc53 	bl	800b2c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a20:	4a34      	ldr	r2, [pc, #208]	; (8000af4 <MX_TIM15_Init+0x108>)
 8000a22:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a36:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a4a:	4829      	ldr	r0, [pc, #164]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a4c:	f005 f9a5 	bl	8005d9a <HAL_TIM_PWM_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 f9e1 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a66:	4619      	mov	r1, r3
 8000a68:	4821      	ldr	r0, [pc, #132]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a6a:	f005 ff29 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f9d2 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a78:	2360      	movs	r3, #96	; 0x60
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a80:	2300      	movs	r3, #0
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a98:	2204      	movs	r2, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000a9e:	f005 fa79 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000aa8:	f000 f9b8 	bl	8000e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000ad4:	f005 ff76 	bl	80069c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000ade:	f000 f99d 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_TIM15_Init+0x104>)
 8000ae4:	f000 fb86 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 8000ae8:	bf00      	nop
 8000aea:	3760      	adds	r7, #96	; 0x60
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000464 	.word	0x20000464
 8000af4:	40014000 	.word	0x40014000

08000af8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2234      	movs	r2, #52	; 0x34
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f00a fbd3 	bl	800b2c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b20:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <MX_TIM16_Init+0xf0>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b36:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b4a:	4826      	ldr	r0, [pc, #152]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b4c:	f005 f8ce 	bl	8005cec <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b56:	f000 f961 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b5a:	4822      	ldr	r0, [pc, #136]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b5c:	f005 f91d 	bl	8005d9a <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b66:	f000 f959 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b6a:	2360      	movs	r3, #96	; 0x60
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b76:	2300      	movs	r3, #0
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000b90:	f005 fa00 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b9a:	f000 f93f 	bl	8000e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000bc6:	f005 fefd 	bl	80069c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000bd0:	f000 f924 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <MX_TIM16_Init+0xec>)
 8000bd6:	f000 fb0d 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200006fc 	.word	0x200006fc
 8000be8:	40014400 	.word	0x40014400

08000bec <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	; 0x50
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2234      	movs	r2, #52	; 0x34
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00a fb59 	bl	800b2c4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c14:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <MX_TIM17_Init+0xf0>)
 8000c16:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c3e:	4826      	ldr	r0, [pc, #152]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c40:	f005 f854 	bl	8005cec <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000c4a:	f000 f8e7 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000c4e:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c50:	f005 f8a3 	bl	8005d9a <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c5a:	f000 f8df 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000c84:	f005 f986 	bl	8005f94 <HAL_TIM_PWM_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000c8e:	f000 f8c5 	bl	8000e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000cba:	f005 fe83 	bl	80069c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000cc4:	f000 f8aa 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <MX_TIM17_Init+0xec>)
 8000cca:	f000 fa93 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3750      	adds	r7, #80	; 0x50
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200004d4 	.word	0x200004d4
 8000cdc:	40014800 	.word	0x40014800

08000ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_DMA_Init+0x50>)
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <MX_DMA_Init+0x50>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6493      	str	r3, [r2, #72]	; 0x48
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_DMA_Init+0x50>)
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_DMA_Init+0x50>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <MX_DMA_Init+0x50>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6493      	str	r3, [r2, #72]	; 0x48
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_DMA_Init+0x50>)
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200b      	movs	r0, #11
 8000d1c:	f001 fd25 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d20:	200b      	movs	r0, #11
 8000d22:	f001 fd3c 	bl	800279e <HAL_NVIC_EnableIRQ>

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a30      	ldr	r2, [pc, #192]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_GPIO_Init+0xdc>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GREEN_DBG_LED_1_Pin|GREEN_DBG_LED_2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2103      	movs	r1, #3
 8000d96:	481f      	ldr	r0, [pc, #124]	; (8000e14 <MX_GPIO_Init+0xe0>)
 8000d98:	f002 fa56 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_DBG_LED_1_Pin|RED_DBG_LED_2_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2130      	movs	r1, #48	; 0x30
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f002 fa50 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_SLEEP_Pin|MOT_OFF_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2109      	movs	r1, #9
 8000dac:	481a      	ldr	r0, [pc, #104]	; (8000e18 <MX_GPIO_Init+0xe4>)
 8000dae:	f002 fa4b 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_DBG_LED_1_Pin GREEN_DBG_LED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_DBG_LED_1_Pin|GREEN_DBG_LED_2_Pin;
 8000db2:	2303      	movs	r3, #3
 8000db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <MX_GPIO_Init+0xe0>)
 8000dca:	f002 f8bb 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_DBG_LED_1_Pin RED_DBG_LED_2_Pin */
  GPIO_InitStruct.Pin = RED_DBG_LED_1_Pin|RED_DBG_LED_2_Pin;
 8000dce:	2330      	movs	r3, #48	; 0x30
 8000dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f002 f8ac 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_SLEEP_Pin MOT_OFF_Pin */
  GPIO_InitStruct.Pin = MOT_SLEEP_Pin|MOT_OFF_Pin;
 8000dec:	2309      	movs	r3, #9
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_GPIO_Init+0xe4>)
 8000e04:	f002 f89e 	bl	8002f44 <HAL_GPIO_Init>

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48001400 	.word	0x48001400
 8000e18:	48000400 	.word	0x48000400

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x44>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e5e:	f003 ff43 	bl	8004ce8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e80:	d136      	bne.n	8000ef0 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_ADC_MspInit+0x88>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <HAL_ADC_MspInit+0x88>)
 8000e88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_ADC_MspInit+0x88>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_ADC_MspInit+0x90>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ebe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000ec8:	2220      	movs	r2, #32
 8000eca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000ece:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ed2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000ed6:	f001 fe7b 	bl	8002bd0 <HAL_DMA_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 8000ee0:	f7ff ff9c 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	200005d8 	.word	0x200005d8
 8000f00:	40020008 	.word	0x40020008

08000f04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_CRC_MspInit+0x38>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10b      	bne.n	8000f2e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	6493      	str	r3, [r2, #72]	; 0x48
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023000 	.word	0x40023000
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_RTC_MspInit+0x30>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d107      	bne.n	8000f66 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_RTC_MspInit+0x34>)
 8000f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_RTC_MspInit+0x34>)
 8000f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40002800 	.word	0x40002800
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_TIM_PWM_MspInit+0x80>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000fa6:	e022      	b.n	8000fee <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb0:	d10c      	bne.n	8000fcc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
}
 8000fca:	e010      	b.n	8000fee <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <HAL_TIM_PWM_MspInit+0x88>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10b      	bne.n	8000fee <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	4a09      	ldr	r2, [pc, #36]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_TIM_PWM_MspInit+0x84>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
}
 8000fee:	bf00      	nop
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40012c00 	.word	0x40012c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40014000 	.word	0x40014000

08001008 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a54      	ldr	r2, [pc, #336]	; (8001178 <HAL_TIM_Encoder_MspInit+0x170>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d128      	bne.n	800107c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102a:	4b54      	ldr	r3, [pc, #336]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a53      	ldr	r2, [pc, #332]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b51      	ldr	r3, [pc, #324]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b4e      	ldr	r3, [pc, #312]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a4d      	ldr	r2, [pc, #308]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOT1_ENC_1_Pin|MOT1_ENC_2_Pin;
 800105a:	2330      	movs	r3, #48	; 0x30
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4842      	ldr	r0, [pc, #264]	; (8001180 <HAL_TIM_Encoder_MspInit+0x178>)
 8001076:	f001 ff65 	bl	8002f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800107a:	e079      	b.n	8001170 <HAL_TIM_Encoder_MspInit+0x168>
  else if(htim_encoder->Instance==TIM4)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a40      	ldr	r2, [pc, #256]	; (8001184 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001086:	4b3d      	ldr	r3, [pc, #244]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a3c      	ldr	r2, [pc, #240]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a36      	ldr	r2, [pc, #216]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOT2_ENC_1_Pin|MOT2_ENC_2_Pin;
 80010b6:	23c0      	movs	r3, #192	; 0xc0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010c6:	2302      	movs	r3, #2
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	482b      	ldr	r0, [pc, #172]	; (8001180 <HAL_TIM_Encoder_MspInit+0x178>)
 80010d2:	f001 ff37 	bl	8002f44 <HAL_GPIO_Init>
}
 80010d6:	e04b      	b.n	8001170 <HAL_TIM_Encoder_MspInit+0x168>
  else if(htim_encoder->Instance==TIM8)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2a      	ldr	r2, [pc, #168]	; (8001188 <HAL_TIM_Encoder_MspInit+0x180>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d146      	bne.n	8001170 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a25      	ldr	r2, [pc, #148]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 80010e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_TIM_Encoder_MspInit+0x174>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOT3_ENC_1_Pin;
 800112a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800113c:	2302      	movs	r3, #2
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOT3_ENC_1_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f001 fefb 	bl	8002f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT3_ENC_2_Pin;
 800114e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001160:	230a      	movs	r3, #10
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOT3_ENC_2_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_TIM_Encoder_MspInit+0x178>)
 800116c:	f001 feea 	bl	8002f44 <HAL_GPIO_Init>
}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	; 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40000400 	.word	0x40000400
 800117c:	40021000 	.word	0x40021000
 8001180:	48000400 	.word	0x48000400
 8001184:	40000800 	.word	0x40000800
 8001188:	40013400 	.word	0x40013400

0800118c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10c      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6613      	str	r3, [r2, #96]	; 0x60
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011b6:	e010      	b.n	80011da <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <HAL_TIM_Base_MspInit+0x64>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40014400 	.word	0x40014400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40014800 	.word	0x40014800

080011f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a61      	ldr	r2, [pc, #388]	; (8001398 <HAL_TIM_MspPostInit+0x1a4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d11e      	bne.n	8001254 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b61      	ldr	r3, [pc, #388]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a60      	ldr	r2, [pc, #384]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b5e      	ldr	r3, [pc, #376]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOT1_PWM_1_Pin|MOT1_PWM_2_Pin;
 800122e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001240:	2306      	movs	r3, #6
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f001 fe79 	bl	8002f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001252:	e09c      	b.n	800138e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800125c:	d12f      	bne.n	80012be <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a4e      	ldr	r2, [pc, #312]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOT2_PWM_1_Pin|MOT2_PWM_2_Pin|MOT3_PWM_1_Pin;
 8001276:	2307      	movs	r3, #7
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001286:	2301      	movs	r3, #1
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f001 fe56 	bl	8002f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT3_PWM_2_Pin;
 8001298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80012aa:	230a      	movs	r3, #10
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOT3_PWM_2_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f001 fe44 	bl	8002f44 <HAL_GPIO_Init>
}
 80012bc:	e067      	b.n	800138e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a37      	ldr	r2, [pc, #220]	; (80013a0 <HAL_TIM_MspPostInit+0x1ac>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d11d      	bne.n	8001304 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a33      	ldr	r2, [pc, #204]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TRW_PWM_1_Pin;
 80012e0:	2308      	movs	r3, #8
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80012f0:	2309      	movs	r3, #9
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRW_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f001 fe21 	bl	8002f44 <HAL_GPIO_Init>
}
 8001302:	e044      	b.n	800138e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <HAL_TIM_MspPostInit+0x1b0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d11d      	bne.n	800134a <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HOLD_servo_PWM_Pin;
 8001326:	2340      	movs	r3, #64	; 0x40
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001336:	2301      	movs	r3, #1
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HOLD_servo_PWM_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f001 fdfe 	bl	8002f44 <HAL_GPIO_Init>
}
 8001348:	e021      	b.n	800138e <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <HAL_TIM_MspPostInit+0x1b4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d11c      	bne.n	800138e <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_TIM_MspPostInit+0x1a8>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AIM_servo_PWM_Pin;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800137c:	2301      	movs	r3, #1
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AIM_servo_PWM_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f001 fddb 	bl	8002f44 <HAL_GPIO_Init>
}
 800138e:	bf00      	nop
 8001390:	3730      	adds	r7, #48	; 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40014000 	.word	0x40014000
 80013a4:	40014400 	.word	0x40014400
 80013a8:	40014800 	.word	0x40014800

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <NMI_Handler+0x4>

080013b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <MemManage_Handler+0x4>

080013be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <UsageFault_Handler+0x4>

080013ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f8:	f000 f8a4 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <DMA1_Channel1_IRQHandler+0x10>)
 8001406:	f001 fc8b 	bl	8002d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200005d8 	.word	0x200005d8

08001414 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <USB_LP_IRQHandler+0x10>)
 800141a:	f002 f834 	bl	8003486 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200013ec 	.word	0x200013ec

08001428 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SystemInit+0x20>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <SystemInit+0x20>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490e      	ldr	r1, [pc, #56]	; (800148c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0b      	ldr	r4, [pc, #44]	; (8001498 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001476:	f7ff ffd7 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f009 fef1 	bl	800b260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147e:	f7fe feff 	bl	8000280 <main>

08001482 <LoopForever>:

LoopForever:
    b LoopForever
 8001482:	e7fe      	b.n	8001482 <LoopForever>
  ldr   r0, =_estack
 8001484:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001490:	0800b34c 	.word	0x0800b34c
  ldr r2, =_sbss
 8001494:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001498:	200016e0 	.word	0x200016e0

0800149c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_2_IRQHandler>

0800149e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f001 f953 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f80e 	bl	80014d0 <HAL_InitTick>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	e001      	b.n	80014c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c0:	f7ff fcb2 	bl	8000e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c4:	79fb      	ldrb	r3, [r7, #7]

}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_InitTick+0x68>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d022      	beq.n	800152a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_InitTick+0x6c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_InitTick+0x68>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 f95e 	bl	80027ba <HAL_SYSTICK_Config>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10f      	bne.n	8001524 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d809      	bhi.n	800151e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150a:	2200      	movs	r2, #0
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001512:	f001 f92a 	bl	800276a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_InitTick+0x70>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e007      	b.n	800152e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	e004      	b.n	800152e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e001      	b.n	800152e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000008 	.word	0x20000008
 800153c:	20000000 	.word	0x20000000
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4413      	add	r3, r2
 8001552:	4a03      	ldr	r2, [pc, #12]	; (8001560 <HAL_IncTick+0x1c>)
 8001554:	6013      	str	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000748 	.word	0x20000748
 8001564:	20000008 	.word	0x20000008

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000748 	.word	0x20000748

08001580 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	609a      	str	r2, [r3, #8]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3360      	adds	r3, #96	; 0x60
 80015fa:	461a      	mov	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <LL_ADC_SetOffset+0x44>)
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	4313      	orrs	r3, r2
 8001618:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001620:	bf00      	nop
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	03fff000 	.word	0x03fff000

08001630 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3360      	adds	r3, #96	; 0x60
 800163e:	461a      	mov	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3360      	adds	r3, #96	; 0x60
 800166c:	461a      	mov	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001692:	b480      	push	{r7}
 8001694:	b087      	sub	sp, #28
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3360      	adds	r3, #96	; 0x60
 80016a2:	461a      	mov	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3360      	adds	r3, #96	; 0x60
 80016d8:	461a      	mov	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	615a      	str	r2, [r3, #20]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	4413      	add	r3, r2
 8001742:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	211f      	movs	r1, #31
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	f003 011f 	and.w	r1, r3, #31
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	431a      	orrs	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001770:	bf00      	nop
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3314      	adds	r3, #20
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	0e5b      	lsrs	r3, r3, #25
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	4413      	add	r3, r2
 800179a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	0d1b      	lsrs	r3, r3, #20
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2107      	movs	r1, #7
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	401a      	ands	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	0d1b      	lsrs	r3, r3, #20
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ec:	43db      	mvns	r3, r3
 80017ee:	401a      	ands	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0318 	and.w	r3, r3, #24
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017f8:	40d9      	lsrs	r1, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	400b      	ands	r3, r1
 80017fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001802:	431a      	orrs	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	0007ffff 	.word	0x0007ffff

0800181c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800182c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6093      	str	r3, [r2, #8]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001854:	d101      	bne.n	800185a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800187c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018a4:	d101      	bne.n	80018aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <LL_ADC_IsEnabled+0x18>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <LL_ADC_IsEnabled+0x1a>
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b08      	cmp	r3, #8
 8001916:	d101      	bne.n	800191c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e16d      	b.n	8001c22 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fa8b 	bl	8000e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff67 	bl	8001840 <LL_ADC_IsDeepPowerDownEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff4d 	bl	800181c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff82 	bl	8001890 <LL_ADC_IsInternalRegulatorEnabled>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d115      	bne.n	80019be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff66 	bl	8001868 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800199c:	4ba3      	ldr	r3, [pc, #652]	; (8001c2c <HAL_ADC_Init+0x300>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	4aa3      	ldr	r2, [pc, #652]	; (8001c30 <HAL_ADC_Init+0x304>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019b0:	e002      	b.n	80019b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f9      	bne.n	80019b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff64 	bl	8001890 <LL_ADC_IsInternalRegulatorEnabled>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10d      	bne.n	80019ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	f043 0210 	orr.w	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff75 	bl	80018de <LL_ADC_REG_IsConversionOngoing>
 80019f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 8106 	bne.w	8001c10 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8102 	bne.w	8001c10 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a14:	f043 0202 	orr.w	r2, r3, #2
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff49 	bl	80018b8 <LL_ADC_IsEnabled>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a30:	f7ff ff42 	bl	80018b8 <LL_ADC_IsEnabled>
 8001a34:	4604      	mov	r4, r0
 8001a36:	487f      	ldr	r0, [pc, #508]	; (8001c34 <HAL_ADC_Init+0x308>)
 8001a38:	f7ff ff3e 	bl	80018b8 <LL_ADC_IsEnabled>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4323      	orrs	r3, r4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	487b      	ldr	r0, [pc, #492]	; (8001c38 <HAL_ADC_Init+0x30c>)
 8001a4c:	f7ff fd98 	bl	8001580 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7f5b      	ldrb	r3, [r3, #29]
 8001a54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d106      	bne.n	8001a8c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	3b01      	subs	r3, #1
 8001a84:	045b      	lsls	r3, r3, #17
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_ADC_Init+0x310>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff01 	bl	80018de <LL_ADC_REG_IsConversionOngoing>
 8001adc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff0e 	bl	8001904 <LL_ADC_INJ_IsConversionOngoing>
 8001ae8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d16d      	bne.n	8001bcc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d16a      	bne.n	8001bcc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001afa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b02:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b12:	f023 0302 	bic.w	r3, r3, #2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d017      	beq.n	8001b58 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6911      	ldr	r1, [r2, #16]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b56:	e013      	b.n	8001b80 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d118      	bne.n	8001bbc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ba0:	4311      	orrs	r1, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bac:	430a      	orrs	r2, r1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	e007      	b.n	8001bcc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d10c      	bne.n	8001bee <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f023 010f 	bic.w	r1, r3, #15
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
 8001bec:	e007      	b.n	8001bfe <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 020f 	bic.w	r2, r2, #15
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c0e:	e007      	b.n	8001c20 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	f043 0210 	orr.w	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	053e2d63 	.word	0x053e2d63
 8001c34:	50000100 	.word	0x50000100
 8001c38:	50000300 	.word	0x50000300
 8001c3c:	fff04007 	.word	0xfff04007

08001c40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0b6      	sub	sp, #216	; 0xd8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x22>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e3c8      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x7b4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe35 	bl	80018de <LL_ADC_REG_IsConversionOngoing>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 83ad 	bne.w	80023d6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f7ff fd4b 	bl	8001724 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fe23 	bl	80018de <LL_ADC_REG_IsConversionOngoing>
 8001c98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fe2f 	bl	8001904 <LL_ADC_INJ_IsConversionOngoing>
 8001ca6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 81d9 	bne.w	8002066 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 81d4 	bne.w	8002066 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7ff fd52 	bl	800177c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fd0c 	bl	80016fe <LL_ADC_SetSamplingTimeCommonConfig>
 8001ce6:	e00e      	b.n	8001d06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f7ff fd41 	bl	800177c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fcfc 	bl	80016fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d022      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6919      	ldr	r1, [r3, #16]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d38:	f7ff fc56 	bl	80015e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6919      	ldr	r1, [r3, #16]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fca2 	bl	8001692 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	7f1b      	ldrb	r3, [r3, #28]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x124>
 8001d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d62:	e000      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x126>
 8001d64:	2300      	movs	r3, #0
 8001d66:	461a      	mov	r2, r3
 8001d68:	f7ff fcae 	bl	80016c8 <LL_ADC_SetOffsetSaturation>
 8001d6c:	e17b      	b.n	8002066 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc5b 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x15a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fc50 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	e01e      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x198>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fc45 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e004      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1b0>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	e018      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1e2>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e004      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d106      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fc14 	bl	800165c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fbf8 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x220>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbed 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	f003 021f 	and.w	r2, r3, #31
 8001e5e:	e01e      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x25e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fbe2 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e004      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x276>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	e018      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x2a8>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e004      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d106      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fbb1 	bl	800165c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2102      	movs	r1, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb95 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x2e6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2102      	movs	r1, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fb8a 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	e01e      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x324>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fb7f 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e004      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x33c>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	e016      	b.n	8001faa <HAL_ADC_ConfigChannel+0x36a>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	e004      	b.n	8001faa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d106      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fb50 	bl	800165c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fb34 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10a      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x3a8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2103      	movs	r1, #3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb29 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 021f 	and.w	r2, r3, #31
 8001fe6:	e017      	b.n	8002018 <HAL_ADC_ConfigChannel+0x3d8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2103      	movs	r1, #3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb1e 	bl	8001630 <LL_ADC_GetOffsetChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002002:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800200e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x3f0>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	e011      	b.n	8002054 <HAL_ADC_ConfigChannel+0x414>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800203e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002040:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e003      	b.n	8002054 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800204c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002054:	429a      	cmp	r2, r3
 8002056:	d106      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fafb 	bl	800165c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fc24 	bl	80018b8 <LL_ADC_IsEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8140 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	461a      	mov	r2, r3
 8002086:	f7ff fba5 	bl	80017d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4a8f      	ldr	r2, [pc, #572]	; (80022cc <HAL_ADC_ConfigChannel+0x68c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	f040 8131 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_ConfigChannel+0x47e>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	3301      	adds	r3, #1
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2b09      	cmp	r3, #9
 80020b4:	bf94      	ite	ls
 80020b6:	2301      	movls	r3, #1
 80020b8:	2300      	movhi	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	e019      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x4b2>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80020da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	bf94      	ite	ls
 80020ec:	2301      	movls	r3, #1
 80020ee:	2300      	movhi	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d079      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x4d2>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	3301      	adds	r3, #1
 800210a:	069b      	lsls	r3, r3, #26
 800210c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002110:	e015      	b.n	800213e <HAL_ADC_ConfigChannel+0x4fe>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002122:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e003      	b.n	8002136 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800212e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	069b      	lsls	r3, r3, #26
 800213a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_ADC_ConfigChannel+0x51e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	e017      	b.n	800218e <HAL_ADC_ConfigChannel+0x54e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800216c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002176:	2320      	movs	r3, #32
 8002178:	e003      	b.n	8002182 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800217a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	ea42 0103 	orr.w	r1, r2, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x574>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	051b      	lsls	r3, r3, #20
 80021b2:	e018      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x5a6>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80021d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 021f 	and.w	r2, r3, #31
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e6:	430b      	orrs	r3, r1
 80021e8:	e081      	b.n	80022ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d107      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x5c6>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	3301      	adds	r3, #1
 80021fe:	069b      	lsls	r3, r3, #26
 8002200:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002204:	e015      	b.n	8002232 <HAL_ADC_ConfigChannel+0x5f2>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800221e:	2320      	movs	r3, #32
 8002220:	e003      	b.n	800222a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	069b      	lsls	r3, r3, #26
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x612>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	3301      	adds	r3, #1
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	e017      	b.n	8002282 <HAL_ADC_ConfigChannel+0x642>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	61fb      	str	r3, [r7, #28]
  return result;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e003      	b.n	8002276 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	ea42 0103 	orr.w	r1, r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x66e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	3301      	adds	r3, #1
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	3b1e      	subs	r3, #30
 80022a6:	051b      	lsls	r3, r3, #20
 80022a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ac:	e01e      	b.n	80022ec <HAL_ADC_ConfigChannel+0x6ac>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	613b      	str	r3, [r7, #16]
  return result;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e006      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x698>
 80022ca:	bf00      	nop
 80022cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	051b      	lsls	r3, r3, #20
 80022e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ec:	430b      	orrs	r3, r1
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	6892      	ldr	r2, [r2, #8]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7ff fa42 	bl	800177c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <HAL_ADC_ConfigChannel+0x7bc>)
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d071      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002304:	483e      	ldr	r0, [pc, #248]	; (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 8002306:	f7ff f961 	bl	80015cc <LL_ADC_GetCommonPathInternalCh>
 800230a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a3c      	ldr	r2, [pc, #240]	; (8002404 <HAL_ADC_ConfigChannel+0x7c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x6e2>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <HAL_ADC_ConfigChannel+0x7c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d127      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d121      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002336:	d157      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002340:	4619      	mov	r1, r3
 8002342:	482f      	ldr	r0, [pc, #188]	; (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 8002344:	f7ff f92f 	bl	80015a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_ADC_ConfigChannel+0x7cc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	4a30      	ldr	r2, [pc, #192]	; (8002410 <HAL_ADC_ConfigChannel+0x7d0>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002362:	e002      	b.n	800236a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3b01      	subs	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002370:	e03a      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_ADC_ConfigChannel+0x7d4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d113      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x764>
 800237c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_ADC_ConfigChannel+0x7d8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02a      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239a:	4619      	mov	r1, r3
 800239c:	4818      	ldr	r0, [pc, #96]	; (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 800239e:	f7ff f902 	bl	80015a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a2:	e021      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_ADC_ConfigChannel+0x7dc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11c      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d116      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_ADC_ConfigChannel+0x7d8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d011      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023cc:	4619      	mov	r1, r3
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 80023d0:	f7ff f8e9 	bl	80015a6 <LL_ADC_SetCommonPathInternalCh>
 80023d4:	e008      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	37d8      	adds	r7, #216	; 0xd8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	80080000 	.word	0x80080000
 8002400:	50000300 	.word	0x50000300
 8002404:	c3210000 	.word	0xc3210000
 8002408:	90c00010 	.word	0x90c00010
 800240c:	20000000 	.word	0x20000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	c7520000 	.word	0xc7520000
 8002418:	50000100 	.word	0x50000100
 800241c:	cb840000 	.word	0xcb840000

08002420 <LL_ADC_IsEnabled>:
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <LL_ADC_IsEnabled+0x18>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <LL_ADC_IsEnabled+0x1a>
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_ADC_REG_IsConversionOngoing>:
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d101      	bne.n	800245e <LL_ADC_REG_IsConversionOngoing+0x18>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b0a1      	sub	sp, #132	; 0x84
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002486:	2302      	movs	r3, #2
 8002488:	e08b      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002492:	2300      	movs	r3, #0
 8002494:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002496:	2300      	movs	r3, #0
 8002498:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a2:	d102      	bne.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024a4:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	e001      	b.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e06a      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ffb9 	bl	8002446 <LL_ADC_REG_IsConversionOngoing>
 80024d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ffb3 	bl	8002446 <LL_ADC_REG_IsConversionOngoing>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d14c      	bne.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d149      	bne.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024ec:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80024ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d028      	beq.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800250a:	035b      	lsls	r3, r3, #13
 800250c:	430b      	orrs	r3, r1
 800250e:	431a      	orrs	r2, r3
 8002510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002512:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002514:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002518:	f7ff ff82 	bl	8002420 <LL_ADC_IsEnabled>
 800251c:	4604      	mov	r4, r0
 800251e:	4823      	ldr	r0, [pc, #140]	; (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002520:	f7ff ff7e 	bl	8002420 <LL_ADC_IsEnabled>
 8002524:	4603      	mov	r3, r0
 8002526:	4323      	orrs	r3, r4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d133      	bne.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800252c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002534:	f023 030f 	bic.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	6811      	ldr	r1, [r2, #0]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	6892      	ldr	r2, [r2, #8]
 8002540:	430a      	orrs	r2, r1
 8002542:	431a      	orrs	r2, r3
 8002544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002546:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002548:	e024      	b.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800254a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002554:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002556:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800255a:	f7ff ff61 	bl	8002420 <LL_ADC_IsEnabled>
 800255e:	4604      	mov	r4, r0
 8002560:	4812      	ldr	r0, [pc, #72]	; (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002562:	f7ff ff5d 	bl	8002420 <LL_ADC_IsEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	4323      	orrs	r3, r4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d112      	bne.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800256e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002576:	f023 030f 	bic.w	r3, r3, #15
 800257a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800257c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800257e:	e009      	b.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002592:	e000      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002594:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800259e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3784      	adds	r7, #132	; 0x84
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	50000100 	.word	0x50000100
 80025b0:	50000300 	.word	0x50000300

080025b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	; (8002650 <__NVIC_EnableIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002734:	f7ff ff8e 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff29 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff40 	bl	80025fc <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff90 	bl	80026a8 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff5f 	bl	8002654 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff33 	bl	8002618 <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffa4 	bl	8002710 <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e054      	b.n	8002890 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7f5b      	ldrb	r3, [r3, #29]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fb84 	bl	8000f04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_CRC_Init+0xc4>)
 8002810:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0218 	bic.w	r2, r2, #24
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	e00c      	b.n	800283e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	461a      	mov	r2, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f948 	bl	8002ac4 <HAL_CRCEx_Polynomial_Set>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e028      	b.n	8002890 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	795b      	ldrb	r3, [r3, #5]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800284e:	611a      	str	r2, [r3, #16]
 8002850:	e004      	b.n	800285c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6912      	ldr	r2, [r2, #16]
 800285a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	04c11db7 	.word	0x04c11db7

0800289c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2202      	movs	r2, #2
 80028b0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d006      	beq.n	80028d8 <HAL_CRC_Calculate+0x3c>
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d829      	bhi.n	8002922 <HAL_CRC_Calculate+0x86>
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d019      	beq.n	8002906 <HAL_CRC_Calculate+0x6a>
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d01e      	beq.n	8002914 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80028d6:	e024      	b.n	8002922 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e00a      	b.n	80028f4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	441a      	add	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d3f0      	bcc.n	80028de <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
      break;
 8002904:	e00e      	b.n	8002924 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f812 	bl	8002934 <CRC_Handle_8>
 8002910:	6138      	str	r0, [r7, #16]
      break;
 8002912:	e007      	b.n	8002924 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f899 	bl	8002a50 <CRC_Handle_16>
 800291e:	6138      	str	r0, [r7, #16]
      break;
 8002920:	e000      	b.n	8002924 <HAL_CRC_Calculate+0x88>
      break;
 8002922:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800292a:	693b      	ldr	r3, [r7, #16]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e023      	b.n	800298e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3301      	adds	r3, #1
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	440b      	add	r3, r1
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002960:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	440b      	add	r3, r1
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002970:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3303      	adds	r3, #3
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	440b      	add	r3, r1
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002984:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	3301      	adds	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	429a      	cmp	r2, r3
 8002996:	d3d6      	bcc.n	8002946 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04d      	beq.n	8002a3e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	4413      	add	r3, r2
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d116      	bne.n	80029f4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	4413      	add	r3, r2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3301      	adds	r3, #1
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	440b      	add	r3, r1
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	8b7a      	ldrh	r2, [r7, #26]
 80029f2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d11f      	bne.n	8002a3e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4413      	add	r3, r2
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	3301      	adds	r3, #1
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	440b      	add	r3, r1
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	8b7a      	ldrh	r2, [r7, #26]
 8002a2a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	4413      	add	r3, r2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3724      	adds	r7, #36	; 0x24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e013      	b.n	8002a8a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	440b      	add	r3, r1
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3e6      	bcc.n	8002a62 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4413      	add	r3, r2
 8002aac:	881a      	ldrh	r2, [r3, #0]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ad4:	231f      	movs	r3, #31
 8002ad6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ad8:	bf00      	nop
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	613a      	str	r2, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_CRCEx_Polynomial_Set+0x16>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b18      	cmp	r3, #24
 8002afc:	d846      	bhi.n	8002b8c <HAL_CRCEx_Polynomial_Set+0xc8>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b93 	.word	0x08002b93
 8002b08:	08002b8d 	.word	0x08002b8d
 8002b0c:	08002b8d 	.word	0x08002b8d
 8002b10:	08002b8d 	.word	0x08002b8d
 8002b14:	08002b8d 	.word	0x08002b8d
 8002b18:	08002b8d 	.word	0x08002b8d
 8002b1c:	08002b8d 	.word	0x08002b8d
 8002b20:	08002b8d 	.word	0x08002b8d
 8002b24:	08002b81 	.word	0x08002b81
 8002b28:	08002b8d 	.word	0x08002b8d
 8002b2c:	08002b8d 	.word	0x08002b8d
 8002b30:	08002b8d 	.word	0x08002b8d
 8002b34:	08002b8d 	.word	0x08002b8d
 8002b38:	08002b8d 	.word	0x08002b8d
 8002b3c:	08002b8d 	.word	0x08002b8d
 8002b40:	08002b8d 	.word	0x08002b8d
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002b8d 	.word	0x08002b8d
 8002b4c:	08002b8d 	.word	0x08002b8d
 8002b50:	08002b8d 	.word	0x08002b8d
 8002b54:	08002b8d 	.word	0x08002b8d
 8002b58:	08002b8d 	.word	0x08002b8d
 8002b5c:	08002b8d 	.word	0x08002b8d
 8002b60:	08002b8d 	.word	0x08002b8d
 8002b64:	08002b69 	.word	0x08002b69
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d913      	bls.n	8002b96 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b72:	e010      	b.n	8002b96 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b07      	cmp	r3, #7
 8002b78:	d90f      	bls.n	8002b9a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b7e:	e00c      	b.n	8002b9a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	d90b      	bls.n	8002b9e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b8a:	e008      	b.n	8002b9e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b90:	e006      	b.n	8002ba0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b92:	bf00      	nop
 8002b94:	e004      	b.n	8002ba0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b9e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 0118 	bic.w	r1, r3, #24
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e08d      	b.n	8002cfe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_DMA_Init+0x138>)
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d80f      	bhi.n	8002c0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <HAL_DMA_Init+0x13c>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a45      	ldr	r2, [pc, #276]	; (8002d10 <HAL_DMA_Init+0x140>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	009a      	lsls	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a42      	ldr	r2, [pc, #264]	; (8002d14 <HAL_DMA_Init+0x144>)
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c0c:	e00e      	b.n	8002c2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_DMA_Init+0x148>)
 8002c16:	4413      	add	r3, r2
 8002c18:	4a3d      	ldr	r2, [pc, #244]	; (8002d10 <HAL_DMA_Init+0x140>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <HAL_DMA_Init+0x14c>)
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8fe 	bl	8002e80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c8c:	d102      	bne.n	8002c94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ca8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d010      	beq.n	8002cd4 <HAL_DMA_Init+0x104>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d80c      	bhi.n	8002cd4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f91e 	bl	8002efc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	e008      	b.n	8002ce6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40020407 	.word	0x40020407
 8002d0c:	bffdfff8 	.word	0xbffdfff8
 8002d10:	cccccccd 	.word	0xcccccccd
 8002d14:	40020000 	.word	0x40020000
 8002d18:	bffdfbf8 	.word	0xbffdfbf8
 8002d1c:	40020400 	.word	0x40020400

08002d20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2204      	movs	r2, #4
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d026      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x7a>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d021      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2104      	movs	r1, #4
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d071      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d98:	e06c      	b.n	8002e74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2202      	movs	r2, #2
 8002da4:	409a      	lsls	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02e      	beq.n	8002e0c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d029      	beq.n	8002e0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 020a 	bic.w	r2, r2, #10
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f003 021f 	and.w	r2, r3, #31
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2102      	movs	r1, #2
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d038      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e0a:	e033      	b.n	8002e74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	2208      	movs	r2, #8
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02a      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d025      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 020e 	bic.w	r2, r2, #14
 8002e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f003 021f 	and.w	r2, r3, #31
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
}
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d802      	bhi.n	8002e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e001      	b.n	8002e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e9c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3b08      	subs	r3, #8
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	009a      	lsls	r2, r3, #2
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002eca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40020407 	.word	0x40020407
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	40020820 	.word	0x40020820
 8002ef4:	cccccccd 	.word	0xcccccccd
 8002ef8:	40020880 	.word	0x40020880

08002efc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f1e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	1000823f 	.word	0x1000823f
 8002f40:	40020940 	.word	0x40020940

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f52:	e15a      	b.n	800320a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 814c 	beq.w	8003204 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d00b      	beq.n	8002f8c <HAL_GPIO_Init+0x48>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d007      	beq.n	8002f8c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f80:	2b11      	cmp	r3, #17
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b12      	cmp	r3, #18
 8002f8a:	d130      	bne.n	8002fee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 0201 	and.w	r2, r3, #1
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0xea>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b12      	cmp	r3, #18
 800302c:	d123      	bne.n	8003076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	08da      	lsrs	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3208      	adds	r2, #8
 8003036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	6939      	ldr	r1, [r7, #16]
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	2203      	movs	r2, #3
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0203 	and.w	r2, r3, #3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a6 	beq.w	8003204 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b8:	4b5b      	ldr	r3, [pc, #364]	; (8003228 <HAL_GPIO_Init+0x2e4>)
 80030ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030bc:	4a5a      	ldr	r2, [pc, #360]	; (8003228 <HAL_GPIO_Init+0x2e4>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6613      	str	r3, [r2, #96]	; 0x60
 80030c4:	4b58      	ldr	r3, [pc, #352]	; (8003228 <HAL_GPIO_Init+0x2e4>)
 80030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d0:	4a56      	ldr	r2, [pc, #344]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	3302      	adds	r3, #2
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030fa:	d01f      	beq.n	800313c <HAL_GPIO_Init+0x1f8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_GPIO_Init+0x2ec>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d019      	beq.n	8003138 <HAL_GPIO_Init+0x1f4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a4b      	ldr	r2, [pc, #300]	; (8003234 <HAL_GPIO_Init+0x2f0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <HAL_GPIO_Init+0x1f0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <HAL_GPIO_Init+0x2f4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00d      	beq.n	8003130 <HAL_GPIO_Init+0x1ec>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_GPIO_Init+0x2f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d007      	beq.n	800312c <HAL_GPIO_Init+0x1e8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a48      	ldr	r2, [pc, #288]	; (8003240 <HAL_GPIO_Init+0x2fc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_GPIO_Init+0x1e4>
 8003124:	2305      	movs	r3, #5
 8003126:	e00a      	b.n	800313e <HAL_GPIO_Init+0x1fa>
 8003128:	2306      	movs	r3, #6
 800312a:	e008      	b.n	800313e <HAL_GPIO_Init+0x1fa>
 800312c:	2304      	movs	r3, #4
 800312e:	e006      	b.n	800313e <HAL_GPIO_Init+0x1fa>
 8003130:	2303      	movs	r3, #3
 8003132:	e004      	b.n	800313e <HAL_GPIO_Init+0x1fa>
 8003134:	2302      	movs	r3, #2
 8003136:	e002      	b.n	800313e <HAL_GPIO_Init+0x1fa>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_GPIO_Init+0x1fa>
 800313c:	2300      	movs	r3, #0
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	f002 0203 	and.w	r2, r2, #3
 8003144:	0092      	lsls	r2, r2, #2
 8003146:	4093      	lsls	r3, r2
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314e:	4937      	ldr	r1, [pc, #220]	; (800322c <HAL_GPIO_Init+0x2e8>)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_GPIO_Init+0x300>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003180:	4a30      	ldr	r2, [pc, #192]	; (8003244 <HAL_GPIO_Init+0x300>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_GPIO_Init+0x300>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031d4:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031fe:	4a11      	ldr	r2, [pc, #68]	; (8003244 <HAL_GPIO_Init+0x300>)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f ae9d 	bne.w	8002f54 <HAL_GPIO_Init+0x10>
  }
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000
 800322c:	40010000 	.word	0x40010000
 8003230:	48000400 	.word	0x48000400
 8003234:	48000800 	.word	0x48000800
 8003238:	48000c00 	.word	0x48000c00
 800323c:	48001000 	.word	0x48001000
 8003240:	48001400 	.word	0x48001400
 8003244:	40010400 	.word	0x40010400

08003248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
 8003254:	4613      	mov	r3, r2
 8003256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003258:	787b      	ldrb	r3, [r7, #1]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003264:	e002      	b.n	800326c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327a:	b08b      	sub	sp, #44	; 0x2c
 800327c:	af06      	add	r7, sp, #24
 800327e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0d7      	b.n	800343a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f007 fcee 	bl	800ac80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 fc3e 	bl	8006b32 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	e04c      	b.n	8003356 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	440b      	add	r3, r1
 80032cc:	3301      	adds	r3, #1
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	b298      	uxth	r0, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3336      	adds	r3, #54	; 0x36
 80032fa:	4602      	mov	r2, r0
 80032fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	3303      	adds	r3, #3
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	3338      	adds	r3, #56	; 0x38
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	333c      	adds	r3, #60	; 0x3c
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	440b      	add	r3, r1
 800334a:	3340      	adds	r3, #64	; 0x40
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	3301      	adds	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d3ad      	bcc.n	80032bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e044      	b.n	80033f0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	440b      	add	r3, r1
 8003374:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	3301      	adds	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3b5      	bcc.n	8003366 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	687e      	ldr	r6, [r7, #4]
 8003402:	466d      	mov	r5, sp
 8003404:	f106 0410 	add.w	r4, r6, #16
 8003408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	1d33      	adds	r3, r6, #4
 8003412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003414:	6838      	ldr	r0, [r7, #0]
 8003416:	f003 fba7 	bl	8006b68 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 fb8a 	bl	8004b4c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003442 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_PCD_Start+0x16>
 8003454:	2302      	movs	r3, #2
 8003456:	e012      	b.n	800347e <HAL_PCD_Start+0x3c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f003 fb4d 	bl	8006b04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f005 fd01 	bl	8008e76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f005 fd06 	bl	8008ea4 <USB_ReadInterrupts>
 8003498:	4603      	mov	r3, r0
 800349a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb4d 	bl	8003b44 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f005 fcf8 	bl	8008ea4 <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034be:	d112      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	b292      	uxth	r2, r2
 80034d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f007 fc4c 	bl	800ad76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034de:	2100      	movs	r1, #0
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f91e 	bl	8003722 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f005 fcda 	bl	8008ea4 <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fa:	d10b      	bne.n	8003514 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003504:	b29a      	uxth	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800350e:	b292      	uxth	r2, r2
 8003510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f005 fcc3 	bl	8008ea4 <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d10b      	bne.n	8003542 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800353c:	b292      	uxth	r2, r2
 800353e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f005 fcac 	bl	8008ea4 <USB_ReadInterrupts>
 800354c:	4603      	mov	r3, r0
 800354e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003556:	d133      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	b292      	uxth	r2, r2
 800356c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003578:	b29a      	uxth	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0208 	bic.w	r2, r2, #8
 8003582:	b292      	uxth	r2, r2
 8003584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800359a:	2100      	movs	r1, #0
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f007 fddf 	bl	800b160 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f007 fc20 	bl	800ade8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ba:	b292      	uxth	r2, r2
 80035bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 fc6d 	bl	8008ea4 <USB_ReadInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d4:	d126      	bne.n	8003624 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0208 	orr.w	r2, r2, #8
 80035e8:	b292      	uxth	r2, r2
 80035ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003600:	b292      	uxth	r2, r2
 8003602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0204 	orr.w	r2, r2, #4
 8003618:	b292      	uxth	r2, r2
 800361a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f007 fbc8 	bl	800adb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f005 fc3b 	bl	8008ea4 <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d13f      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364a:	b292      	uxth	r2, r2
 800364c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d12b      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0204 	orr.w	r2, r2, #4
 800366c:	b292      	uxth	r2, r2
 800366e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0208 	orr.w	r2, r2, #8
 8003684:	b292      	uxth	r2, r2
 8003686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800369a:	b29b      	uxth	r3, r3
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80036a8:	2101      	movs	r1, #1
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f007 fd58 	bl	800b160 <HAL_PCDEx_LPM_Callback>
 80036b0:	e002      	b.n	80036b8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f007 fb7e 	bl	800adb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f005 fbf1 	bl	8008ea4 <USB_ReadInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036cc:	d10e      	bne.n	80036ec <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036e0:	b292      	uxth	r2, r2
 80036e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f007 fb37 	bl	800ad5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f005 fbd7 	bl	8008ea4 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003700:	d10b      	bne.n	800371a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003714:	b292      	uxth	r2, r2
 8003716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_PCD_SetAddress+0x1a>
 8003738:	2302      	movs	r3, #2
 800373a:	e013      	b.n	8003764 <HAL_PCD_SetAddress+0x42>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f005 fb7a 	bl	8008e4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	460b      	mov	r3, r1
 8003780:	803b      	strh	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800378a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800378e:	2b00      	cmp	r3, #0
 8003790:	da0e      	bge.n	80037b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	705a      	strb	r2, [r3, #1]
 80037ae:	e00e      	b.n	80037ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 0207 	and.w	r2, r3, #7
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037da:	883a      	ldrh	r2, [r7, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	78ba      	ldrb	r2, [r7, #2]
 80037e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	785b      	ldrb	r3, [r3, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037f8:	78bb      	ldrb	r3, [r7, #2]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d102      	bne.n	8003804 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_PCD_EP_Open+0xa6>
 800380e:	2302      	movs	r3, #2
 8003810:	e00e      	b.n	8003830 <HAL_PCD_EP_Open+0xc4>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	4618      	mov	r0, r3
 8003822:	f003 f9c3 	bl	8006bac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800382e:	7afb      	ldrb	r3, [r7, #11]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003848:	2b00      	cmp	r3, #0
 800384a:	da0e      	bge.n	800386a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	705a      	strb	r2, [r3, #1]
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 0207 	and.w	r2, r3, #7
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_PCD_EP_Close+0x6a>
 800389e:	2302      	movs	r3, #2
 80038a0:	e00e      	b.n	80038c0 <HAL_PCD_EP_Close+0x88>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 fce9 	bl	8007288 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	460b      	mov	r3, r1
 80038d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d8:	7afb      	ldrb	r3, [r7, #11]
 80038da:	f003 0207 	and.w	r2, r3, #7
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	b2da      	uxtb	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003914:	7afb      	ldrb	r3, [r7, #11]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	4618      	mov	r0, r3
 8003926:	f003 fe9c 	bl	8007662 <USB_EPStartXfer>
 800392a:	e005      	b.n	8003938 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	4618      	mov	r0, r3
 8003934:	f003 fe95 	bl	8007662 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 0207 	and.w	r2, r3, #7
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003964:	681b      	ldr	r3, [r3, #0]
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	460b      	mov	r3, r1
 8003980:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003982:	7afb      	ldrb	r3, [r7, #11]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2201      	movs	r2, #1
 80039bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fe41 	bl	8007662 <USB_EPStartXfer>
 80039e0:	e005      	b.n	80039ee <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 fe3a 	bl	8007662 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	f003 0207 	and.w	r2, r3, #7
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d901      	bls.n	8003a16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e03e      	b.n	8003a94 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da0e      	bge.n	8003a3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	705a      	strb	r2, [r3, #1]
 8003a3a:	e00c      	b.n	8003a56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_PCD_EP_SetStall+0x7e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e00e      	b.n	8003a94 <HAL_PCD_EP_SetStall+0x9c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f005 f8e3 	bl	8008c50 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d901      	bls.n	8003aba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e040      	b.n	8003b3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da0e      	bge.n	8003ae0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	705a      	strb	r2, [r3, #1]
 8003ade:	e00e      	b.n	8003afe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 0207 	and.w	r2, r3, #7
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_PCD_EP_ClrStall+0x82>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e00e      	b.n	8003b3c <HAL_PCD_EP_ClrStall+0xa0>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f005 f8e0 	bl	8008cf2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08e      	sub	sp, #56	; 0x38
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b4c:	e2d6      	b.n	80040fc <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b56:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003b64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 815b 	bne.w	8003e24 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d150      	bne.n	8003c1a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b88:	81fb      	strh	r3, [r7, #14]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	89fb      	ldrh	r3, [r7, #14]
 8003b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3328      	adds	r3, #40	; 0x28
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	441a      	add	r2, r3
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bd8:	2100      	movs	r1, #0
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f007 f8a3 	bl	800ad26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8287 	beq.w	80040fc <PCD_EP_ISR_Handler+0x5b8>
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 8282 	bne.w	80040fc <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b292      	uxth	r2, r2
 8003c0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c18:	e270      	b.n	80040fc <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d032      	beq.n	8003c9a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f005 f96a 	bl	8008f48 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c80:	4013      	ands	r3, r2
 8003c82:	823b      	strh	r3, [r7, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	8a3a      	ldrh	r2, [r7, #16]
 8003c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f007 f81a 	bl	800accc <HAL_PCD_SetupStageCallback>
 8003c98:	e230      	b.n	80040fc <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c9a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f280 822c 	bge.w	80040fc <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	83bb      	strh	r3, [r7, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	8bba      	ldrh	r2, [r7, #28]
 8003cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d019      	beq.n	8003d26 <PCD_EP_ISR_Handler+0x1e2>
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d015      	beq.n	8003d26 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	6959      	ldr	r1, [r3, #20]
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f005 f91c 	bl	8008f48 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	441a      	add	r2, r3
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d1e:	2100      	movs	r1, #0
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f006 ffe5 	bl	800acf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 81e2 	bne.w	80040fc <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d112      	bne.n	8003d86 <PCD_EP_ISR_Handler+0x242>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	e02f      	b.n	8003de6 <PCD_EP_ISR_Handler+0x2a2>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d8c:	d813      	bhi.n	8003db6 <PCD_EP_ISR_Handler+0x272>
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <PCD_EP_ISR_Handler+0x264>
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	3301      	adds	r3, #1
 8003da6:	633b      	str	r3, [r7, #48]	; 0x30
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	029b      	lsls	r3, r3, #10
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e017      	b.n	8003de6 <PCD_EP_ISR_Handler+0x2a2>
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <PCD_EP_ISR_Handler+0x28c>
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	029b      	lsls	r3, r3, #10
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df6:	827b      	strh	r3, [r7, #18]
 8003df8:	8a7b      	ldrh	r3, [r7, #18]
 8003dfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dfe:	827b      	strh	r3, [r7, #18]
 8003e00:	8a7b      	ldrh	r3, [r7, #18]
 8003e02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e06:	827b      	strh	r3, [r7, #18]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	8a7b      	ldrh	r3, [r7, #18]
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
 8003e22:	e16b      	b.n	80040fc <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f280 80e4 	bge.w	8004008 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e56:	4013      	ands	r3, r2
 8003e58:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	7b1b      	ldrb	r3, [r3, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d120      	bne.n	8003ed2 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003eb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8083 	beq.w	8003fc4 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	6959      	ldr	r1, [r3, #20]
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	88da      	ldrh	r2, [r3, #6]
 8003eca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ecc:	f005 f83c 	bl	8008f48 <USB_ReadPMA>
 8003ed0:	e078      	b.n	8003fc4 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	78db      	ldrb	r3, [r3, #3]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d108      	bne.n	8003eec <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003eda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003edc:	461a      	mov	r2, r3
 8003ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f919 	bl	8004118 <HAL_PCD_EP_DB_Receive>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003eea:	e06b      	b.n	8003fc4 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01f      	beq.n	8003f86 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d028      	beq.n	8003fc4 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	6959      	ldr	r1, [r3, #20]
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	891a      	ldrh	r2, [r3, #8]
 8003f7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f80:	f004 ffe2 	bl	8008f48 <USB_ReadPMA>
 8003f84:	e01e      	b.n	8003fc4 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003faa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003fac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	6959      	ldr	r1, [r3, #20]
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	895a      	ldrh	r2, [r3, #10]
 8003fbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fc0:	f004 ffc2 	bl	8008f48 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fca:	441a      	add	r2, r3
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fd6:	441a      	add	r2, r3
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <PCD_EP_ISR_Handler+0x4aa>
 8003fe4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d206      	bcs.n	8003ffc <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f006 fe7b 	bl	800acf0 <HAL_PCD_DataOutStageCallback>
 8003ffa:	e005      	b.n	8004008 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004002:	4618      	mov	r0, r3
 8004004:	f003 fb2d 	bl	8007662 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004008:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d074      	beq.n	80040fc <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8004012:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004040:	843b      	strh	r3, [r7, #32]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	8c3b      	ldrh	r3, [r7, #32]
 8004052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800405a:	b29b      	uxth	r3, r3
 800405c:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	78db      	ldrb	r3, [r3, #3]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d144      	bne.n	80040f0 <PCD_EP_ISR_Handler+0x5ac>
 8004066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d13f      	bne.n	80040f0 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004078:	b29b      	uxth	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	4413      	add	r3, r2
 800408a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004094:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	8bfb      	ldrh	r3, [r7, #30]
 800409c:	429a      	cmp	r2, r3
 800409e:	d906      	bls.n	80040ae <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	8bfb      	ldrh	r3, [r7, #30]
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	619a      	str	r2, [r3, #24]
 80040ac:	e002      	b.n	80040b4 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	2200      	movs	r2, #0
 80040b2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f006 fe2f 	bl	800ad26 <HAL_PCD_DataInStageCallback>
 80040c8:	e018      	b.n	80040fc <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	8bfb      	ldrh	r3, [r7, #30]
 80040d0:	441a      	add	r2, r3
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	8bfb      	ldrh	r3, [r7, #30]
 80040dc:	441a      	add	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040e8:	4618      	mov	r0, r3
 80040ea:	f003 faba 	bl	8007662 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80040ee:	e005      	b.n	80040fc <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040f2:	461a      	mov	r2, r3
 80040f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f917 	bl	800432a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004104:	b29b      	uxth	r3, r3
 8004106:	b21b      	sxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f6ff ad20 	blt.w	8003b4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3738      	adds	r7, #56	; 0x38
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d07c      	beq.n	800422a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004138:	b29b      	uxth	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	4413      	add	r3, r2
 800414a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004154:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	8b7b      	ldrh	r3, [r7, #26]
 800415c:	429a      	cmp	r2, r3
 800415e:	d306      	bcc.n	800416e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	8b7b      	ldrh	r3, [r7, #26]
 8004166:	1ad2      	subs	r2, r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	619a      	str	r2, [r3, #24]
 800416c:	e002      	b.n	8004174 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d123      	bne.n	80041c4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004196:	833b      	strh	r3, [r7, #24]
 8004198:	8b3b      	ldrh	r3, [r7, #24]
 800419a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800419e:	833b      	strh	r3, [r7, #24]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	8b3b      	ldrh	r3, [r7, #24]
 80041b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01f      	beq.n	800420e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	82fb      	strh	r3, [r7, #22]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	8afb      	ldrh	r3, [r7, #22]
 80041fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800420e:	8b7b      	ldrh	r3, [r7, #26]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8085 	beq.w	8004320 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6959      	ldr	r1, [r3, #20]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	891a      	ldrh	r2, [r3, #8]
 8004222:	8b7b      	ldrh	r3, [r7, #26]
 8004224:	f004 fe90 	bl	8008f48 <USB_ReadPMA>
 8004228:	e07a      	b.n	8004320 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	4413      	add	r3, r2
 8004244:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	8b7b      	ldrh	r3, [r7, #26]
 8004256:	429a      	cmp	r2, r3
 8004258:	d306      	bcc.n	8004268 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	8b7b      	ldrh	r3, [r7, #26]
 8004260:	1ad2      	subs	r2, r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	619a      	str	r2, [r3, #24]
 8004266:	e002      	b.n	800426e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d123      	bne.n	80042be <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	83fb      	strh	r3, [r7, #30]
 8004292:	8bfb      	ldrh	r3, [r7, #30]
 8004294:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004298:	83fb      	strh	r3, [r7, #30]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	441a      	add	r2, r3
 80042a8:	8bfb      	ldrh	r3, [r7, #30]
 80042aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11f      	bne.n	8004308 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	83bb      	strh	r3, [r7, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	441a      	add	r2, r3
 80042f2:	8bbb      	ldrh	r3, [r7, #28]
 80042f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004304:	b29b      	uxth	r3, r3
 8004306:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004308:	8b7b      	ldrh	r3, [r7, #26]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6959      	ldr	r1, [r3, #20]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	895a      	ldrh	r2, [r3, #10]
 800431a:	8b7b      	ldrh	r3, [r7, #26]
 800431c:	f004 fe14 	bl	8008f48 <USB_ReadPMA>
    }
  }

  return count;
 8004320:	8b7b      	ldrh	r3, [r7, #26]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b0a2      	sub	sp, #136	; 0x88
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	4613      	mov	r3, r2
 8004336:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 81c5 	beq.w	80046ce <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	4413      	add	r3, r2
 800435e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004368:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004374:	429a      	cmp	r2, r3
 8004376:	d907      	bls.n	8004388 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004380:	1ad2      	subs	r2, r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	619a      	str	r2, [r3, #24]
 8004386:	e002      	b.n	800438e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 80b9 	bne.w	800450a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d126      	bne.n	80043ee <HAL_PCD_EP_DB_Transmit+0xc4>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	4413      	add	r3, r2
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	00da      	lsls	r2, r3, #3
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	4413      	add	r3, r2
 80043c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	801a      	strh	r2, [r3, #0]
 80043ec:	e01a      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0xfa>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	785b      	ldrb	r3, [r3, #1]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d116      	bne.n	8004424 <HAL_PCD_EP_DB_Transmit+0xfa>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004404:	b29b      	uxth	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	4413      	add	r3, r2
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	00da      	lsls	r2, r3, #3
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	4413      	add	r3, r2
 8004418:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	2200      	movs	r2, #0
 8004422:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	785b      	ldrb	r3, [r3, #1]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d126      	bne.n	8004480 <HAL_PCD_EP_DB_Transmit+0x156>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004440:	b29b      	uxth	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	00da      	lsls	r2, r3, #3
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4413      	add	r3, r2
 8004454:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004464:	b29a      	uxth	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	801a      	strh	r2, [r3, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004478:	b29a      	uxth	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	e017      	b.n	80044b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d113      	bne.n	80044b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004490:	b29b      	uxth	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	4413      	add	r3, r2
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	00da      	lsls	r2, r3, #3
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	4413      	add	r3, r2
 80044a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2200      	movs	r2, #0
 80044ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4619      	mov	r1, r3
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f006 fc35 	bl	800ad26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 82d2 	beq.w	8004a6c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	827b      	strh	r3, [r7, #18]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	8a7b      	ldrh	r3, [r7, #18]
 80044f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004504:	b29b      	uxth	r3, r3
 8004506:	8013      	strh	r3, [r2, #0]
 8004508:	e2b0      	b.n	8004a6c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d021      	beq.n	8004558 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004554:	b29b      	uxth	r3, r3
 8004556:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800455e:	2b01      	cmp	r3, #1
 8004560:	f040 8284 	bne.w	8004a6c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800456c:	441a      	add	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800457a:	441a      	add	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	429a      	cmp	r2, r3
 800458a:	d309      	bcc.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6a1a      	ldr	r2, [r3, #32]
 8004596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004598:	1ad2      	subs	r2, r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	621a      	str	r2, [r3, #32]
 800459e:	e015      	b.n	80045cc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 80045a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045b6:	e009      	b.n	80045cc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d155      	bne.n	8004680 <HAL_PCD_EP_DB_Transmit+0x356>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	4413      	add	r3, r2
 80045ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00da      	lsls	r2, r3, #3
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
 80045fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d112      	bne.n	8004628 <HAL_PCD_EP_DB_Transmit+0x2fe>
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800460c:	b29a      	uxth	r2, r3
 800460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004620:	b29a      	uxth	r2, r3
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	e047      	b.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462a:	2b3e      	cmp	r3, #62	; 0x3e
 800462c:	d811      	bhi.n	8004652 <HAL_PCD_EP_DB_Transmit+0x328>
 800462e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48
 8004634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_PCD_EP_DB_Transmit+0x31a>
 800463e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004640:	3301      	adds	r3, #1
 8004642:	64bb      	str	r3, [r7, #72]	; 0x48
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	b29b      	uxth	r3, r3
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	b29a      	uxth	r2, r3
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	e032      	b.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	64bb      	str	r3, [r7, #72]	; 0x48
 8004658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_PCD_EP_DB_Transmit+0x33e>
 8004662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004664:	3b01      	subs	r3, #1
 8004666:	64bb      	str	r3, [r7, #72]	; 0x48
 8004668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466a:	b29b      	uxth	r3, r3
 800466c:	029b      	lsls	r3, r3, #10
 800466e:	b29b      	uxth	r3, r3
 8004670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004678:	b29a      	uxth	r2, r3
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e01b      	b.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d117      	bne.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	4413      	add	r3, r2
 800469e:	643b      	str	r3, [r7, #64]	; 0x40
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	00da      	lsls	r2, r3, #3
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	4413      	add	r3, r2
 80046aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6959      	ldr	r1, [r3, #20]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	891a      	ldrh	r2, [r3, #8]
 80046c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f004 fbfc 	bl	8008ec4 <USB_WritePMA>
 80046cc:	e1ce      	b.n	8004a6c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	4413      	add	r3, r2
 80046e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046fe:	429a      	cmp	r2, r3
 8004700:	d307      	bcc.n	8004712 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	619a      	str	r2, [r3, #24]
 8004710:	e002      	b.n	8004718 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 80c4 	bne.w	80048aa <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d126      	bne.n	8004778 <HAL_PCD_EP_DB_Transmit+0x44e>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473e:	4413      	add	r3, r2
 8004740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	00da      	lsls	r2, r3, #3
 8004748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474a:	4413      	add	r3, r2
 800474c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004750:	66bb      	str	r3, [r7, #104]	; 0x68
 8004752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800475c:	b29a      	uxth	r2, r3
 800475e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004770:	b29a      	uxth	r2, r3
 8004772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e01a      	b.n	80047ae <HAL_PCD_EP_DB_Transmit+0x484>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d116      	bne.n	80047ae <HAL_PCD_EP_DB_Transmit+0x484>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	677b      	str	r3, [r7, #116]	; 0x74
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478e:	b29b      	uxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004794:	4413      	add	r3, r2
 8004796:	677b      	str	r3, [r7, #116]	; 0x74
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00da      	lsls	r2, r3, #3
 800479e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047a6:	673b      	str	r3, [r7, #112]	; 0x70
 80047a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047aa:	2200      	movs	r2, #0
 80047ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d12f      	bne.n	800481c <HAL_PCD_EP_DB_Transmit+0x4f2>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047d4:	4413      	add	r3, r2
 80047d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	00da      	lsls	r2, r3, #3
 80047e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047e4:	4413      	add	r3, r2
 80047e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004812:	b29a      	uxth	r2, r3
 8004814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e017      	b.n	800484c <HAL_PCD_EP_DB_Transmit+0x522>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d113      	bne.n	800484c <HAL_PCD_EP_DB_Transmit+0x522>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482c:	b29b      	uxth	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004832:	4413      	add	r3, r2
 8004834:	67bb      	str	r3, [r7, #120]	; 0x78
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	00da      	lsls	r2, r3, #3
 800483c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483e:	4413      	add	r3, r2
 8004840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004844:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004848:	2200      	movs	r2, #0
 800484a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f006 fa67 	bl	800ad26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 8104 	bne.w	8004a6c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	8013      	strh	r3, [r2, #0]
 80048a8:	e0e0      	b.n	8004a6c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d121      	bne.n	80048f8 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048fe:	2b01      	cmp	r3, #1
 8004900:	f040 80b4 	bne.w	8004a6c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800490c:	441a      	add	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800491a:	441a      	add	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d309      	bcc.n	8004940 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004938:	1ad2      	subs	r2, r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	621a      	str	r2, [r3, #32]
 800493e:	e015      	b.n	800496c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8004948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800494c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004956:	e009      	b.n	800496c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2200      	movs	r2, #0
 8004962:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	667b      	str	r3, [r7, #100]	; 0x64
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d155      	bne.n	8004a26 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498e:	4413      	add	r3, r2
 8004990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	00da      	lsls	r2, r3, #3
 8004998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499a:	4413      	add	r3, r2
 800499c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d112      	bne.n	80049ce <HAL_PCD_EP_DB_Transmit+0x6a4>
 80049a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	e044      	b.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x72e>
 80049ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d0:	2b3e      	cmp	r3, #62	; 0x3e
 80049d2:	d811      	bhi.n	80049f8 <HAL_PCD_EP_DB_Transmit+0x6ce>
 80049d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	657b      	str	r3, [r7, #84]	; 0x54
 80049da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_PCD_EP_DB_Transmit+0x6c0>
 80049e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e6:	3301      	adds	r3, #1
 80049e8:	657b      	str	r3, [r7, #84]	; 0x54
 80049ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e02f      	b.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x72e>
 80049f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	657b      	str	r3, [r7, #84]	; 0x54
 80049fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x6e4>
 8004a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	029b      	lsls	r3, r3, #10
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a22:	801a      	strh	r2, [r3, #0]
 8004a24:	e018      	b.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d114      	bne.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a3c:	4413      	add	r3, r2
 8004a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	00da      	lsls	r2, r3, #3
 8004a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a56:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6959      	ldr	r1, [r3, #20]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	895a      	ldrh	r2, [r3, #10]
 8004a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f004 fa2c 	bl	8008ec4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a86:	823b      	strh	r3, [r7, #16]
 8004a88:	8a3b      	ldrh	r3, [r7, #16]
 8004a8a:	f083 0310 	eor.w	r3, r3, #16
 8004a8e:	823b      	strh	r3, [r7, #16]
 8004a90:	8a3b      	ldrh	r3, [r7, #16]
 8004a92:	f083 0320 	eor.w	r3, r3, #32
 8004a96:	823b      	strh	r3, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	8a3b      	ldrh	r3, [r7, #16]
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3788      	adds	r7, #136	; 0x88
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b087      	sub	sp, #28
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	817b      	strh	r3, [r7, #10]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ad8:	897b      	ldrh	r3, [r7, #10]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00b      	beq.n	8004afc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e009      	b.n	8004b10 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004afc:	897a      	ldrh	r2, [r7, #10]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	80da      	strh	r2, [r3, #6]
 8004b24:	e00b      	b.n	8004b3e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f043 0302 	orr.w	r3, r3, #2
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d141      	bne.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bae:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	d131      	bne.n	8004c20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bbc:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	4a46      	ldr	r2, [pc, #280]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bcc:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bd4:	4a41      	ldr	r2, [pc, #260]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bdc:	4b40      	ldr	r3, [pc, #256]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2232      	movs	r2, #50	; 0x32
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	4a3f      	ldr	r2, [pc, #252]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	0c9b      	lsrs	r3, r3, #18
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf2:	e002      	b.n	8004bfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfa:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c06:	d102      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f2      	bne.n	8004bf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c0e:	4b33      	ldr	r3, [pc, #204]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1a:	d158      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e057      	b.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c26:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c30:	e04d      	b.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c38:	d141      	bne.n	8004cbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c3a:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d131      	bne.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4e:	4a23      	ldr	r2, [pc, #140]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2232      	movs	r2, #50	; 0x32
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	0c9b      	lsrs	r3, r3, #18
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7e:	e002      	b.n	8004c86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c86:	4b15      	ldr	r3, [pc, #84]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d102      	bne.n	8004c9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f2      	bne.n	8004c80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c9a:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca6:	d112      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e011      	b.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cbc:	e007      	b.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cc6:	4a05      	ldr	r2, [pc, #20]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ccc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	431bde83 	.word	0x431bde83

08004ce8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf6:	6093      	str	r3, [r2, #8]
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40007000 	.word	0x40007000

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e308      	b.n	800532c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d075      	beq.n	8004e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d26:	4ba3      	ldr	r3, [pc, #652]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d30:	4ba0      	ldr	r3, [pc, #640]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d102      	bne.n	8004d46 <HAL_RCC_OscConfig+0x3e>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d002      	beq.n	8004d4c <HAL_RCC_OscConfig+0x44>
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d10b      	bne.n	8004d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	4b99      	ldr	r3, [pc, #612]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d05b      	beq.n	8004e10 <HAL_RCC_OscConfig+0x108>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d157      	bne.n	8004e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e2e3      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCC_OscConfig+0x74>
 8004d6e:	4b91      	ldr	r3, [pc, #580]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a90      	ldr	r2, [pc, #576]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e01d      	b.n	8004db8 <HAL_RCC_OscConfig+0xb0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b8b      	ldr	r3, [pc, #556]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a8a      	ldr	r2, [pc, #552]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b88      	ldr	r3, [pc, #544]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a87      	ldr	r2, [pc, #540]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCC_OscConfig+0xb0>
 8004da0:	4b84      	ldr	r3, [pc, #528]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a83      	ldr	r2, [pc, #524]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	4b81      	ldr	r3, [pc, #516]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a80      	ldr	r2, [pc, #512]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fc fbd2 	bl	8001568 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fc fbce 	bl	8001568 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	; 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e2a8      	b.n	800532c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dda:	4b76      	ldr	r3, [pc, #472]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xc0>
 8004de6:	e014      	b.n	8004e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fc fbbe 	bl	8001568 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fc fbba 	bl	8001568 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	; 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e294      	b.n	800532c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e02:	4b6c      	ldr	r3, [pc, #432]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0xe8>
 8004e0e:	e000      	b.n	8004e12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d075      	beq.n	8004f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1e:	4b65      	ldr	r3, [pc, #404]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e28:	4b62      	ldr	r3, [pc, #392]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d102      	bne.n	8004e3e <HAL_RCC_OscConfig+0x136>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d002      	beq.n	8004e44 <HAL_RCC_OscConfig+0x13c>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d11f      	bne.n	8004e84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e44:	4b5b      	ldr	r3, [pc, #364]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_OscConfig+0x154>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e267      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b55      	ldr	r3, [pc, #340]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	4952      	ldr	r1, [pc, #328]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e70:	4b51      	ldr	r3, [pc, #324]	; (8004fb8 <HAL_RCC_OscConfig+0x2b0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fc fb2b 	bl	80014d0 <HAL_InitTick>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d043      	beq.n	8004f08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e253      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d023      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8c:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a48      	ldr	r2, [pc, #288]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc fb66 	bl	8001568 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fc fb62 	bl	8001568 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e23c      	b.n	800532c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb2:	4b40      	ldr	r3, [pc, #256]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebe:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	4939      	ldr	r1, [pc, #228]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	604b      	str	r3, [r1, #4]
 8004ed2:	e01a      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed4:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a36      	ldr	r2, [pc, #216]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fb42 	bl	8001568 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee8:	f7fc fb3e 	bl	8001568 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e218      	b.n	800532c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x1e0>
 8004f06:	e000      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01c      	beq.n	8004f58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f24:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fc fb1b 	bl	8001568 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f36:	f7fc fb17 	bl	8001568 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1f1      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ef      	beq.n	8004f36 <HAL_RCC_OscConfig+0x22e>
 8004f56:	e01b      	b.n	8004f90 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fc fafe 	bl	8001568 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f70:	f7fc fafa 	bl	8001568 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1d4      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ef      	bne.n	8004f70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80ab 	beq.w	80050f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fa2:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_RCC_OscConfig+0x2b4>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e005      	b.n	8004fbe <HAL_RCC_OscConfig+0x2b6>
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	20000004 	.word	0x20000004
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	4baf      	ldr	r3, [pc, #700]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	4aae      	ldr	r2, [pc, #696]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004fce:	4bac      	ldr	r3, [pc, #688]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fde:	4ba9      	ldr	r3, [pc, #676]	; (8005284 <HAL_RCC_OscConfig+0x57c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d118      	bne.n	800501c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fea:	4ba6      	ldr	r3, [pc, #664]	; (8005284 <HAL_RCC_OscConfig+0x57c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4aa5      	ldr	r2, [pc, #660]	; (8005284 <HAL_RCC_OscConfig+0x57c>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff6:	f7fc fab7 	bl	8001568 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fc fab3 	bl	8001568 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e18d      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005010:	4b9c      	ldr	r3, [pc, #624]	; (8005284 <HAL_RCC_OscConfig+0x57c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d108      	bne.n	8005036 <HAL_RCC_OscConfig+0x32e>
 8005024:	4b96      	ldr	r3, [pc, #600]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	4a95      	ldr	r2, [pc, #596]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005034:	e024      	b.n	8005080 <HAL_RCC_OscConfig+0x378>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b05      	cmp	r3, #5
 800503c:	d110      	bne.n	8005060 <HAL_RCC_OscConfig+0x358>
 800503e:	4b90      	ldr	r3, [pc, #576]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4a8e      	ldr	r2, [pc, #568]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800504e:	4b8c      	ldr	r3, [pc, #560]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	4a8a      	ldr	r2, [pc, #552]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800505e:	e00f      	b.n	8005080 <HAL_RCC_OscConfig+0x378>
 8005060:	4b87      	ldr	r3, [pc, #540]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	4a86      	ldr	r2, [pc, #536]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005070:	4b83      	ldr	r3, [pc, #524]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	4a82      	ldr	r2, [pc, #520]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d016      	beq.n	80050b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc fa6e 	bl	8001568 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fc fa6a 	bl	8001568 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e142      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a6:	4b76      	ldr	r3, [pc, #472]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ed      	beq.n	8005090 <HAL_RCC_OscConfig+0x388>
 80050b4:	e015      	b.n	80050e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fc fa57 	bl	8001568 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc fa53 	bl	8001568 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e12b      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d4:	4b6a      	ldr	r3, [pc, #424]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ed      	bne.n	80050be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e8:	4b65      	ldr	r3, [pc, #404]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	4a64      	ldr	r2, [pc, #400]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d03c      	beq.n	800517a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01c      	beq.n	8005142 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005108:	4b5d      	ldr	r3, [pc, #372]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800510a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800510e:	4a5c      	ldr	r2, [pc, #368]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fc fa26 	bl	8001568 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005120:	f7fc fa22 	bl	8001568 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e0fc      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005132:	4b53      	ldr	r3, [pc, #332]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ef      	beq.n	8005120 <HAL_RCC_OscConfig+0x418>
 8005140:	e01b      	b.n	800517a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005142:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005148:	4a4d      	ldr	r2, [pc, #308]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fc fa09 	bl	8001568 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800515a:	f7fc fa05 	bl	8001568 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0df      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800516c:	4b44      	ldr	r3, [pc, #272]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800516e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ef      	bne.n	800515a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80d3 	beq.w	800532a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005184:	4b3e      	ldr	r3, [pc, #248]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b0c      	cmp	r3, #12
 800518e:	f000 808d 	beq.w	80052ac <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d15a      	bne.n	8005250 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b39      	ldr	r3, [pc, #228]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a38      	ldr	r2, [pc, #224]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 80051a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fc f9df 	bl	8001568 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fc f9db 	bl	8001568 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0b5      	b.n	800532c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c0:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051cc:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <HAL_RCC_OscConfig+0x580>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6a11      	ldr	r1, [r2, #32]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051dc:	3a01      	subs	r2, #1
 80051de:	0112      	lsls	r2, r2, #4
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051e6:	0212      	lsls	r2, r2, #8
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051ee:	0852      	lsrs	r2, r2, #1
 80051f0:	3a01      	subs	r2, #1
 80051f2:	0552      	lsls	r2, r2, #21
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051fa:	0852      	lsrs	r2, r2, #1
 80051fc:	3a01      	subs	r2, #1
 80051fe:	0652      	lsls	r2, r2, #25
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005206:	06d2      	lsls	r2, r2, #27
 8005208:	430a      	orrs	r2, r1
 800520a:	491d      	ldr	r1, [pc, #116]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800520c:	4313      	orrs	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800521a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800521c:	4b18      	ldr	r3, [pc, #96]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a17      	ldr	r2, [pc, #92]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc f99e 	bl	8001568 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fc f99a 	bl	8001568 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e074      	b.n	800532c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x528>
 800524e:	e06c      	b.n	800532a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a07      	ldr	r2, [pc, #28]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a04      	ldr	r2, [pc, #16]	; (8005280 <HAL_RCC_OscConfig+0x578>)
 800526e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005276:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fc f976 	bl	8001568 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800527e:	e00e      	b.n	800529e <HAL_RCC_OscConfig+0x596>
 8005280:	40021000 	.word	0x40021000
 8005284:	40007000 	.word	0x40007000
 8005288:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528c:	f7fc f96c 	bl	8001568 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e046      	b.n	800532c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529e:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_OscConfig+0x62c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x584>
 80052aa:	e03e      	b.n	800532a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e039      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052b8:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <HAL_RCC_OscConfig+0x62c>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 0203 	and.w	r2, r3, #3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d12c      	bne.n	8005326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	3b01      	subs	r3, #1
 80052d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d123      	bne.n	8005326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11b      	bne.n	8005326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d113      	bne.n	8005326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	3b01      	subs	r3, #1
 800530c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d109      	bne.n	8005326 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	3b01      	subs	r3, #1
 8005320:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d001      	beq.n	800532a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000

08005338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e11e      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005350:	4b91      	ldr	r3, [pc, #580]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d910      	bls.n	8005380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b8e      	ldr	r3, [pc, #568]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 020f 	bic.w	r2, r3, #15
 8005366:	498c      	ldr	r1, [pc, #560]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b8a      	ldr	r3, [pc, #552]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e106      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d073      	beq.n	8005474 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d129      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0f4      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053a4:	f000 f966 	bl	8005674 <RCC_GetSysClockFreqFromPLLSource>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4a7c      	ldr	r2, [pc, #496]	; (80055a0 <HAL_RCC_ClockConfig+0x268>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d93f      	bls.n	8005432 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053b2:	4b7a      	ldr	r3, [pc, #488]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d033      	beq.n	8005432 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d12f      	bne.n	8005432 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053d2:	4b72      	ldr	r3, [pc, #456]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053da:	4a70      	ldr	r2, [pc, #448]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80053dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e024      	b.n	8005432 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f0:	4b6a      	ldr	r3, [pc, #424]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0c6      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005400:	4b66      	ldr	r3, [pc, #408]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0be      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005410:	f000 f8ce 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8005414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4a61      	ldr	r2, [pc, #388]	; (80055a0 <HAL_RCC_ClockConfig+0x268>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d909      	bls.n	8005432 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800541e:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005426:	4a5d      	ldr	r2, [pc, #372]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4957      	ldr	r1, [pc, #348]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005444:	f7fc f890 	bl	8001568 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fc f88c 	bl	8001568 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e095      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b4e      	ldr	r3, [pc, #312]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 020c 	and.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d1eb      	bne.n	800544c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d023      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4a42      	ldr	r2, [pc, #264]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005496:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054a4:	4b3d      	ldr	r3, [pc, #244]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054ac:	4a3b      	ldr	r2, [pc, #236]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80054ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b4:	4b39      	ldr	r3, [pc, #228]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4936      	ldr	r1, [pc, #216]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]
 80054c6:	e008      	b.n	80054da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d105      	bne.n	80054da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ce:	4b33      	ldr	r3, [pc, #204]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4a32      	ldr	r2, [pc, #200]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 80054d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054da:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d21d      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e8:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 020f 	bic.w	r2, r3, #15
 80054f0:	4929      	ldr	r1, [pc, #164]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054f8:	f7fc f836 	bl	8001568 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fc f832 	bl	8001568 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e03b      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b20      	ldr	r3, [pc, #128]	; (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d1ed      	bne.n	8005500 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4917      	ldr	r1, [pc, #92]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 800553e:	4313      	orrs	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	490f      	ldr	r1, [pc, #60]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005562:	f000 f825 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8005566:	4602      	mov	r2, r0
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <HAL_RCC_ClockConfig+0x264>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	490c      	ldr	r1, [pc, #48]	; (80055a4 <HAL_RCC_ClockConfig+0x26c>)
 8005574:	5ccb      	ldrb	r3, [r1, r3]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	fa22 f303 	lsr.w	r3, r2, r3
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <HAL_RCC_ClockConfig+0x270>)
 8005580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <HAL_RCC_ClockConfig+0x274>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fb ffa2 	bl	80014d0 <HAL_InitTick>
 800558c:	4603      	mov	r3, r0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40022000 	.word	0x40022000
 800559c:	40021000 	.word	0x40021000
 80055a0:	04c4b400 	.word	0x04c4b400
 80055a4:	0800b334 	.word	0x0800b334
 80055a8:	20000000 	.word	0x20000000
 80055ac:	20000004 	.word	0x20000004

080055b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055b6:	4b2c      	ldr	r3, [pc, #176]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d102      	bne.n	80055c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e047      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055c8:	4b27      	ldr	r3, [pc, #156]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 030c 	and.w	r3, r3, #12
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d102      	bne.n	80055da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d4:	4b26      	ldr	r3, [pc, #152]	; (8005670 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	e03e      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055da:	4b23      	ldr	r3, [pc, #140]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d136      	bne.n	8005654 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055e6:	4b20      	ldr	r3, [pc, #128]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f0:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	3301      	adds	r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d10c      	bne.n	800561e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005604:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800560e:	68d2      	ldr	r2, [r2, #12]
 8005610:	0a12      	lsrs	r2, r2, #8
 8005612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	617b      	str	r3, [r7, #20]
      break;
 800561c:	e00c      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800561e:	4a13      	ldr	r2, [pc, #76]	; (800566c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	4a10      	ldr	r2, [pc, #64]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	0a12      	lsrs	r2, r2, #8
 800562c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005630:	fb02 f303 	mul.w	r3, r2, r3
 8005634:	617b      	str	r3, [r7, #20]
      break;
 8005636:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	0e5b      	lsrs	r3, r3, #25
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	3301      	adds	r3, #1
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e001      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005658:	693b      	ldr	r3, [r7, #16]
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40021000 	.word	0x40021000
 800566c:	00f42400 	.word	0x00f42400
 8005670:	007a1200 	.word	0x007a1200

08005674 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800567a:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d10c      	bne.n	80056b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005698:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a2:	68d2      	ldr	r2, [r2, #12]
 80056a4:	0a12      	lsrs	r2, r2, #8
 80056a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	617b      	str	r3, [r7, #20]
    break;
 80056b0:	e00c      	b.n	80056cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056b2:	4a12      	ldr	r2, [pc, #72]	; (80056fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056bc:	68d2      	ldr	r2, [r2, #12]
 80056be:	0a12      	lsrs	r2, r2, #8
 80056c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
    break;
 80056ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	0e5b      	lsrs	r3, r3, #25
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056e6:	687b      	ldr	r3, [r7, #4]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40021000 	.word	0x40021000
 80056f8:	007a1200 	.word	0x007a1200
 80056fc:	00f42400 	.word	0x00f42400

08005700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005708:	2300      	movs	r3, #0
 800570a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800570c:	2300      	movs	r3, #0
 800570e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8098 	beq.w	800584e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800571e:	2300      	movs	r3, #0
 8005720:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005722:	4b43      	ldr	r3, [pc, #268]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800572e:	4b40      	ldr	r3, [pc, #256]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	4a3f      	ldr	r2, [pc, #252]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005738:	6593      	str	r3, [r2, #88]	; 0x58
 800573a:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005746:	2301      	movs	r3, #1
 8005748:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800574a:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a39      	ldr	r2, [pc, #228]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005756:	f7fb ff07 	bl	8001568 <HAL_GetTick>
 800575a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800575c:	e009      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fb ff03 	bl	8001568 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d902      	bls.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	74fb      	strb	r3, [r7, #19]
        break;
 8005770:	e005      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ef      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d159      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005784:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01e      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	429a      	cmp	r2, r3
 800579e:	d019      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057a0:	4b23      	ldr	r3, [pc, #140]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ac:	4b20      	ldr	r3, [pc, #128]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057bc:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057cc:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fb fec3 	bl	8001568 <HAL_GetTick>
 80057e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e4:	e00b      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fb febf 	bl	8001568 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d902      	bls.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	74fb      	strb	r3, [r7, #19]
            break;
 80057fc:	e006      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ec      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	4903      	ldr	r1, [pc, #12]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	74bb      	strb	r3, [r7, #18]
 800582e:	e005      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005830:	40021000 	.word	0x40021000
 8005834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800583c:	7c7b      	ldrb	r3, [r7, #17]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005842:	4ba6      	ldr	r3, [pc, #664]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	4aa5      	ldr	r2, [pc, #660]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800584c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800585a:	4ba0      	ldr	r3, [pc, #640]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f023 0203 	bic.w	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	499c      	ldr	r1, [pc, #624]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800587c:	4b97      	ldr	r3, [pc, #604]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f023 020c 	bic.w	r2, r3, #12
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4994      	ldr	r1, [pc, #592]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800589e:	4b8f      	ldr	r3, [pc, #572]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	498b      	ldr	r1, [pc, #556]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058c0:	4b86      	ldr	r3, [pc, #536]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	4983      	ldr	r1, [pc, #524]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e2:	4b7e      	ldr	r3, [pc, #504]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	497a      	ldr	r1, [pc, #488]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005904:	4b75      	ldr	r3, [pc, #468]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	4972      	ldr	r1, [pc, #456]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005926:	4b6d      	ldr	r3, [pc, #436]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	4969      	ldr	r1, [pc, #420]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005948:	4b64      	ldr	r3, [pc, #400]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	4961      	ldr	r1, [pc, #388]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800596a:	4b5c      	ldr	r3, [pc, #368]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	4958      	ldr	r1, [pc, #352]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800598c:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	4950      	ldr	r1, [pc, #320]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059aa:	d105      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ac:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4a4a      	ldr	r2, [pc, #296]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d015      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059c4:	4b45      	ldr	r3, [pc, #276]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	4942      	ldr	r1, [pc, #264]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e2:	d105      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059fc:	4b37      	ldr	r3, [pc, #220]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	4934      	ldr	r1, [pc, #208]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a1c:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d015      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a34:	4b29      	ldr	r3, [pc, #164]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	4926      	ldr	r1, [pc, #152]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a52:	d105      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a54:	4b21      	ldr	r3, [pc, #132]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a20      	ldr	r2, [pc, #128]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d015      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	4918      	ldr	r1, [pc, #96]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a8c:	4b13      	ldr	r3, [pc, #76]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a12      	ldr	r2, [pc, #72]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	490a      	ldr	r1, [pc, #40]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ac2:	d105      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ace:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ad0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000

08005ae0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d05c      	beq.n	8005bac <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb fa1c 	bl	8000f44 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b14:	4b28      	ldr	r3, [pc, #160]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b16:	22ca      	movs	r2, #202	; 0xca
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1a:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b1c:	2253      	movs	r2, #83	; 0x53
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f871 	bl	8005c08 <RTC_EnterInitMode>
 8005b26:	4603      	mov	r3, r0
 8005b28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d133      	bne.n	8005b98 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005b30:	4b21      	ldr	r3, [pc, #132]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b36:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	4319      	orrs	r1, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	430b      	orrs	r3, r1
 8005b54:	4918      	ldr	r1, [pc, #96]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	4914      	ldr	r1, [pc, #80]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f880 	bl	8005c70 <RTC_ExitInitMode>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10e      	bne.n	8005b98 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8005b7a:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a19      	ldr	r1, [r3, #32]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4319      	orrs	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	430b      	orrs	r3, r1
 8005b92:	4909      	ldr	r1, [pc, #36]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b98:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <HAL_RTC_Init+0xd8>)
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d103      	bne.n	8005bac <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40002800 	.word	0x40002800

08005bbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <HAL_RTC_WaitForSynchro+0x48>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a0e      	ldr	r2, [pc, #56]	; (8005c04 <HAL_RTC_WaitForSynchro+0x48>)
 8005bca:	f023 0320 	bic.w	r3, r3, #32
 8005bce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005bd0:	f7fb fcca 	bl	8001568 <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005bd6:	e009      	b.n	8005bec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bd8:	f7fb fcc6 	bl	8001568 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005be6:	d901      	bls.n	8005bec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e006      	b.n	8005bfa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_RTC_WaitForSynchro+0x48>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0ef      	beq.n	8005bd8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40002800 	.word	0x40002800

08005c08 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <RTC_EnterInitMode+0x64>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d120      	bne.n	8005c62 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <RTC_EnterInitMode+0x64>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <RTC_EnterInitMode+0x64>)
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005c2c:	f7fb fc9c 	bl	8001568 <HAL_GetTick>
 8005c30:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c32:	e00d      	b.n	8005c50 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c34:	f7fb fc98 	bl	8001568 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c42:	d905      	bls.n	8005c50 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <RTC_EnterInitMode+0x64>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <RTC_EnterInitMode+0x5a>
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d1e8      	bne.n	8005c34 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40002800 	.word	0x40002800

08005c70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <RTC_ExitInitMode+0x78>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <RTC_ExitInitMode+0x78>)
 8005c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c86:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <RTC_ExitInitMode+0x78>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10c      	bne.n	8005cae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff91 	bl	8005bbc <HAL_RTC_WaitForSynchro>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01e      	beq.n	8005cde <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	e017      	b.n	8005cde <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cae:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <RTC_ExitInitMode+0x78>)
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <RTC_ExitInitMode+0x78>)
 8005cb4:	f023 0320 	bic.w	r3, r3, #32
 8005cb8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff ff7e 	bl	8005bbc <HAL_RTC_WaitForSynchro>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2203      	movs	r2, #3
 8005cca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <RTC_ExitInitMode+0x78>)
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <RTC_ExitInitMode+0x78>)
 8005cd8:	f043 0320 	orr.w	r3, r3, #32
 8005cdc:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40002800 	.word	0x40002800

08005cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e049      	b.n	8005d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb fa3a 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f000 fa42 	bl	80061b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e049      	b.n	8005e40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fb f8db 	bl	8000f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f000 f9eb 	bl	80061b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e097      	b.n	8005f8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fb f8c9 	bl	8001008 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005e8c:	f023 0307 	bic.w	r3, r3, #7
 8005e90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 f989 	bl	80061b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	4313      	orrs	r3, r2
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ee8:	f023 030c 	bic.w	r3, r3, #12
 8005eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4313      	orrs	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	011a      	lsls	r2, r3, #4
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e0fd      	b.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x216>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b14      	cmp	r3, #20
 8005fba:	f200 80f0 	bhi.w	800619e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	0800619f 	.word	0x0800619f
 8005fcc:	0800619f 	.word	0x0800619f
 8005fd0:	0800619f 	.word	0x0800619f
 8005fd4:	08006059 	.word	0x08006059
 8005fd8:	0800619f 	.word	0x0800619f
 8005fdc:	0800619f 	.word	0x0800619f
 8005fe0:	0800619f 	.word	0x0800619f
 8005fe4:	0800609b 	.word	0x0800609b
 8005fe8:	0800619f 	.word	0x0800619f
 8005fec:	0800619f 	.word	0x0800619f
 8005ff0:	0800619f 	.word	0x0800619f
 8005ff4:	080060db 	.word	0x080060db
 8005ff8:	0800619f 	.word	0x0800619f
 8005ffc:	0800619f 	.word	0x0800619f
 8006000:	0800619f 	.word	0x0800619f
 8006004:	0800611d 	.word	0x0800611d
 8006008:	0800619f 	.word	0x0800619f
 800600c:	0800619f 	.word	0x0800619f
 8006010:	0800619f 	.word	0x0800619f
 8006014:	0800615d 	.word	0x0800615d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f958 	bl	80062d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0208 	orr.w	r2, r2, #8
 8006032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0204 	bic.w	r2, r2, #4
 8006042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6999      	ldr	r1, [r3, #24]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	619a      	str	r2, [r3, #24]
      break;
 8006056:	e0a3      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f9c8 	bl	80063f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6999      	ldr	r1, [r3, #24]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	021a      	lsls	r2, r3, #8
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	619a      	str	r2, [r3, #24]
      break;
 8006098:	e082      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fa31 	bl	8006508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0208 	orr.w	r2, r2, #8
 80060b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0204 	bic.w	r2, r2, #4
 80060c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69d9      	ldr	r1, [r3, #28]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	61da      	str	r2, [r3, #28]
      break;
 80060d8:	e062      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fa99 	bl	8006618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69da      	ldr	r2, [r3, #28]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69d9      	ldr	r1, [r3, #28]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	021a      	lsls	r2, r3, #8
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	61da      	str	r2, [r3, #28]
      break;
 800611a:	e041      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fb02 	bl	800672c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0208 	orr.w	r2, r2, #8
 8006136:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0204 	bic.w	r2, r2, #4
 8006146:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800615a:	e021      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fb46 	bl	80067f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006186:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	021a      	lsls	r2, r3, #8
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800619c:	e000      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800619e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop

080061b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a3c      	ldr	r2, [pc, #240]	; (80062b8 <TIM_Base_SetConfig+0x104>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00f      	beq.n	80061ec <TIM_Base_SetConfig+0x38>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d00b      	beq.n	80061ec <TIM_Base_SetConfig+0x38>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a39      	ldr	r2, [pc, #228]	; (80062bc <TIM_Base_SetConfig+0x108>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <TIM_Base_SetConfig+0x38>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a38      	ldr	r2, [pc, #224]	; (80062c0 <TIM_Base_SetConfig+0x10c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_Base_SetConfig+0x38>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a37      	ldr	r2, [pc, #220]	; (80062c4 <TIM_Base_SetConfig+0x110>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a2d      	ldr	r2, [pc, #180]	; (80062b8 <TIM_Base_SetConfig+0x104>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01b      	beq.n	800623e <TIM_Base_SetConfig+0x8a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620c:	d017      	beq.n	800623e <TIM_Base_SetConfig+0x8a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2a      	ldr	r2, [pc, #168]	; (80062bc <TIM_Base_SetConfig+0x108>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <TIM_Base_SetConfig+0x8a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a29      	ldr	r2, [pc, #164]	; (80062c0 <TIM_Base_SetConfig+0x10c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00f      	beq.n	800623e <TIM_Base_SetConfig+0x8a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a28      	ldr	r2, [pc, #160]	; (80062c4 <TIM_Base_SetConfig+0x110>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00b      	beq.n	800623e <TIM_Base_SetConfig+0x8a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <TIM_Base_SetConfig+0x8a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a26      	ldr	r2, [pc, #152]	; (80062cc <TIM_Base_SetConfig+0x118>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_Base_SetConfig+0x8a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a25      	ldr	r2, [pc, #148]	; (80062d0 <TIM_Base_SetConfig+0x11c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d108      	bne.n	8006250 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a10      	ldr	r2, [pc, #64]	; (80062b8 <TIM_Base_SetConfig+0x104>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0xe8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a11      	ldr	r2, [pc, #68]	; (80062c4 <TIM_Base_SetConfig+0x110>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0xe8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0xe8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a0f      	ldr	r2, [pc, #60]	; (80062cc <TIM_Base_SetConfig+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0xe8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a0e      	ldr	r2, [pc, #56]	; (80062d0 <TIM_Base_SetConfig+0x11c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d103      	bne.n	80062a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	615a      	str	r2, [r3, #20]
}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800

080062d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0302 	bic.w	r3, r3, #2
 8006320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2c      	ldr	r2, [pc, #176]	; (80063e0 <TIM_OC1_SetConfig+0x10c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_OC1_SetConfig+0x80>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2b      	ldr	r2, [pc, #172]	; (80063e4 <TIM_OC1_SetConfig+0x110>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_OC1_SetConfig+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <TIM_OC1_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_OC1_SetConfig+0x80>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a29      	ldr	r2, [pc, #164]	; (80063ec <TIM_OC1_SetConfig+0x118>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC1_SetConfig+0x80>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <TIM_OC1_SetConfig+0x11c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10c      	bne.n	800636e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0308 	bic.w	r3, r3, #8
 800635a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0304 	bic.w	r3, r3, #4
 800636c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <TIM_OC1_SetConfig+0x10c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_OC1_SetConfig+0xc2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <TIM_OC1_SetConfig+0x110>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_OC1_SetConfig+0xc2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <TIM_OC1_SetConfig+0x114>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_OC1_SetConfig+0xc2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a18      	ldr	r2, [pc, #96]	; (80063ec <TIM_OC1_SetConfig+0x118>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC1_SetConfig+0xc2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a17      	ldr	r2, [pc, #92]	; (80063f0 <TIM_OC1_SetConfig+0x11c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d111      	bne.n	80063ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800639c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40013400 	.word	0x40013400
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40014400 	.word	0x40014400
 80063f0:	40014800 	.word	0x40014800

080063f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f023 0210 	bic.w	r2, r3, #16
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0320 	bic.w	r3, r3, #32
 8006442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a28      	ldr	r2, [pc, #160]	; (80064f4 <TIM_OC2_SetConfig+0x100>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_OC2_SetConfig+0x6c>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <TIM_OC2_SetConfig+0x104>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10d      	bne.n	800647c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <TIM_OC2_SetConfig+0x100>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00f      	beq.n	80064a4 <TIM_OC2_SetConfig+0xb0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <TIM_OC2_SetConfig+0x104>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00b      	beq.n	80064a4 <TIM_OC2_SetConfig+0xb0>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <TIM_OC2_SetConfig+0x108>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_OC2_SetConfig+0xb0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <TIM_OC2_SetConfig+0x10c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC2_SetConfig+0xb0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a19      	ldr	r2, [pc, #100]	; (8006504 <TIM_OC2_SetConfig+0x110>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d113      	bne.n	80064cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800

08006508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <TIM_OC3_SetConfig+0xfc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC3_SetConfig+0x6a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a26      	ldr	r2, [pc, #152]	; (8006608 <TIM_OC3_SetConfig+0x100>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d10d      	bne.n	800658e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800658c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <TIM_OC3_SetConfig+0xfc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00f      	beq.n	80065b6 <TIM_OC3_SetConfig+0xae>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <TIM_OC3_SetConfig+0x100>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00b      	beq.n	80065b6 <TIM_OC3_SetConfig+0xae>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1a      	ldr	r2, [pc, #104]	; (800660c <TIM_OC3_SetConfig+0x104>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <TIM_OC3_SetConfig+0xae>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <TIM_OC3_SetConfig+0x108>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_OC3_SetConfig+0xae>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a18      	ldr	r2, [pc, #96]	; (8006614 <TIM_OC3_SetConfig+0x10c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d113      	bne.n	80065de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	621a      	str	r2, [r3, #32]
}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40013400 	.word	0x40013400
 800660c:	40014000 	.word	0x40014000
 8006610:	40014400 	.word	0x40014400
 8006614:	40014800 	.word	0x40014800

08006618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	031b      	lsls	r3, r3, #12
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a28      	ldr	r2, [pc, #160]	; (8006718 <TIM_OC4_SetConfig+0x100>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC4_SetConfig+0x6c>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a27      	ldr	r2, [pc, #156]	; (800671c <TIM_OC4_SetConfig+0x104>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d10d      	bne.n	80066a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800668a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	031b      	lsls	r3, r3, #12
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1d      	ldr	r2, [pc, #116]	; (8006718 <TIM_OC4_SetConfig+0x100>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00f      	beq.n	80066c8 <TIM_OC4_SetConfig+0xb0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1c      	ldr	r2, [pc, #112]	; (800671c <TIM_OC4_SetConfig+0x104>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00b      	beq.n	80066c8 <TIM_OC4_SetConfig+0xb0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <TIM_OC4_SetConfig+0x108>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d007      	beq.n	80066c8 <TIM_OC4_SetConfig+0xb0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <TIM_OC4_SetConfig+0x10c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC4_SetConfig+0xb0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a19      	ldr	r2, [pc, #100]	; (8006728 <TIM_OC4_SetConfig+0x110>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d113      	bne.n	80066f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	019b      	lsls	r3, r3, #6
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40013400 	.word	0x40013400
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400
 8006728:	40014800 	.word	0x40014800

0800672c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <TIM_OC5_SetConfig+0xb4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_OC5_SetConfig+0x7a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a16      	ldr	r2, [pc, #88]	; (80067e4 <TIM_OC5_SetConfig+0xb8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_OC5_SetConfig+0x7a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <TIM_OC5_SetConfig+0xbc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_OC5_SetConfig+0x7a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a14      	ldr	r2, [pc, #80]	; (80067ec <TIM_OC5_SetConfig+0xc0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC5_SetConfig+0x7a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a13      	ldr	r2, [pc, #76]	; (80067f0 <TIM_OC5_SetConfig+0xc4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d109      	bne.n	80067ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	621a      	str	r2, [r3, #32]
}
 80067d4:	bf00      	nop
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	40013400 	.word	0x40013400
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40014400 	.word	0x40014400
 80067f0:	40014800 	.word	0x40014800

080067f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800683a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	051b      	lsls	r3, r3, #20
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a18      	ldr	r2, [pc, #96]	; (80068ac <TIM_OC6_SetConfig+0xb8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00f      	beq.n	8006870 <TIM_OC6_SetConfig+0x7c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a17      	ldr	r2, [pc, #92]	; (80068b0 <TIM_OC6_SetConfig+0xbc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00b      	beq.n	8006870 <TIM_OC6_SetConfig+0x7c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a16      	ldr	r2, [pc, #88]	; (80068b4 <TIM_OC6_SetConfig+0xc0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d007      	beq.n	8006870 <TIM_OC6_SetConfig+0x7c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <TIM_OC6_SetConfig+0xc4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC6_SetConfig+0x7c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a14      	ldr	r2, [pc, #80]	; (80068bc <TIM_OC6_SetConfig+0xc8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d109      	bne.n	8006884 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	029b      	lsls	r3, r3, #10
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40013400 	.word	0x40013400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400
 80068bc:	40014800 	.word	0x40014800

080068c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e065      	b.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a2b      	ldr	r2, [pc, #172]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d108      	bne.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006912:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d018      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694e:	d013      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00e      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a17      	ldr	r2, [pc, #92]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a13      	ldr	r2, [pc, #76]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d10c      	bne.n	8006992 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800697e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	4313      	orrs	r3, r2
 8006988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40013400 	.word	0x40013400
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40014000 	.word	0x40014000

080069c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069dc:	2302      	movs	r3, #2
 80069de:	e087      	b.n	8006af0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a27      	ldr	r2, [pc, #156]	; (8006afc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a25      	ldr	r2, [pc, #148]	; (8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d106      	bne.n	8006a7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d126      	bne.n	8006ade <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	051b      	lsls	r3, r3, #20
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0e      	ldr	r2, [pc, #56]	; (8006afc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d106      	bne.n	8006ade <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40013400 	.word	0x40013400

08006b04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b14:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b3a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	4013      	ands	r3, r2
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b68:	b084      	sub	sp, #16
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	f107 0014 	add.w	r0, r7, #20
 8006b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	b004      	add	sp, #16
 8006ba8:	4770      	bx	lr
	...

08006bac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b09b      	sub	sp, #108	; 0x6c
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	78db      	ldrb	r3, [r3, #3]
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d81f      	bhi.n	8006c1e <USB_ActivateEndpoint+0x72>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <USB_ActivateEndpoint+0x38>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c11 	.word	0x08006c11
 8006bec:	08006c27 	.word	0x08006c27
 8006bf0:	08006c03 	.word	0x08006c03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006bf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006c00:	e012      	b.n	8006c28 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c06:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006c0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006c0e:	e00b      	b.n	8006c28 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006c1c:	e004      	b.n	8006c28 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006c24:	e000      	b.n	8006c28 <USB_ActivateEndpoint+0x7c>
      break;
 8006c26:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	b21b      	sxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	b21a      	sxth	r2, r3
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b21b      	sxth	r3, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	b21b      	sxth	r3, r3
 8006c6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	441a      	add	r2, r3
 8006c7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	7b1b      	ldrb	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 8149 	bne.w	8006f30 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8084 	beq.w	8006db0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	4413      	add	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	00da      	lsls	r2, r3, #3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	88db      	ldrh	r3, [r3, #6]
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	81fb      	strh	r3, [r7, #14]
 8006cea:	89fb      	ldrh	r3, [r7, #14]
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01b      	beq.n	8006d2c <USB_ActivateEndpoint+0x180>
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	81bb      	strh	r3, [r7, #12]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	89bb      	ldrh	r3, [r7, #12]
 8006d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	78db      	ldrb	r3, [r3, #3]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d020      	beq.n	8006d76 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4a:	813b      	strh	r3, [r7, #8]
 8006d4c:	893b      	ldrh	r3, [r7, #8]
 8006d4e:	f083 0320 	eor.w	r3, r3, #32
 8006d52:	813b      	strh	r3, [r7, #8]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	441a      	add	r2, r3
 8006d5e:	893b      	ldrh	r3, [r7, #8]
 8006d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8013      	strh	r3, [r2, #0]
 8006d74:	e27f      	b.n	8007276 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8c:	817b      	strh	r3, [r7, #10]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	441a      	add	r2, r3
 8006d98:	897b      	ldrh	r3, [r7, #10]
 8006d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	8013      	strh	r3, [r2, #0]
 8006dae:	e262      	b.n	8007276 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	4413      	add	r3, r2
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	00da      	lsls	r2, r3, #3
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	4413      	add	r3, r2
 8006dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	88db      	ldrh	r3, [r3, #6]
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	4413      	add	r3, r2
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	00da      	lsls	r2, r3, #3
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e06:	623b      	str	r3, [r7, #32]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d112      	bne.n	8006e36 <USB_ActivateEndpoint+0x28a>
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e02f      	b.n	8006e96 <USB_ActivateEndpoint+0x2ea>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e3c:	d813      	bhi.n	8006e66 <USB_ActivateEndpoint+0x2ba>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	663b      	str	r3, [r7, #96]	; 0x60
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <USB_ActivateEndpoint+0x2ac>
 8006e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e54:	3301      	adds	r3, #1
 8006e56:	663b      	str	r3, [r7, #96]	; 0x60
 8006e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	029b      	lsls	r3, r3, #10
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	e017      	b.n	8006e96 <USB_ActivateEndpoint+0x2ea>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <USB_ActivateEndpoint+0x2d4>
 8006e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	029b      	lsls	r3, r3, #10
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	83fb      	strh	r3, [r7, #30]
 8006ea4:	8bfb      	ldrh	r3, [r7, #30]
 8006ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01b      	beq.n	8006ee6 <USB_ActivateEndpoint+0x33a>
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec4:	83bb      	strh	r3, [r7, #28]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	8bbb      	ldrh	r3, [r7, #28]
 8006ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efc:	837b      	strh	r3, [r7, #26]
 8006efe:	8b7b      	ldrh	r3, [r7, #26]
 8006f00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f04:	837b      	strh	r3, [r7, #26]
 8006f06:	8b7b      	ldrh	r3, [r7, #26]
 8006f08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f0c:	837b      	strh	r3, [r7, #26]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	8b7b      	ldrh	r3, [r7, #26]
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
 8006f2e:	e1a2      	b.n	8007276 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f7c:	4413      	add	r3, r2
 8006f7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	00da      	lsls	r2, r3, #3
 8006f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	891b      	ldrh	r3, [r3, #8]
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb0:	4413      	add	r3, r2
 8006fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	00da      	lsls	r2, r3, #3
 8006fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	895b      	ldrh	r3, [r3, #10]
 8006fc8:	085b      	lsrs	r3, r3, #1
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 8091 	bne.w	8007100 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006fec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01b      	beq.n	800702e <USB_ActivateEndpoint+0x482>
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800701a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	873b      	strh	r3, [r7, #56]	; 0x38
 800703c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01b      	beq.n	800707e <USB_ActivateEndpoint+0x4d2>
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007096:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007098:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800709c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800709e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80070a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]
 80070fe:	e0ba      	b.n	8007276 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01d      	beq.n	8007158 <USB_ActivateEndpoint+0x5ac>
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	441a      	add	r2, r3
 8007140:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007154:	b29b      	uxth	r3, r3
 8007156:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007168:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01d      	beq.n	80071b0 <USB_ActivateEndpoint+0x604>
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	78db      	ldrb	r3, [r3, #3]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d024      	beq.n	8007202 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80071d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071d6:	f083 0320 	eor.w	r3, r3, #32
 80071da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	8013      	strh	r3, [r2, #0]
 8007200:	e01d      	b.n	800723e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007218:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800722a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800722e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723a:	b29b      	uxth	r3, r3
 800723c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007254:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007276:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800727a:	4618      	mov	r0, r3
 800727c:	376c      	adds	r7, #108	; 0x6c
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop

08007288 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007288:	b480      	push	{r7}
 800728a:	b08d      	sub	sp, #52	; 0x34
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	7b1b      	ldrb	r3, [r3, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 808e 	bne.w	80073b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d044      	beq.n	800732e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	81bb      	strh	r3, [r7, #12]
 80072b2:	89bb      	ldrh	r3, [r7, #12]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01b      	beq.n	80072f4 <USB_DeactivateEndpoint+0x6c>
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d2:	817b      	strh	r3, [r7, #10]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	441a      	add	r2, r3
 80072de:	897b      	ldrh	r3, [r7, #10]
 80072e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	b29b      	uxth	r3, r3
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730a:	813b      	strh	r3, [r7, #8]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	441a      	add	r2, r3
 8007316:	893b      	ldrh	r3, [r7, #8]
 8007318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007328:	b29b      	uxth	r3, r3
 800732a:	8013      	strh	r3, [r2, #0]
 800732c:	e192      	b.n	8007654 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	827b      	strh	r3, [r7, #18]
 800733c:	8a7b      	ldrh	r3, [r7, #18]
 800733e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01b      	beq.n	800737e <USB_DeactivateEndpoint+0xf6>
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735c:	823b      	strh	r3, [r7, #16]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	441a      	add	r2, r3
 8007368:	8a3b      	ldrh	r3, [r7, #16]
 800736a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737a:	b29b      	uxth	r3, r3
 800737c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	81fb      	strh	r3, [r7, #14]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	441a      	add	r2, r3
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]
 80073b6:	e14d      	b.n	8007654 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 80a5 	bne.w	800750c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	843b      	strh	r3, [r7, #32]
 80073d0:	8c3b      	ldrh	r3, [r7, #32]
 80073d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01b      	beq.n	8007412 <USB_DeactivateEndpoint+0x18a>
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	83fb      	strh	r3, [r7, #30]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	8bfb      	ldrh	r3, [r7, #30]
 80073fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800740a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740e:	b29b      	uxth	r3, r3
 8007410:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	83bb      	strh	r3, [r7, #28]
 8007420:	8bbb      	ldrh	r3, [r7, #28]
 8007422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01b      	beq.n	8007462 <USB_DeactivateEndpoint+0x1da>
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	837b      	strh	r3, [r7, #26]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8b7b      	ldrh	r3, [r7, #26]
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007478:	833b      	strh	r3, [r7, #24]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	441a      	add	r2, r3
 8007484:	8b3b      	ldrh	r3, [r7, #24]
 8007486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800748e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007492:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007496:	b29b      	uxth	r3, r3
 8007498:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b0:	82fb      	strh	r3, [r7, #22]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	441a      	add	r2, r3
 80074bc:	8afb      	ldrh	r3, [r7, #22]
 80074be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e8:	82bb      	strh	r3, [r7, #20]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	441a      	add	r2, r3
 80074f4:	8abb      	ldrh	r3, [r7, #20]
 80074f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007506:	b29b      	uxth	r3, r3
 8007508:	8013      	strh	r3, [r2, #0]
 800750a:	e0a3      	b.n	8007654 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800751a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800751c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01b      	beq.n	800755c <USB_DeactivateEndpoint+0x2d4>
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	b29b      	uxth	r3, r3
 8007532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	441a      	add	r2, r3
 8007546:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800754c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007558:	b29b      	uxth	r3, r3
 800755a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	857b      	strh	r3, [r7, #42]	; 0x2a
 800756a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800756c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01b      	beq.n	80075ac <USB_DeactivateEndpoint+0x324>
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	853b      	strh	r3, [r7, #40]	; 0x28
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800759c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	441a      	add	r2, r3
 8007606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007618:	b29b      	uxth	r3, r3
 800761a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	847b      	strh	r3, [r7, #34]	; 0x22
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	441a      	add	r2, r3
 800763e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007650:	b29b      	uxth	r3, r3
 8007652:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3734      	adds	r7, #52	; 0x34
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b0cc      	sub	sp, #304	; 0x130
 8007666:	af00      	add	r7, sp, #0
 8007668:	1d3b      	adds	r3, r7, #4
 800766a:	6018      	str	r0, [r3, #0]
 800766c:	463b      	mov	r3, r7
 800766e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007670:	463b      	mov	r3, r7
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b01      	cmp	r3, #1
 8007678:	f040 872e 	bne.w	80084d8 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800767c:	463b      	mov	r3, r7
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	463b      	mov	r3, r7
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	429a      	cmp	r2, r3
 800768a:	d905      	bls.n	8007698 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800768c:	463b      	mov	r3, r7
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007696:	e004      	b.n	80076a2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007698:	463b      	mov	r3, r7
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80076a2:	463b      	mov	r3, r7
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	7b1b      	ldrb	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d134      	bne.n	8007716 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80076ac:	463b      	mov	r3, r7
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6959      	ldr	r1, [r3, #20]
 80076b2:	463b      	mov	r3, r7
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	88da      	ldrh	r2, [r3, #6]
 80076b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076bc:	b29b      	uxth	r3, r3
 80076be:	1d38      	adds	r0, r7, #4
 80076c0:	6800      	ldr	r0, [r0, #0]
 80076c2:	f001 fbff 	bl	8008ec4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076c6:	f107 0310 	add.w	r3, r7, #16
 80076ca:	1d3a      	adds	r2, r7, #4
 80076cc:	6812      	ldr	r2, [r2, #0]
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	1d3b      	adds	r3, r7, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d8:	b29b      	uxth	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	f107 0310 	add.w	r3, r7, #16
 80076e0:	f107 0210 	add.w	r2, r7, #16
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	440a      	add	r2, r1
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	463b      	mov	r3, r7
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	00da      	lsls	r2, r3, #3
 80076f2:	f107 0310 	add.w	r3, r7, #16
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80076fe:	f107 030c 	add.w	r3, r7, #12
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	b29a      	uxth	r2, r3
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	f000 beac 	b.w	800846e <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007716:	463b      	mov	r3, r7
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	78db      	ldrb	r3, [r3, #3]
 800771c:	2b02      	cmp	r3, #2
 800771e:	f040 838c 	bne.w	8007e3a <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007722:	463b      	mov	r3, r7
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	463b      	mov	r3, r7
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	f240 8330 	bls.w	8007d94 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007734:	1d3b      	adds	r3, r7, #4
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	463b      	mov	r3, r7
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007752:	1d3b      	adds	r3, r7, #4
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	463b      	mov	r3, r7
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007778:	463b      	mov	r3, r7
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6a1a      	ldr	r2, [r3, #32]
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	463b      	mov	r3, r7
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	463b      	mov	r3, r7
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 819e 	beq.w	8007ae2 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077aa:	1d3a      	adds	r2, r7, #4
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d17a      	bne.n	80078b0 <USB_EPStartXfer+0x24e>
 80077ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077be:	1d3a      	adds	r2, r7, #4
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	1d3b      	adds	r3, r7, #4
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4619      	mov	r1, r3
 80077d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	440a      	add	r2, r1
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	463b      	mov	r3, r7
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	00da      	lsls	r2, r3, #3
 80077e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4413      	add	r3, r2
 80077ee:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80077f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11a      	bne.n	8007836 <USB_EPStartXfer+0x1d4>
 8007800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780e:	b29a      	uxth	r2, r3
 8007810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	801a      	strh	r2, [r3, #0]
 8007818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782a:	b29a      	uxth	r2, r3
 800782c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	e062      	b.n	80078fc <USB_EPStartXfer+0x29a>
 8007836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783a:	2b3e      	cmp	r3, #62	; 0x3e
 800783c:	d819      	bhi.n	8007872 <USB_EPStartXfer+0x210>
 800783e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <USB_EPStartXfer+0x1fc>
 8007854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007858:	3301      	adds	r3, #1
 800785a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800785e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007862:	b29b      	uxth	r3, r3
 8007864:	029b      	lsls	r3, r3, #10
 8007866:	b29a      	uxth	r2, r3
 8007868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e044      	b.n	80078fc <USB_EPStartXfer+0x29a>
 8007872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <USB_EPStartXfer+0x230>
 8007888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800788c:	3b01      	subs	r3, #1
 800788e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007896:	b29b      	uxth	r3, r3
 8007898:	029b      	lsls	r3, r3, #10
 800789a:	b29b      	uxth	r3, r3
 800789c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e025      	b.n	80078fc <USB_EPStartXfer+0x29a>
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d120      	bne.n	80078fc <USB_EPStartXfer+0x29a>
 80078ba:	1d3b      	adds	r3, r7, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	440a      	add	r2, r1
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	463b      	mov	r3, r7
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	00da      	lsls	r2, r3, #3
 80078dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4413      	add	r3, r2
 80078e4:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80078e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078fc:	463b      	mov	r3, r7
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	895b      	ldrh	r3, [r3, #10]
 8007902:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007906:	463b      	mov	r3, r7
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6959      	ldr	r1, [r3, #20]
 800790c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007910:	b29b      	uxth	r3, r3
 8007912:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007916:	1d38      	adds	r0, r7, #4
 8007918:	6800      	ldr	r0, [r0, #0]
 800791a:	f001 fad3 	bl	8008ec4 <USB_WritePMA>
            ep->xfer_buff += len;
 800791e:	463b      	mov	r3, r7
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007928:	441a      	add	r2, r3
 800792a:	463b      	mov	r3, r7
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007930:	463b      	mov	r3, r7
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	463b      	mov	r3, r7
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d909      	bls.n	8007954 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6a1a      	ldr	r2, [r3, #32]
 8007946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	463b      	mov	r3, r7
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	621a      	str	r2, [r3, #32]
 8007952:	e008      	b.n	8007966 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8007954:	463b      	mov	r3, r7
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800795e:	463b      	mov	r3, r7
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007966:	463b      	mov	r3, r7
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d17a      	bne.n	8007a66 <USB_EPStartXfer+0x404>
 8007970:	f107 0318 	add.w	r3, r7, #24
 8007974:	1d3a      	adds	r2, r7, #4
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	1d3b      	adds	r3, r7, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007982:	b29b      	uxth	r3, r3
 8007984:	4619      	mov	r1, r3
 8007986:	f107 0318 	add.w	r3, r7, #24
 800798a:	f107 0218 	add.w	r2, r7, #24
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	440a      	add	r2, r1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	463b      	mov	r3, r7
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	00da      	lsls	r2, r3, #3
 800799c:	f107 0318 	add.w	r3, r7, #24
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80079a8:	f107 0314 	add.w	r3, r7, #20
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d11a      	bne.n	80079ec <USB_EPStartXfer+0x38a>
 80079b6:	f107 0314 	add.w	r3, r7, #20
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f107 0314 	add.w	r3, r7, #20
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	f107 0314 	add.w	r3, r7, #20
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f107 0314 	add.w	r3, r7, #20
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	801a      	strh	r2, [r3, #0]
 80079ea:	e067      	b.n	8007abc <USB_EPStartXfer+0x45a>
 80079ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f0:	2b3e      	cmp	r3, #62	; 0x3e
 80079f2:	d819      	bhi.n	8007a28 <USB_EPStartXfer+0x3c6>
 80079f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80079fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <USB_EPStartXfer+0x3b2>
 8007a0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a0e:	3301      	adds	r3, #1
 8007a10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007a14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	029b      	lsls	r3, r3, #10
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	f107 0314 	add.w	r3, r7, #20
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e049      	b.n	8007abc <USB_EPStartXfer+0x45a>
 8007a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <USB_EPStartXfer+0x3e6>
 8007a3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007a48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	029b      	lsls	r3, r3, #10
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	f107 0314 	add.w	r3, r7, #20
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	e02a      	b.n	8007abc <USB_EPStartXfer+0x45a>
 8007a66:	463b      	mov	r3, r7
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d125      	bne.n	8007abc <USB_EPStartXfer+0x45a>
 8007a70:	f107 0320 	add.w	r3, r7, #32
 8007a74:	1d3a      	adds	r2, r7, #4
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	1d3b      	adds	r3, r7, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	f107 0320 	add.w	r3, r7, #32
 8007a8a:	f107 0220 	add.w	r2, r7, #32
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	440a      	add	r2, r1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	463b      	mov	r3, r7
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	00da      	lsls	r2, r3, #3
 8007a9c:	f107 0320 	add.w	r3, r7, #32
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007aa8:	f107 031c 	add.w	r3, r7, #28
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	f107 031c 	add.w	r3, r7, #28
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007abc:	463b      	mov	r3, r7
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	891b      	ldrh	r3, [r3, #8]
 8007ac2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6959      	ldr	r1, [r3, #20]
 8007acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ad6:	1d38      	adds	r0, r7, #4
 8007ad8:	6800      	ldr	r0, [r0, #0]
 8007ada:	f001 f9f3 	bl	8008ec4 <USB_WritePMA>
 8007ade:	f000 bcc6 	b.w	800846e <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d164      	bne.n	8007bb6 <USB_EPStartXfer+0x554>
 8007aec:	1d3b      	adds	r3, r7, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b00:	4413      	add	r3, r2
 8007b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b04:	463b      	mov	r3, r7
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	00da      	lsls	r2, r3, #3
 8007b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b0e:	4413      	add	r3, r2
 8007b10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b14:	647b      	str	r3, [r7, #68]	; 0x44
 8007b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d112      	bne.n	8007b44 <USB_EPStartXfer+0x4e2>
 8007b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	e057      	b.n	8007bf4 <USB_EPStartXfer+0x592>
 8007b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b48:	2b3e      	cmp	r3, #62	; 0x3e
 8007b4a:	d817      	bhi.n	8007b7c <USB_EPStartXfer+0x51a>
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d004      	beq.n	8007b6c <USB_EPStartXfer+0x50a>
 8007b62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b66:	3301      	adds	r3, #1
 8007b68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	029b      	lsls	r3, r3, #10
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e03b      	b.n	8007bf4 <USB_EPStartXfer+0x592>
 8007b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d104      	bne.n	8007b9c <USB_EPStartXfer+0x53a>
 8007b92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b96:	3b01      	subs	r3, #1
 8007b98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	029b      	lsls	r3, r3, #10
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e01e      	b.n	8007bf4 <USB_EPStartXfer+0x592>
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d119      	bne.n	8007bf4 <USB_EPStartXfer+0x592>
 8007bc0:	1d3b      	adds	r3, r7, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd4:	4413      	add	r3, r2
 8007bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8007bd8:	463b      	mov	r3, r7
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	00da      	lsls	r2, r3, #3
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	4413      	add	r3, r2
 8007be4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	891b      	ldrh	r3, [r3, #8]
 8007bfa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bfe:	463b      	mov	r3, r7
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6959      	ldr	r1, [r3, #20]
 8007c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c0e:	1d38      	adds	r0, r7, #4
 8007c10:	6800      	ldr	r0, [r0, #0]
 8007c12:	f001 f957 	bl	8008ec4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c16:	463b      	mov	r3, r7
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	695a      	ldr	r2, [r3, #20]
 8007c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c20:	441a      	add	r2, r3
 8007c22:	463b      	mov	r3, r7
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c28:	463b      	mov	r3, r7
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6a1a      	ldr	r2, [r3, #32]
 8007c2e:	463b      	mov	r3, r7
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d909      	bls.n	8007c4c <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007c38:	463b      	mov	r3, r7
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c42:	1ad2      	subs	r2, r2, r3
 8007c44:	463b      	mov	r3, r7
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	621a      	str	r2, [r3, #32]
 8007c4a:	e008      	b.n	8007c5e <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007c56:	463b      	mov	r3, r7
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c5e:	1d3b      	adds	r3, r7, #4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	643b      	str	r3, [r7, #64]	; 0x40
 8007c64:	463b      	mov	r3, r7
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d164      	bne.n	8007d38 <USB_EPStartXfer+0x6d6>
 8007c6e:	1d3b      	adds	r3, r7, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c74:	1d3b      	adds	r3, r7, #4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	4413      	add	r3, r2
 8007c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c86:	463b      	mov	r3, r7
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	00da      	lsls	r2, r3, #3
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	4413      	add	r3, r2
 8007c92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
 8007c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d112      	bne.n	8007cc6 <USB_EPStartXfer+0x664>
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cae:	801a      	strh	r2, [r3, #0]
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc2:	801a      	strh	r2, [r3, #0]
 8007cc4:	e054      	b.n	8007d70 <USB_EPStartXfer+0x70e>
 8007cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cca:	2b3e      	cmp	r3, #62	; 0x3e
 8007ccc:	d817      	bhi.n	8007cfe <USB_EPStartXfer+0x69c>
 8007cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d004      	beq.n	8007cee <USB_EPStartXfer+0x68c>
 8007ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007ce8:	3301      	adds	r3, #1
 8007cea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	029b      	lsls	r3, r3, #10
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	e038      	b.n	8007d70 <USB_EPStartXfer+0x70e>
 8007cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <USB_EPStartXfer+0x6bc>
 8007d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	029b      	lsls	r3, r3, #10
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d34:	801a      	strh	r2, [r3, #0]
 8007d36:	e01b      	b.n	8007d70 <USB_EPStartXfer+0x70e>
 8007d38:	463b      	mov	r3, r7
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d116      	bne.n	8007d70 <USB_EPStartXfer+0x70e>
 8007d42:	1d3b      	adds	r3, r7, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d50:	4413      	add	r3, r2
 8007d52:	643b      	str	r3, [r7, #64]	; 0x40
 8007d54:	463b      	mov	r3, r7
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	00da      	lsls	r2, r3, #3
 8007d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5e:	4413      	add	r3, r2
 8007d60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d70:	463b      	mov	r3, r7
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	895b      	ldrh	r3, [r3, #10]
 8007d76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6959      	ldr	r1, [r3, #20]
 8007d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d8a:	1d38      	adds	r0, r7, #4
 8007d8c:	6800      	ldr	r0, [r0, #0]
 8007d8e:	f001 f899 	bl	8008ec4 <USB_WritePMA>
 8007d92:	e36c      	b.n	800846e <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007d94:	463b      	mov	r3, r7
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007d9e:	1d3b      	adds	r3, r7, #4
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	463b      	mov	r3, r7
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007dbc:	1d3b      	adds	r3, r7, #4
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	441a      	add	r2, r3
 8007dca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007de2:	1d3b      	adds	r3, r7, #4
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df6:	4413      	add	r3, r2
 8007df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	00da      	lsls	r2, r3, #3
 8007e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e04:	4413      	add	r3, r2
 8007e06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e16:	463b      	mov	r3, r7
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	891b      	ldrh	r3, [r3, #8]
 8007e1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e20:	463b      	mov	r3, r7
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6959      	ldr	r1, [r3, #20]
 8007e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e30:	1d38      	adds	r0, r7, #4
 8007e32:	6800      	ldr	r0, [r0, #0]
 8007e34:	f001 f846 	bl	8008ec4 <USB_WritePMA>
 8007e38:	e319      	b.n	800846e <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007e3a:	1d3b      	adds	r3, r7, #4
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	463b      	mov	r3, r7
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e54:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e7e:	463b      	mov	r3, r7
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6a1a      	ldr	r2, [r3, #32]
 8007e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e88:	1ad2      	subs	r2, r2, r3
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e90:	1d3b      	adds	r3, r7, #4
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	463b      	mov	r3, r7
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8162 	beq.w	8008170 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d164      	bne.n	8007f88 <USB_EPStartXfer+0x926>
 8007ebe:	1d3b      	adds	r3, r7, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ed2:	4413      	add	r3, r2
 8007ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	00da      	lsls	r2, r3, #3
 8007ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ee6:	677b      	str	r3, [r7, #116]	; 0x74
 8007ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d112      	bne.n	8007f16 <USB_EPStartXfer+0x8b4>
 8007ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e057      	b.n	8007fc6 <USB_EPStartXfer+0x964>
 8007f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f1c:	d817      	bhi.n	8007f4e <USB_EPStartXfer+0x8ec>
 8007f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <USB_EPStartXfer+0x8dc>
 8007f34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007f3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	029b      	lsls	r3, r3, #10
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	e03b      	b.n	8007fc6 <USB_EPStartXfer+0x964>
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <USB_EPStartXfer+0x90c>
 8007f64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007f6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	029b      	lsls	r3, r3, #10
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	e01e      	b.n	8007fc6 <USB_EPStartXfer+0x964>
 8007f88:	463b      	mov	r3, r7
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d119      	bne.n	8007fc6 <USB_EPStartXfer+0x964>
 8007f92:	1d3b      	adds	r3, r7, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fa8:	463b      	mov	r3, r7
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	00da      	lsls	r2, r3, #3
 8007fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	895b      	ldrh	r3, [r3, #10]
 8007fcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6959      	ldr	r1, [r3, #20]
 8007fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007fe0:	1d38      	adds	r0, r7, #4
 8007fe2:	6800      	ldr	r0, [r0, #0]
 8007fe4:	f000 ff6e 	bl	8008ec4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007fe8:	463b      	mov	r3, r7
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695a      	ldr	r2, [r3, #20]
 8007fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff2:	441a      	add	r2, r3
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a1a      	ldr	r2, [r3, #32]
 8008000:	463b      	mov	r3, r7
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	429a      	cmp	r2, r3
 8008008:	d909      	bls.n	800801e <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800800a:	463b      	mov	r3, r7
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6a1a      	ldr	r2, [r3, #32]
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	1ad2      	subs	r2, r2, r3
 8008016:	463b      	mov	r3, r7
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	621a      	str	r2, [r3, #32]
 800801c:	e008      	b.n	8008030 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008028:	463b      	mov	r3, r7
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2200      	movs	r2, #0
 800802e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 821a 	beq.w	800846e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800803a:	463b      	mov	r3, r7
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	785b      	ldrb	r3, [r3, #1]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d164      	bne.n	800810e <USB_EPStartXfer+0xaac>
 8008044:	1d3b      	adds	r3, r7, #4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	66bb      	str	r3, [r7, #104]	; 0x68
 800804a:	1d3b      	adds	r3, r7, #4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008052:	b29b      	uxth	r3, r3
 8008054:	461a      	mov	r2, r3
 8008056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008058:	4413      	add	r3, r2
 800805a:	66bb      	str	r3, [r7, #104]	; 0x68
 800805c:	463b      	mov	r3, r7
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	00da      	lsls	r2, r3, #3
 8008064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008066:	4413      	add	r3, r2
 8008068:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800806c:	667b      	str	r3, [r7, #100]	; 0x64
 800806e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d112      	bne.n	800809c <USB_EPStartXfer+0xa3a>
 8008076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008080:	b29a      	uxth	r2, r3
 8008082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008094:	b29a      	uxth	r2, r3
 8008096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008098:	801a      	strh	r2, [r3, #0]
 800809a:	e057      	b.n	800814c <USB_EPStartXfer+0xaea>
 800809c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a0:	2b3e      	cmp	r3, #62	; 0x3e
 80080a2:	d817      	bhi.n	80080d4 <USB_EPStartXfer+0xa72>
 80080a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a8:	085b      	lsrs	r3, r3, #1
 80080aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <USB_EPStartXfer+0xa62>
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080be:	3301      	adds	r3, #1
 80080c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	029b      	lsls	r3, r3, #10
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e03b      	b.n	800814c <USB_EPStartXfer+0xaea>
 80080d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d8:	095b      	lsrs	r3, r3, #5
 80080da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	f003 031f 	and.w	r3, r3, #31
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <USB_EPStartXfer+0xa92>
 80080ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ee:	3b01      	subs	r3, #1
 80080f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	029b      	lsls	r3, r3, #10
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008106:	b29a      	uxth	r2, r3
 8008108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e01e      	b.n	800814c <USB_EPStartXfer+0xaea>
 800810e:	463b      	mov	r3, r7
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d119      	bne.n	800814c <USB_EPStartXfer+0xaea>
 8008118:	1d3b      	adds	r3, r7, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	673b      	str	r3, [r7, #112]	; 0x70
 800811e:	1d3b      	adds	r3, r7, #4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008126:	b29b      	uxth	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800812c:	4413      	add	r3, r2
 800812e:	673b      	str	r3, [r7, #112]	; 0x70
 8008130:	463b      	mov	r3, r7
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	00da      	lsls	r2, r3, #3
 8008138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800813a:	4413      	add	r3, r2
 800813c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008140:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008146:	b29a      	uxth	r2, r3
 8008148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800814c:	463b      	mov	r3, r7
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	891b      	ldrh	r3, [r3, #8]
 8008152:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008156:	463b      	mov	r3, r7
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6959      	ldr	r1, [r3, #20]
 800815c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008160:	b29b      	uxth	r3, r3
 8008162:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008166:	1d38      	adds	r0, r7, #4
 8008168:	6800      	ldr	r0, [r0, #0]
 800816a:	f000 feab 	bl	8008ec4 <USB_WritePMA>
 800816e:	e17e      	b.n	800846e <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008170:	463b      	mov	r3, r7
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d16f      	bne.n	800825a <USB_EPStartXfer+0xbf8>
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008192:	4413      	add	r3, r2
 8008194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008198:	463b      	mov	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	00da      	lsls	r2, r3, #3
 80081a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081a4:	4413      	add	r3, r2
 80081a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d116      	bne.n	80081e4 <USB_EPStartXfer+0xb82>
 80081b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081c8:	801a      	strh	r2, [r3, #0]
 80081ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081da:	b29a      	uxth	r2, r3
 80081dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081e0:	801a      	strh	r2, [r3, #0]
 80081e2:	e05f      	b.n	80082a4 <USB_EPStartXfer+0xc42>
 80081e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e8:	2b3e      	cmp	r3, #62	; 0x3e
 80081ea:	d818      	bhi.n	800821e <USB_EPStartXfer+0xbbc>
 80081ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f0:	085b      	lsrs	r3, r3, #1
 80081f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80081f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <USB_EPStartXfer+0xbaa>
 8008202:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008206:	3301      	adds	r3, #1
 8008208:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800820c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008210:	b29b      	uxth	r3, r3
 8008212:	029b      	lsls	r3, r3, #10
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800821a:	801a      	strh	r2, [r3, #0]
 800821c:	e042      	b.n	80082a4 <USB_EPStartXfer+0xc42>
 800821e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <USB_EPStartXfer+0xbdc>
 8008234:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008238:	3b01      	subs	r3, #1
 800823a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800823e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008242:	b29b      	uxth	r3, r3
 8008244:	029b      	lsls	r3, r3, #10
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008250:	b29a      	uxth	r2, r3
 8008252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e024      	b.n	80082a4 <USB_EPStartXfer+0xc42>
 800825a:	463b      	mov	r3, r7
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d11f      	bne.n	80082a4 <USB_EPStartXfer+0xc42>
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800826c:	1d3b      	adds	r3, r7, #4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008274:	b29b      	uxth	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800827c:	4413      	add	r3, r2
 800827e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008282:	463b      	mov	r3, r7
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	00da      	lsls	r2, r3, #3
 800828a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800828e:	4413      	add	r3, r2
 8008290:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008294:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829c:	b29a      	uxth	r2, r3
 800829e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082a4:	463b      	mov	r3, r7
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	891b      	ldrh	r3, [r3, #8]
 80082aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082ae:	463b      	mov	r3, r7
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6959      	ldr	r1, [r3, #20]
 80082b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082be:	1d38      	adds	r0, r7, #4
 80082c0:	6800      	ldr	r0, [r0, #0]
 80082c2:	f000 fdff 	bl	8008ec4 <USB_WritePMA>
          ep->xfer_buff += len;
 80082c6:	463b      	mov	r3, r7
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d0:	441a      	add	r2, r3
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6a1a      	ldr	r2, [r3, #32]
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d909      	bls.n	80082fc <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80082e8:	463b      	mov	r3, r7
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6a1a      	ldr	r2, [r3, #32]
 80082ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	463b      	mov	r3, r7
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	621a      	str	r2, [r3, #32]
 80082fa:	e008      	b.n	800830e <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80082fc:	463b      	mov	r3, r7
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008306:	463b      	mov	r3, r7
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800830e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 80ab 	beq.w	800846e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008318:	1d3b      	adds	r3, r7, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008320:	463b      	mov	r3, r7
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d16f      	bne.n	800840a <USB_EPStartXfer+0xda8>
 800832a:	1d3b      	adds	r3, r7, #4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008332:	1d3b      	adds	r3, r7, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833a:	b29b      	uxth	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008342:	4413      	add	r3, r2
 8008344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008348:	463b      	mov	r3, r7
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	00da      	lsls	r2, r3, #3
 8008350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008354:	4413      	add	r3, r2
 8008356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800835a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800835e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d116      	bne.n	8008394 <USB_EPStartXfer+0xd32>
 8008366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838a:	b29a      	uxth	r2, r3
 800838c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e05b      	b.n	800844c <USB_EPStartXfer+0xdea>
 8008394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008398:	2b3e      	cmp	r3, #62	; 0x3e
 800839a:	d818      	bhi.n	80083ce <USB_EPStartXfer+0xd6c>
 800839c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80083a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <USB_EPStartXfer+0xd5a>
 80083b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083b6:	3301      	adds	r3, #1
 80083b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80083bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	029b      	lsls	r3, r3, #10
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	e03e      	b.n	800844c <USB_EPStartXfer+0xdea>
 80083ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80083d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083dc:	f003 031f 	and.w	r3, r3, #31
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d104      	bne.n	80083ee <USB_EPStartXfer+0xd8c>
 80083e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083e8:	3b01      	subs	r3, #1
 80083ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e020      	b.n	800844c <USB_EPStartXfer+0xdea>
 800840a:	463b      	mov	r3, r7
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d11b      	bne.n	800844c <USB_EPStartXfer+0xdea>
 8008414:	1d3b      	adds	r3, r7, #4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800841c:	b29b      	uxth	r3, r3
 800841e:	461a      	mov	r2, r3
 8008420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008424:	4413      	add	r3, r2
 8008426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800842a:	463b      	mov	r3, r7
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	00da      	lsls	r2, r3, #3
 8008432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008436:	4413      	add	r3, r2
 8008438:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800843c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800844a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800844c:	463b      	mov	r3, r7
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	895b      	ldrh	r3, [r3, #10]
 8008452:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008456:	463b      	mov	r3, r7
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6959      	ldr	r1, [r3, #20]
 800845c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008460:	b29b      	uxth	r3, r3
 8008462:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008466:	1d38      	adds	r0, r7, #4
 8008468:	6800      	ldr	r0, [r0, #0]
 800846a:	f000 fd2b 	bl	8008ec4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	463b      	mov	r3, r7
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f107 020a 	add.w	r2, r7, #10
 8008484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848c:	8013      	strh	r3, [r2, #0]
 800848e:	f107 030a 	add.w	r3, r7, #10
 8008492:	f107 020a 	add.w	r2, r7, #10
 8008496:	8812      	ldrh	r2, [r2, #0]
 8008498:	f082 0210 	eor.w	r2, r2, #16
 800849c:	801a      	strh	r2, [r3, #0]
 800849e:	f107 030a 	add.w	r3, r7, #10
 80084a2:	f107 020a 	add.w	r2, r7, #10
 80084a6:	8812      	ldrh	r2, [r2, #0]
 80084a8:	f082 0220 	eor.w	r2, r2, #32
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	1d3b      	adds	r3, r7, #4
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	463b      	mov	r3, r7
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	441a      	add	r2, r3
 80084bc:	f107 030a 	add.w	r3, r7, #10
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	8013      	strh	r3, [r2, #0]
 80084d6:	e3b5      	b.n	8008c44 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80084d8:	463b      	mov	r3, r7
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	7b1b      	ldrb	r3, [r3, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f040 8090 	bne.w	8008604 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80084e4:	463b      	mov	r3, r7
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	463b      	mov	r3, r7
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d90e      	bls.n	8008512 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80084f4:	463b      	mov	r3, r7
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80084fe:	463b      	mov	r3, r7
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	699a      	ldr	r2, [r3, #24]
 8008504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008508:	1ad2      	subs	r2, r2, r3
 800850a:	463b      	mov	r3, r7
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	619a      	str	r2, [r3, #24]
 8008510:	e008      	b.n	8008524 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008512:	463b      	mov	r3, r7
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2200      	movs	r2, #0
 8008522:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008524:	1d3b      	adds	r3, r7, #4
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800852c:	1d3b      	adds	r3, r7, #4
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008534:	b29b      	uxth	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800853c:	4413      	add	r3, r2
 800853e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008542:	463b      	mov	r3, r7
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	00da      	lsls	r2, r3, #3
 800854a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800854e:	4413      	add	r3, r2
 8008550:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855c:	2b00      	cmp	r3, #0
 800855e:	d116      	bne.n	800858e <USB_EPStartXfer+0xf2c>
 8008560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800856c:	b29a      	uxth	r2, r3
 800856e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008572:	801a      	strh	r2, [r3, #0]
 8008574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008584:	b29a      	uxth	r2, r3
 8008586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	e32c      	b.n	8008be8 <USB_EPStartXfer+0x1586>
 800858e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008592:	2b3e      	cmp	r3, #62	; 0x3e
 8008594:	d818      	bhi.n	80085c8 <USB_EPStartXfer+0xf66>
 8008596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80085a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <USB_EPStartXfer+0xf54>
 80085ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085b0:	3301      	adds	r3, #1
 80085b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80085b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	029b      	lsls	r3, r3, #10
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e30f      	b.n	8008be8 <USB_EPStartXfer+0x1586>
 80085c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80085d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d6:	f003 031f 	and.w	r3, r3, #31
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d104      	bne.n	80085e8 <USB_EPStartXfer+0xf86>
 80085de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085e2:	3b01      	subs	r3, #1
 80085e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80085e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	029b      	lsls	r3, r3, #10
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e2f1      	b.n	8008be8 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008604:	463b      	mov	r3, r7
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	2b02      	cmp	r3, #2
 800860c:	f040 818f 	bne.w	800892e <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008610:	463b      	mov	r3, r7
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d175      	bne.n	8008706 <USB_EPStartXfer+0x10a4>
 800861a:	1d3b      	adds	r3, r7, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800862a:	b29b      	uxth	r3, r3
 800862c:	461a      	mov	r2, r3
 800862e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008632:	4413      	add	r3, r2
 8008634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008638:	463b      	mov	r3, r7
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	00da      	lsls	r2, r3, #3
 8008640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008644:	4413      	add	r3, r2
 8008646:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800864a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800864e:	463b      	mov	r3, r7
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d116      	bne.n	8008686 <USB_EPStartXfer+0x1024>
 8008658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008664:	b29a      	uxth	r2, r3
 8008666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800866a:	801a      	strh	r2, [r3, #0]
 800866c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867c:	b29a      	uxth	r2, r3
 800867e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	e065      	b.n	8008752 <USB_EPStartXfer+0x10f0>
 8008686:	463b      	mov	r3, r7
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b3e      	cmp	r3, #62	; 0x3e
 800868e:	d81a      	bhi.n	80086c6 <USB_EPStartXfer+0x1064>
 8008690:	463b      	mov	r3, r7
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800869c:	463b      	mov	r3, r7
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <USB_EPStartXfer+0x1052>
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ae:	3301      	adds	r3, #1
 80086b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	029b      	lsls	r3, r3, #10
 80086bc:	b29a      	uxth	r2, r3
 80086be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086c2:	801a      	strh	r2, [r3, #0]
 80086c4:	e045      	b.n	8008752 <USB_EPStartXfer+0x10f0>
 80086c6:	463b      	mov	r3, r7
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	095b      	lsrs	r3, r3, #5
 80086ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086d2:	463b      	mov	r3, r7
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	f003 031f 	and.w	r3, r3, #31
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USB_EPStartXfer+0x1088>
 80086e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e4:	3b01      	subs	r3, #1
 80086e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	029b      	lsls	r3, r3, #10
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	e025      	b.n	8008752 <USB_EPStartXfer+0x10f0>
 8008706:	463b      	mov	r3, r7
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d120      	bne.n	8008752 <USB_EPStartXfer+0x10f0>
 8008710:	1d3b      	adds	r3, r7, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008718:	1d3b      	adds	r3, r7, #4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008720:	b29b      	uxth	r3, r3
 8008722:	461a      	mov	r2, r3
 8008724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008728:	4413      	add	r3, r2
 800872a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800872e:	463b      	mov	r3, r7
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	00da      	lsls	r2, r3, #3
 8008736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800873a:	4413      	add	r3, r2
 800873c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008744:	463b      	mov	r3, r7
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	b29a      	uxth	r2, r3
 800874c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008750:	801a      	strh	r2, [r3, #0]
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800875a:	463b      	mov	r3, r7
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d175      	bne.n	8008850 <USB_EPStartXfer+0x11ee>
 8008764:	1d3b      	adds	r3, r7, #4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008774:	b29b      	uxth	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800877c:	4413      	add	r3, r2
 800877e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008782:	463b      	mov	r3, r7
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	00da      	lsls	r2, r3, #3
 800878a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800878e:	4413      	add	r3, r2
 8008790:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008798:	463b      	mov	r3, r7
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d116      	bne.n	80087d0 <USB_EPStartXfer+0x116e>
 80087a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087b4:	801a      	strh	r2, [r3, #0]
 80087b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087cc:	801a      	strh	r2, [r3, #0]
 80087ce:	e061      	b.n	8008894 <USB_EPStartXfer+0x1232>
 80087d0:	463b      	mov	r3, r7
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b3e      	cmp	r3, #62	; 0x3e
 80087d8:	d81a      	bhi.n	8008810 <USB_EPStartXfer+0x11ae>
 80087da:	463b      	mov	r3, r7
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087e6:	463b      	mov	r3, r7
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <USB_EPStartXfer+0x119c>
 80087f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80087f8:	3301      	adds	r3, #1
 80087fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008802:	b29b      	uxth	r3, r3
 8008804:	029b      	lsls	r3, r3, #10
 8008806:	b29a      	uxth	r2, r3
 8008808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800880c:	801a      	strh	r2, [r3, #0]
 800880e:	e041      	b.n	8008894 <USB_EPStartXfer+0x1232>
 8008810:	463b      	mov	r3, r7
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	095b      	lsrs	r3, r3, #5
 8008818:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800881c:	463b      	mov	r3, r7
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f003 031f 	and.w	r3, r3, #31
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <USB_EPStartXfer+0x11d2>
 800882a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800882e:	3b01      	subs	r3, #1
 8008830:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008834:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008838:	b29b      	uxth	r3, r3
 800883a:	029b      	lsls	r3, r3, #10
 800883c:	b29b      	uxth	r3, r3
 800883e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008846:	b29a      	uxth	r2, r3
 8008848:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800884c:	801a      	strh	r2, [r3, #0]
 800884e:	e021      	b.n	8008894 <USB_EPStartXfer+0x1232>
 8008850:	463b      	mov	r3, r7
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d11c      	bne.n	8008894 <USB_EPStartXfer+0x1232>
 800885a:	1d3b      	adds	r3, r7, #4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008862:	b29b      	uxth	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800886a:	4413      	add	r3, r2
 800886c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008870:	463b      	mov	r3, r7
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	00da      	lsls	r2, r3, #3
 8008878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800887c:	4413      	add	r3, r2
 800887e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008886:	463b      	mov	r3, r7
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	b29a      	uxth	r2, r3
 800888e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008892:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008894:	463b      	mov	r3, r7
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 81a4 	beq.w	8008be8 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80088a0:	1d3b      	adds	r3, r7, #4
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	463b      	mov	r3, r7
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <USB_EPStartXfer+0x126a>
 80088c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f040 8187 	bne.w	8008be8 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 8180 	bne.w	8008be8 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80088e8:	1d3b      	adds	r3, r7, #4
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	463b      	mov	r3, r7
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008902:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	463b      	mov	r3, r7
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800891c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008928:	b29b      	uxth	r3, r3
 800892a:	8013      	strh	r3, [r2, #0]
 800892c:	e15c      	b.n	8008be8 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800892e:	463b      	mov	r3, r7
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	78db      	ldrb	r3, [r3, #3]
 8008934:	2b01      	cmp	r3, #1
 8008936:	f040 8155 	bne.w	8008be4 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800893a:	463b      	mov	r3, r7
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	463b      	mov	r3, r7
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	429a      	cmp	r2, r3
 8008948:	d90e      	bls.n	8008968 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800894a:	463b      	mov	r3, r7
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008954:	463b      	mov	r3, r7
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	463b      	mov	r3, r7
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	619a      	str	r2, [r3, #24]
 8008966:	e008      	b.n	800897a <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008968:	463b      	mov	r3, r7
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008972:	463b      	mov	r3, r7
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2200      	movs	r2, #0
 8008978:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800897a:	463b      	mov	r3, r7
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d16f      	bne.n	8008a64 <USB_EPStartXfer+0x1402>
 8008984:	1d3b      	adds	r3, r7, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800898c:	1d3b      	adds	r3, r7, #4
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008994:	b29b      	uxth	r3, r3
 8008996:	461a      	mov	r2, r3
 8008998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800899c:	4413      	add	r3, r2
 800899e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089a2:	463b      	mov	r3, r7
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	00da      	lsls	r2, r3, #3
 80089aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089ae:	4413      	add	r3, r2
 80089b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d116      	bne.n	80089ee <USB_EPStartXfer+0x138c>
 80089c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	e05f      	b.n	8008aae <USB_EPStartXfer+0x144c>
 80089ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f2:	2b3e      	cmp	r3, #62	; 0x3e
 80089f4:	d818      	bhi.n	8008a28 <USB_EPStartXfer+0x13c6>
 80089f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fa:	085b      	lsrs	r3, r3, #1
 80089fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <USB_EPStartXfer+0x13b4>
 8008a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a10:	3301      	adds	r3, #1
 8008a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	029b      	lsls	r3, r3, #10
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a24:	801a      	strh	r2, [r3, #0]
 8008a26:	e042      	b.n	8008aae <USB_EPStartXfer+0x144c>
 8008a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2c:	095b      	lsrs	r3, r3, #5
 8008a2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a36:	f003 031f 	and.w	r3, r3, #31
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d104      	bne.n	8008a48 <USB_EPStartXfer+0x13e6>
 8008a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a42:	3b01      	subs	r3, #1
 8008a44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	029b      	lsls	r3, r3, #10
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	e024      	b.n	8008aae <USB_EPStartXfer+0x144c>
 8008a64:	463b      	mov	r3, r7
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d11f      	bne.n	8008aae <USB_EPStartXfer+0x144c>
 8008a6e:	1d3b      	adds	r3, r7, #4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a76:	1d3b      	adds	r3, r7, #4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	461a      	mov	r2, r3
 8008a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a86:	4413      	add	r3, r2
 8008a88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	00da      	lsls	r2, r3, #3
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	4413      	add	r3, r2
 8008a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	1d3b      	adds	r3, r7, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d16f      	bne.n	8008ba0 <USB_EPStartXfer+0x153e>
 8008ac0:	1d3b      	adds	r3, r7, #4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ac8:	1d3b      	adds	r3, r7, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ad8:	4413      	add	r3, r2
 8008ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ade:	463b      	mov	r3, r7
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	00da      	lsls	r2, r3, #3
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	4413      	add	r3, r2
 8008aec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d116      	bne.n	8008b2a <USB_EPStartXfer+0x14c8>
 8008afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b0e:	801a      	strh	r2, [r3, #0]
 8008b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e05e      	b.n	8008be8 <USB_EPStartXfer+0x1586>
 8008b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b30:	d818      	bhi.n	8008b64 <USB_EPStartXfer+0x1502>
 8008b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b36:	085b      	lsrs	r3, r3, #1
 8008b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <USB_EPStartXfer+0x14f0>
 8008b48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	029b      	lsls	r3, r3, #10
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	e041      	b.n	8008be8 <USB_EPStartXfer+0x1586>
 8008b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b68:	095b      	lsrs	r3, r3, #5
 8008b6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d104      	bne.n	8008b84 <USB_EPStartXfer+0x1522>
 8008b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	029b      	lsls	r3, r3, #10
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e023      	b.n	8008be8 <USB_EPStartXfer+0x1586>
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	785b      	ldrb	r3, [r3, #1]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d11e      	bne.n	8008be8 <USB_EPStartXfer+0x1586>
 8008baa:	1d3b      	adds	r3, r7, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bba:	4413      	add	r3, r2
 8008bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	00da      	lsls	r2, r3, #3
 8008bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bcc:	4413      	add	r3, r2
 8008bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be0:	801a      	strh	r2, [r3, #0]
 8008be2:	e001      	b.n	8008be8 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e02e      	b.n	8008c46 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008be8:	1d3b      	adds	r3, r7, #4
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	463b      	mov	r3, r7
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008c06:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008c12:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008c1e:	1d3b      	adds	r3, r7, #4
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	463b      	mov	r3, r7
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	441a      	add	r2, r3
 8008c2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d020      	beq.n	8008ca4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c78:	81bb      	strh	r3, [r7, #12]
 8008c7a:	89bb      	ldrh	r3, [r7, #12]
 8008c7c:	f083 0310 	eor.w	r3, r3, #16
 8008c80:	81bb      	strh	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	89bb      	ldrh	r3, [r7, #12]
 8008c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]
 8008ca2:	e01f      	b.n	8008ce4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cba:	81fb      	strh	r3, [r7, #14]
 8008cbc:	89fb      	ldrh	r3, [r7, #14]
 8008cbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cc2:	81fb      	strh	r3, [r7, #14]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	441a      	add	r2, r3
 8008cce:	89fb      	ldrh	r3, [r7, #14]
 8008cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b087      	sub	sp, #28
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	7b1b      	ldrb	r3, [r3, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f040 809d 	bne.w	8008e40 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d04c      	beq.n	8008da8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	823b      	strh	r3, [r7, #16]
 8008d1c:	8a3b      	ldrh	r3, [r7, #16]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d01b      	beq.n	8008d5e <USB_EPClearStall+0x6c>
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3c:	81fb      	strh	r3, [r7, #14]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	441a      	add	r2, r3
 8008d48:	89fb      	ldrh	r3, [r7, #14]
 8008d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	78db      	ldrb	r3, [r3, #3]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d06c      	beq.n	8008e40 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7c:	81bb      	strh	r3, [r7, #12]
 8008d7e:	89bb      	ldrh	r3, [r7, #12]
 8008d80:	f083 0320 	eor.w	r3, r3, #32
 8008d84:	81bb      	strh	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	441a      	add	r2, r3
 8008d90:	89bb      	ldrh	r3, [r7, #12]
 8008d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	8013      	strh	r3, [r2, #0]
 8008da6:	e04b      	b.n	8008e40 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	82fb      	strh	r3, [r7, #22]
 8008db6:	8afb      	ldrh	r3, [r7, #22]
 8008db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01b      	beq.n	8008df8 <USB_EPClearStall+0x106>
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd6:	82bb      	strh	r3, [r7, #20]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	441a      	add	r2, r3
 8008de2:	8abb      	ldrh	r3, [r7, #20]
 8008de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0e:	827b      	strh	r3, [r7, #18]
 8008e10:	8a7b      	ldrh	r3, [r7, #18]
 8008e12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e16:	827b      	strh	r3, [r7, #18]
 8008e18:	8a7b      	ldrh	r3, [r7, #18]
 8008e1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e1e:	827b      	strh	r3, [r7, #18]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	8a7b      	ldrh	r3, [r7, #18]
 8008e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d103      	bne.n	8008e68 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2280      	movs	r2, #128	; 0x80
 8008e64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b08d      	sub	sp, #52	; 0x34
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008eda:	88bb      	ldrh	r3, [r7, #4]
 8008edc:	3301      	adds	r3, #1
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008eea:	88fa      	ldrh	r2, [r7, #6]
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ef4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efa:	e01b      	b.n	8008f34 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	3301      	adds	r3, #1
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	3302      	adds	r3, #2
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	3b01      	subs	r3, #1
 8008f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e0      	bne.n	8008efc <USB_WritePMA+0x38>
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	3734      	adds	r7, #52	; 0x34
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b08b      	sub	sp, #44	; 0x2c
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4611      	mov	r1, r2
 8008f54:	461a      	mov	r2, r3
 8008f56:	460b      	mov	r3, r1
 8008f58:	80fb      	strh	r3, [r7, #6]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f5e:	88bb      	ldrh	r3, [r7, #4]
 8008f60:	085b      	lsrs	r3, r3, #1
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f78:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7e:	e018      	b.n	8008fb2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	3302      	adds	r3, #2
 8008f8c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e3      	bne.n	8008f80 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008fb8:	88bb      	ldrh	r3, [r7, #4]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	701a      	strb	r2, [r3, #0]
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	372c      	adds	r7, #44	; 0x2c
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ff0:	f002 f8ec 	bl	800b1cc <USBD_static_malloc>
 8008ff4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009004:	2302      	movs	r3, #2
 8009006:	e066      	b.n	80090d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7c1b      	ldrb	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d119      	bne.n	800904c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800901c:	2202      	movs	r2, #2
 800901e:	2181      	movs	r1, #129	; 0x81
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 ff78 	bl	800af16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800902c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009030:	2202      	movs	r2, #2
 8009032:	2101      	movs	r1, #1
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 ff6e 	bl	800af16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2210      	movs	r2, #16
 8009046:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800904a:	e016      	b.n	800907a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800904c:	2340      	movs	r3, #64	; 0x40
 800904e:	2202      	movs	r2, #2
 8009050:	2181      	movs	r1, #129	; 0x81
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 ff5f 	bl	800af16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800905e:	2340      	movs	r3, #64	; 0x40
 8009060:	2202      	movs	r2, #2
 8009062:	2101      	movs	r1, #1
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 ff56 	bl	800af16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2210      	movs	r2, #16
 8009076:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800907a:	2308      	movs	r3, #8
 800907c:	2203      	movs	r2, #3
 800907e:	2182      	movs	r1, #130	; 0x82
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 ff48 	bl	800af16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7c1b      	ldrb	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d109      	bne.n	80090c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ba:	2101      	movs	r1, #1
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f002 f81a 	bl	800b0f6 <USBD_LL_PrepareReceive>
 80090c2:	e007      	b.n	80090d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090ca:	2340      	movs	r3, #64	; 0x40
 80090cc:	2101      	movs	r1, #1
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f002 f811 	bl	800b0f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090ea:	2181      	movs	r1, #129	; 0x81
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 ff38 	bl	800af62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090f8:	2101      	movs	r1, #1
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 ff31 	bl	800af62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009108:	2182      	movs	r1, #130	; 0x82
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 ff29 	bl	800af62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00e      	beq.n	8009148 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800913a:	4618      	mov	r0, r3
 800913c:	f002 f854 	bl	800b1e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009164:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	e0af      	b.n	80092dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009184:	2b00      	cmp	r3, #0
 8009186:	d03f      	beq.n	8009208 <USBD_CDC_Setup+0xb4>
 8009188:	2b20      	cmp	r3, #32
 800918a:	f040 809f 	bne.w	80092cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	88db      	ldrh	r3, [r3, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d02e      	beq.n	80091f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	b25b      	sxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	da16      	bge.n	80091ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80091ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	88d2      	ldrh	r2, [r2, #6]
 80091b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	88db      	ldrh	r3, [r3, #6]
 80091b8:	2b07      	cmp	r3, #7
 80091ba:	bf28      	it	cs
 80091bc:	2307      	movcs	r3, #7
 80091be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	89fa      	ldrh	r2, [r7, #14]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 facf 	bl	800a76a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80091cc:	e085      	b.n	80092da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	785a      	ldrb	r2, [r3, #1]
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	88db      	ldrh	r3, [r3, #6]
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80091e4:	6939      	ldr	r1, [r7, #16]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	88db      	ldrh	r3, [r3, #6]
 80091ea:	461a      	mov	r2, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 fae8 	bl	800a7c2 <USBD_CtlPrepareRx>
      break;
 80091f2:	e072      	b.n	80092da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	7850      	ldrb	r0, [r2, #1]
 8009200:	2200      	movs	r2, #0
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	4798      	blx	r3
      break;
 8009206:	e068      	b.n	80092da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b0b      	cmp	r3, #11
 800920e:	d852      	bhi.n	80092b6 <USBD_CDC_Setup+0x162>
 8009210:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <USBD_CDC_Setup+0xc4>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	08009249 	.word	0x08009249
 800921c:	080092c5 	.word	0x080092c5
 8009220:	080092b7 	.word	0x080092b7
 8009224:	080092b7 	.word	0x080092b7
 8009228:	080092b7 	.word	0x080092b7
 800922c:	080092b7 	.word	0x080092b7
 8009230:	080092b7 	.word	0x080092b7
 8009234:	080092b7 	.word	0x080092b7
 8009238:	080092b7 	.word	0x080092b7
 800923c:	080092b7 	.word	0x080092b7
 8009240:	08009273 	.word	0x08009273
 8009244:	0800929d 	.word	0x0800929d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b03      	cmp	r3, #3
 8009252:	d107      	bne.n	8009264 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009254:	f107 030a 	add.w	r3, r7, #10
 8009258:	2202      	movs	r2, #2
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 fa84 	bl	800a76a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009262:	e032      	b.n	80092ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 fa0e 	bl	800a688 <USBD_CtlError>
            ret = USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	75fb      	strb	r3, [r7, #23]
          break;
 8009270:	e02b      	b.n	80092ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b03      	cmp	r3, #3
 800927c:	d107      	bne.n	800928e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800927e:	f107 030d 	add.w	r3, r7, #13
 8009282:	2201      	movs	r2, #1
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 fa6f 	bl	800a76a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800928c:	e01d      	b.n	80092ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f9f9 	bl	800a688 <USBD_CtlError>
            ret = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	75fb      	strb	r3, [r7, #23]
          break;
 800929a:	e016      	b.n	80092ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d00f      	beq.n	80092c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 f9ec 	bl	800a688 <USBD_CtlError>
            ret = USBD_FAIL;
 80092b0:	2303      	movs	r3, #3
 80092b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092b4:	e008      	b.n	80092c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 f9e5 	bl	800a688 <USBD_CtlError>
          ret = USBD_FAIL;
 80092be:	2303      	movs	r3, #3
 80092c0:	75fb      	strb	r3, [r7, #23]
          break;
 80092c2:	e002      	b.n	80092ca <USBD_CDC_Setup+0x176>
          break;
 80092c4:	bf00      	nop
 80092c6:	e008      	b.n	80092da <USBD_CDC_Setup+0x186>
          break;
 80092c8:	bf00      	nop
      }
      break;
 80092ca:	e006      	b.n	80092da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 f9da 	bl	800a688 <USBD_CtlError>
      ret = USBD_FAIL;
 80092d4:	2303      	movs	r3, #3
 80092d6:	75fb      	strb	r3, [r7, #23]
      break;
 80092d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	e04f      	b.n	80093a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800930c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	3318      	adds	r3, #24
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d029      	beq.n	8009378 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	3318      	adds	r3, #24
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	78f9      	ldrb	r1, [r7, #3]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	460b      	mov	r3, r1
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	4403      	add	r3, r0
 8009344:	3338      	adds	r3, #56	; 0x38
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	fbb2 f1f3 	udiv	r1, r2, r3
 800934c:	fb03 f301 	mul.w	r3, r3, r1
 8009350:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009352:	2b00      	cmp	r3, #0
 8009354:	d110      	bne.n	8009378 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	440b      	add	r3, r1
 8009364:	3318      	adds	r3, #24
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800936a:	78f9      	ldrb	r1, [r7, #3]
 800936c:	2300      	movs	r3, #0
 800936e:	2200      	movs	r2, #0
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 fe9f 	bl	800b0b4 <USBD_LL_Transmit>
 8009376:	e015      	b.n	80093a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80093a0:	78fa      	ldrb	r2, [r7, #3]
 80093a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e015      	b.n	80093fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 feaf 	bl	800b138 <USBD_LL_GetRxDataSize>
 80093da:	4602      	mov	r2, r0
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093f6:	4611      	mov	r1, r2
 80093f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009412:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800941a:	2303      	movs	r3, #3
 800941c:	e01b      	b.n	8009456 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d015      	beq.n	8009454 <USBD_CDC_EP0_RxReady+0x50>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800942e:	2bff      	cmp	r3, #255	; 0xff
 8009430:	d010      	beq.n	8009454 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009440:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009448:	b292      	uxth	r2, r2
 800944a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	22ff      	movs	r2, #255	; 0xff
 8009450:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2243      	movs	r2, #67	; 0x43
 800946c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800946e:	4b03      	ldr	r3, [pc, #12]	; (800947c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	20000094 	.word	0x20000094

08009480 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2243      	movs	r2, #67	; 0x43
 800948c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800948e:	4b03      	ldr	r3, [pc, #12]	; (800949c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	20000050 	.word	0x20000050

080094a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2243      	movs	r2, #67	; 0x43
 80094ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80094ae:	4b03      	ldr	r3, [pc, #12]	; (80094bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	200000d8 	.word	0x200000d8

080094c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	220a      	movs	r2, #10
 80094cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094ce:	4b03      	ldr	r3, [pc, #12]	; (80094dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	2000000c 	.word	0x2000000c

080094e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e004      	b.n	80094fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800950a:	b480      	push	{r7}
 800950c:	b087      	sub	sp, #28
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800951c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009524:	2303      	movs	r3, #3
 8009526:	e008      	b.n	800953a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009556:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800955e:	2303      	movs	r3, #3
 8009560:	e004      	b.n	800956c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009586:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009588:	2301      	movs	r3, #1
 800958a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009596:	2303      	movs	r3, #3
 8009598:	e01a      	b.n	80095d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d114      	bne.n	80095ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095c2:	2181      	movs	r1, #129	; 0x81
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 fd75 	bl	800b0b4 <USBD_LL_Transmit>

    ret = USBD_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e016      	b.n	8009624 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	7c1b      	ldrb	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009608:	2101      	movs	r1, #1
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fd73 	bl	800b0f6 <USBD_LL_PrepareReceive>
 8009610:	e007      	b.n	8009622 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009618:	2340      	movs	r3, #64	; 0x40
 800961a:	2101      	movs	r1, #1
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 fd6a 	bl	800b0f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009640:	2303      	movs	r3, #3
 8009642:	e01f      	b.n	8009684 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	79fa      	ldrb	r2, [r7, #7]
 8009676:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f001 fbd1 	bl	800ae20 <USBD_LL_Init>
 800967e:	4603      	mov	r3, r0
 8009680:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009682:	7dfb      	ldrb	r3, [r7, #23]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e016      	b.n	80096d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	f107 020e 	add.w	r2, r7, #14
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	4602      	mov	r2, r0
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 fbfc 	bl	800aee0 <USBD_LL_Start>
 80096e8:	4603      	mov	r3, r0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b083      	sub	sp, #12
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d009      	beq.n	8009736 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009752:	2b00      	cmp	r3, #0
 8009754:	d007      	beq.n	8009766 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	4611      	mov	r1, r2
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
  }

  return USBD_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 ff46 	bl	800a614 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009796:	461a      	mov	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097a4:	f003 031f 	and.w	r3, r3, #31
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d01a      	beq.n	80097e2 <USBD_LL_SetupStage+0x72>
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d822      	bhi.n	80097f6 <USBD_LL_SetupStage+0x86>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <USBD_LL_SetupStage+0x4a>
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d00a      	beq.n	80097ce <USBD_LL_SetupStage+0x5e>
 80097b8:	e01d      	b.n	80097f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f9ee 	bl	8009ba4 <USBD_StdDevReq>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
      break;
 80097cc:	e020      	b.n	8009810 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa52 	bl	8009c80 <USBD_StdItfReq>
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]
      break;
 80097e0:	e016      	b.n	8009810 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa91 	bl	8009d12 <USBD_StdEPReq>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]
      break;
 80097f4:	e00c      	b.n	8009810 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009800:	b2db      	uxtb	r3, r3
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 fbcb 	bl	800afa0 <USBD_LL_StallEP>
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]
      break;
 800980e:	bf00      	nop
  }

  return ret;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b086      	sub	sp, #24
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	460b      	mov	r3, r1
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d138      	bne.n	80098a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009834:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800983c:	2b03      	cmp	r3, #3
 800983e:	d14a      	bne.n	80098d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	429a      	cmp	r2, r3
 800984a:	d913      	bls.n	8009874 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	1ad2      	subs	r2, r2, r3
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	4293      	cmp	r3, r2
 8009864:	bf28      	it	cs
 8009866:	4613      	movcs	r3, r2
 8009868:	461a      	mov	r2, r3
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 ffc5 	bl	800a7fc <USBD_CtlContinueRx>
 8009872:	e030      	b.n	80098d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d10b      	bne.n	8009898 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 ffc0 	bl	800a81e <USBD_CtlSendStatus>
 800989e:	e01a      	b.n	80098d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d114      	bne.n	80098d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00e      	beq.n	80098d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	7afa      	ldrb	r2, [r7, #11]
 80098c2:	4611      	mov	r1, r2
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	4798      	blx	r3
 80098c8:	4603      	mov	r3, r0
 80098ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	e000      	b.n	80098d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	460b      	mov	r3, r1
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d16b      	bne.n	80099cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3314      	adds	r3, #20
 80098f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009900:	2b02      	cmp	r3, #2
 8009902:	d156      	bne.n	80099b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	429a      	cmp	r2, r3
 800990e:	d914      	bls.n	800993a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	689a      	ldr	r2, [r3, #8]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	461a      	mov	r2, r3
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 ff3a 	bl	800a7a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800992c:	2300      	movs	r3, #0
 800992e:	2200      	movs	r2, #0
 8009930:	2100      	movs	r1, #0
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f001 fbdf 	bl	800b0f6 <USBD_LL_PrepareReceive>
 8009938:	e03b      	b.n	80099b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	429a      	cmp	r2, r3
 8009944:	d11c      	bne.n	8009980 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800994e:	429a      	cmp	r2, r3
 8009950:	d316      	bcc.n	8009980 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800995c:	429a      	cmp	r2, r3
 800995e:	d20f      	bcs.n	8009980 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009960:	2200      	movs	r2, #0
 8009962:	2100      	movs	r1, #0
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 ff1b 	bl	800a7a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009972:	2300      	movs	r3, #0
 8009974:	2200      	movs	r2, #0
 8009976:	2100      	movs	r1, #0
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f001 fbbc 	bl	800b0f6 <USBD_LL_PrepareReceive>
 800997e:	e018      	b.n	80099b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b03      	cmp	r3, #3
 800998a:	d10b      	bne.n	80099a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099a4:	2180      	movs	r1, #128	; 0x80
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f001 fafa 	bl	800afa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 ff49 	bl	800a844 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d122      	bne.n	8009a02 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff fe98 	bl	80096f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099ca:	e01a      	b.n	8009a02 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d114      	bne.n	8009a02 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00e      	beq.n	8009a02 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	7afa      	ldrb	r2, [r7, #11]
 80099ee:	4611      	mov	r1, r2
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	4798      	blx	r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	e000      	b.n	8009a04 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e02f      	b.n	8009aa0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00f      	beq.n	8009a6a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	6852      	ldr	r2, [r2, #4]
 8009a62:	b2d2      	uxtb	r2, r2
 8009a64:	4611      	mov	r1, r2
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 fa50 	bl	800af16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2240      	movs	r2, #64	; 0x40
 8009a82:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a86:	2340      	movs	r3, #64	; 0x40
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2180      	movs	r1, #128	; 0x80
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 fa42 	bl	800af16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2240      	movs	r2, #64	; 0x40
 8009a9c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2204      	movs	r2, #4
 8009ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d106      	bne.n	8009b16 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e012      	b.n	8009b60 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d10b      	bne.n	8009b5e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b86:	8a3b      	ldrh	r3, [r7, #16]
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	b21a      	sxth	r2, r3
 8009b8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	b21b      	sxth	r3, r3
 8009b94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b96:	89fb      	ldrh	r3, [r7, #14]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	371c      	adds	r7, #28
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bba:	2b40      	cmp	r3, #64	; 0x40
 8009bbc:	d005      	beq.n	8009bca <USBD_StdDevReq+0x26>
 8009bbe:	2b40      	cmp	r3, #64	; 0x40
 8009bc0:	d853      	bhi.n	8009c6a <USBD_StdDevReq+0xc6>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00b      	beq.n	8009bde <USBD_StdDevReq+0x3a>
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d14f      	bne.n	8009c6a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	4798      	blx	r3
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
      break;
 8009bdc:	e04a      	b.n	8009c74 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	785b      	ldrb	r3, [r3, #1]
 8009be2:	2b09      	cmp	r3, #9
 8009be4:	d83b      	bhi.n	8009c5e <USBD_StdDevReq+0xba>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <USBD_StdDevReq+0x48>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c41 	.word	0x08009c41
 8009bf0:	08009c55 	.word	0x08009c55
 8009bf4:	08009c5f 	.word	0x08009c5f
 8009bf8:	08009c4b 	.word	0x08009c4b
 8009bfc:	08009c5f 	.word	0x08009c5f
 8009c00:	08009c1f 	.word	0x08009c1f
 8009c04:	08009c15 	.word	0x08009c15
 8009c08:	08009c5f 	.word	0x08009c5f
 8009c0c:	08009c37 	.word	0x08009c37
 8009c10:	08009c29 	.word	0x08009c29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f9de 	bl	8009fd8 <USBD_GetDescriptor>
          break;
 8009c1c:	e024      	b.n	8009c68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fb6d 	bl	800a300 <USBD_SetAddress>
          break;
 8009c26:	e01f      	b.n	8009c68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fbac 	bl	800a388 <USBD_SetConfig>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]
          break;
 8009c34:	e018      	b.n	8009c68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fc4b 	bl	800a4d4 <USBD_GetConfig>
          break;
 8009c3e:	e013      	b.n	8009c68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fc7c 	bl	800a540 <USBD_GetStatus>
          break;
 8009c48:	e00e      	b.n	8009c68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fcab 	bl	800a5a8 <USBD_SetFeature>
          break;
 8009c52:	e009      	b.n	8009c68 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fcba 	bl	800a5d0 <USBD_ClrFeature>
          break;
 8009c5c:	e004      	b.n	8009c68 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fd11 	bl	800a688 <USBD_CtlError>
          break;
 8009c66:	bf00      	nop
      }
      break;
 8009c68:	e004      	b.n	8009c74 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fd0b 	bl	800a688 <USBD_CtlError>
      break;
 8009c72:	bf00      	nop
  }

  return ret;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop

08009c80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c96:	2b40      	cmp	r3, #64	; 0x40
 8009c98:	d005      	beq.n	8009ca6 <USBD_StdItfReq+0x26>
 8009c9a:	2b40      	cmp	r3, #64	; 0x40
 8009c9c:	d82f      	bhi.n	8009cfe <USBD_StdItfReq+0x7e>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <USBD_StdItfReq+0x26>
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	d12b      	bne.n	8009cfe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d81d      	bhi.n	8009cf0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	889b      	ldrh	r3, [r3, #4]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d813      	bhi.n	8009ce6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	4798      	blx	r3
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	88db      	ldrh	r3, [r3, #6]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d110      	bne.n	8009cfa <USBD_StdItfReq+0x7a>
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10d      	bne.n	8009cfa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fd9d 	bl	800a81e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ce4:	e009      	b.n	8009cfa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fccd 	bl	800a688 <USBD_CtlError>
          break;
 8009cee:	e004      	b.n	8009cfa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fcc8 	bl	800a688 <USBD_CtlError>
          break;
 8009cf8:	e000      	b.n	8009cfc <USBD_StdItfReq+0x7c>
          break;
 8009cfa:	bf00      	nop
      }
      break;
 8009cfc:	e004      	b.n	8009d08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fcc1 	bl	800a688 <USBD_CtlError>
      break;
 8009d06:	bf00      	nop
  }

  return ret;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	889b      	ldrh	r3, [r3, #4]
 8009d24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d2e:	2b40      	cmp	r3, #64	; 0x40
 8009d30:	d007      	beq.n	8009d42 <USBD_StdEPReq+0x30>
 8009d32:	2b40      	cmp	r3, #64	; 0x40
 8009d34:	f200 8145 	bhi.w	8009fc2 <USBD_StdEPReq+0x2b0>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00c      	beq.n	8009d56 <USBD_StdEPReq+0x44>
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	f040 8140 	bne.w	8009fc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
      break;
 8009d54:	e13a      	b.n	8009fcc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d007      	beq.n	8009d6e <USBD_StdEPReq+0x5c>
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	f300 8129 	bgt.w	8009fb6 <USBD_StdEPReq+0x2a4>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d07f      	beq.n	8009e68 <USBD_StdEPReq+0x156>
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d03c      	beq.n	8009de6 <USBD_StdEPReq+0xd4>
 8009d6c:	e123      	b.n	8009fb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d002      	beq.n	8009d80 <USBD_StdEPReq+0x6e>
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d016      	beq.n	8009dac <USBD_StdEPReq+0x9a>
 8009d7e:	e02c      	b.n	8009dda <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00d      	beq.n	8009da2 <USBD_StdEPReq+0x90>
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	2b80      	cmp	r3, #128	; 0x80
 8009d8a:	d00a      	beq.n	8009da2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 f905 	bl	800afa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d96:	2180      	movs	r1, #128	; 0x80
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f001 f901 	bl	800afa0 <USBD_LL_StallEP>
 8009d9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009da0:	e020      	b.n	8009de4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fc6f 	bl	800a688 <USBD_CtlError>
              break;
 8009daa:	e01b      	b.n	8009de4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	885b      	ldrh	r3, [r3, #2]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10e      	bne.n	8009dd2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00b      	beq.n	8009dd2 <USBD_StdEPReq+0xc0>
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b80      	cmp	r3, #128	; 0x80
 8009dbe:	d008      	beq.n	8009dd2 <USBD_StdEPReq+0xc0>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	88db      	ldrh	r3, [r3, #6]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f001 f8e7 	bl	800afa0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fd23 	bl	800a81e <USBD_CtlSendStatus>

              break;
 8009dd8:	e004      	b.n	8009de4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fc53 	bl	800a688 <USBD_CtlError>
              break;
 8009de2:	bf00      	nop
          }
          break;
 8009de4:	e0ec      	b.n	8009fc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d002      	beq.n	8009df8 <USBD_StdEPReq+0xe6>
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d016      	beq.n	8009e24 <USBD_StdEPReq+0x112>
 8009df6:	e030      	b.n	8009e5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00d      	beq.n	8009e1a <USBD_StdEPReq+0x108>
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b80      	cmp	r3, #128	; 0x80
 8009e02:	d00a      	beq.n	8009e1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 f8c9 	bl	800afa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e0e:	2180      	movs	r1, #128	; 0x80
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f8c5 	bl	800afa0 <USBD_LL_StallEP>
 8009e16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e18:	e025      	b.n	8009e66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fc33 	bl	800a688 <USBD_CtlError>
              break;
 8009e22:	e020      	b.n	8009e66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	885b      	ldrh	r3, [r3, #2]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d11b      	bne.n	8009e64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d004      	beq.n	8009e40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 f8cf 	bl	800afde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fcec 	bl	800a81e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009e58:	e004      	b.n	8009e64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc13 	bl	800a688 <USBD_CtlError>
              break;
 8009e62:	e000      	b.n	8009e66 <USBD_StdEPReq+0x154>
              break;
 8009e64:	bf00      	nop
          }
          break;
 8009e66:	e0ab      	b.n	8009fc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d002      	beq.n	8009e7a <USBD_StdEPReq+0x168>
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d032      	beq.n	8009ede <USBD_StdEPReq+0x1cc>
 8009e78:	e097      	b.n	8009faa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d007      	beq.n	8009e90 <USBD_StdEPReq+0x17e>
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b80      	cmp	r3, #128	; 0x80
 8009e84:	d004      	beq.n	8009e90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fbfd 	bl	800a688 <USBD_CtlError>
                break;
 8009e8e:	e091      	b.n	8009fb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	da0b      	bge.n	8009eb0 <USBD_StdEPReq+0x19e>
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	3310      	adds	r3, #16
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	4413      	add	r3, r2
 8009eac:	3304      	adds	r3, #4
 8009eae:	e00b      	b.n	8009ec8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fc47 	bl	800a76a <USBD_CtlSendData>
              break;
 8009edc:	e06a      	b.n	8009fb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	da11      	bge.n	8009f0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	f003 020f 	and.w	r2, r3, #15
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	3324      	adds	r3, #36	; 0x24
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d117      	bne.n	8009f30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fbc0 	bl	800a688 <USBD_CtlError>
                  break;
 8009f08:	e054      	b.n	8009fb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	f003 020f 	and.w	r2, r3, #15
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d104      	bne.n	8009f30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fbad 	bl	800a688 <USBD_CtlError>
                  break;
 8009f2e:	e041      	b.n	8009fb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	da0b      	bge.n	8009f50 <USBD_StdEPReq+0x23e>
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	3310      	adds	r3, #16
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	e00b      	b.n	8009f68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	4413      	add	r3, r2
 8009f66:	3304      	adds	r3, #4
 8009f68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <USBD_StdEPReq+0x264>
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	2b80      	cmp	r3, #128	; 0x80
 8009f74:	d103      	bne.n	8009f7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e00e      	b.n	8009f9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 f84a 	bl	800b01c <USBD_LL_IsStallEP>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2201      	movs	r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e002      	b.n	8009f9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fbe1 	bl	800a76a <USBD_CtlSendData>
              break;
 8009fa8:	e004      	b.n	8009fb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fb6b 	bl	800a688 <USBD_CtlError>
              break;
 8009fb2:	bf00      	nop
          }
          break;
 8009fb4:	e004      	b.n	8009fc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fb65 	bl	800a688 <USBD_CtlError>
          break;
 8009fbe:	bf00      	nop
      }
      break;
 8009fc0:	e004      	b.n	8009fcc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fb5f 	bl	800a688 <USBD_CtlError>
      break;
 8009fca:	bf00      	nop
  }

  return ret;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	885b      	ldrh	r3, [r3, #2]
 8009ff2:	0a1b      	lsrs	r3, r3, #8
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	2b0e      	cmp	r3, #14
 8009ffa:	f200 8152 	bhi.w	800a2a2 <USBD_GetDescriptor+0x2ca>
 8009ffe:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <USBD_GetDescriptor+0x2c>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a075 	.word	0x0800a075
 800a008:	0800a08d 	.word	0x0800a08d
 800a00c:	0800a0cd 	.word	0x0800a0cd
 800a010:	0800a2a3 	.word	0x0800a2a3
 800a014:	0800a2a3 	.word	0x0800a2a3
 800a018:	0800a243 	.word	0x0800a243
 800a01c:	0800a26f 	.word	0x0800a26f
 800a020:	0800a2a3 	.word	0x0800a2a3
 800a024:	0800a2a3 	.word	0x0800a2a3
 800a028:	0800a2a3 	.word	0x0800a2a3
 800a02c:	0800a2a3 	.word	0x0800a2a3
 800a030:	0800a2a3 	.word	0x0800a2a3
 800a034:	0800a2a3 	.word	0x0800a2a3
 800a038:	0800a2a3 	.word	0x0800a2a3
 800a03c:	0800a041 	.word	0x0800a041
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	7c12      	ldrb	r2, [r2, #16]
 800a058:	f107 0108 	add.w	r1, r7, #8
 800a05c:	4610      	mov	r0, r2
 800a05e:	4798      	blx	r3
 800a060:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a062:	e126      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fb0e 	bl	800a688 <USBD_CtlError>
        err++;
 800a06c:	7afb      	ldrb	r3, [r7, #11]
 800a06e:	3301      	adds	r3, #1
 800a070:	72fb      	strb	r3, [r7, #11]
      break;
 800a072:	e11e      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	7c12      	ldrb	r2, [r2, #16]
 800a080:	f107 0108 	add.w	r1, r7, #8
 800a084:	4610      	mov	r0, r2
 800a086:	4798      	blx	r3
 800a088:	60f8      	str	r0, [r7, #12]
      break;
 800a08a:	e112      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7c1b      	ldrb	r3, [r3, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10d      	bne.n	800a0b0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09c:	f107 0208 	add.w	r2, r7, #8
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4798      	blx	r3
 800a0a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0ae:	e100      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	f107 0208 	add.w	r2, r7, #8
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4798      	blx	r3
 800a0c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ca:	e0f2      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	885b      	ldrh	r3, [r3, #2]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	f200 80ac 	bhi.w	800a230 <USBD_GetDescriptor+0x258>
 800a0d8:	a201      	add	r2, pc, #4	; (adr r2, 800a0e0 <USBD_GetDescriptor+0x108>)
 800a0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0de:	bf00      	nop
 800a0e0:	0800a0f9 	.word	0x0800a0f9
 800a0e4:	0800a12d 	.word	0x0800a12d
 800a0e8:	0800a161 	.word	0x0800a161
 800a0ec:	0800a195 	.word	0x0800a195
 800a0f0:	0800a1c9 	.word	0x0800a1c9
 800a0f4:	0800a1fd 	.word	0x0800a1fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7c12      	ldrb	r2, [r2, #16]
 800a110:	f107 0108 	add.w	r1, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11a:	e091      	b.n	800a240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fab2 	bl	800a688 <USBD_CtlError>
            err++;
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	3301      	adds	r3, #1
 800a128:	72fb      	strb	r3, [r7, #11]
          break;
 800a12a:	e089      	b.n	800a240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00b      	beq.n	800a150 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	7c12      	ldrb	r2, [r2, #16]
 800a144:	f107 0108 	add.w	r1, r7, #8
 800a148:	4610      	mov	r0, r2
 800a14a:	4798      	blx	r3
 800a14c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a14e:	e077      	b.n	800a240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa98 	bl	800a688 <USBD_CtlError>
            err++;
 800a158:	7afb      	ldrb	r3, [r7, #11]
 800a15a:	3301      	adds	r3, #1
 800a15c:	72fb      	strb	r3, [r7, #11]
          break;
 800a15e:	e06f      	b.n	800a240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00b      	beq.n	800a184 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	7c12      	ldrb	r2, [r2, #16]
 800a178:	f107 0108 	add.w	r1, r7, #8
 800a17c:	4610      	mov	r0, r2
 800a17e:	4798      	blx	r3
 800a180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a182:	e05d      	b.n	800a240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fa7e 	bl	800a688 <USBD_CtlError>
            err++;
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	3301      	adds	r3, #1
 800a190:	72fb      	strb	r3, [r7, #11]
          break;
 800a192:	e055      	b.n	800a240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00b      	beq.n	800a1b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	7c12      	ldrb	r2, [r2, #16]
 800a1ac:	f107 0108 	add.w	r1, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1b6:	e043      	b.n	800a240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa64 	bl	800a688 <USBD_CtlError>
            err++;
 800a1c0:	7afb      	ldrb	r3, [r7, #11]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1c6:	e03b      	b.n	800a240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7c12      	ldrb	r2, [r2, #16]
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ea:	e029      	b.n	800a240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa4a 	bl	800a688 <USBD_CtlError>
            err++;
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1fa:	e021      	b.n	800a240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7c12      	ldrb	r2, [r2, #16]
 800a214:	f107 0108 	add.w	r1, r7, #8
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21e:	e00f      	b.n	800a240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fa30 	bl	800a688 <USBD_CtlError>
            err++;
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	3301      	adds	r3, #1
 800a22c:	72fb      	strb	r3, [r7, #11]
          break;
 800a22e:	e007      	b.n	800a240 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fa28 	bl	800a688 <USBD_CtlError>
          err++;
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	3301      	adds	r3, #1
 800a23c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a23e:	bf00      	nop
      }
      break;
 800a240:	e037      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7c1b      	ldrb	r3, [r3, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a252:	f107 0208 	add.w	r2, r7, #8
 800a256:	4610      	mov	r0, r2
 800a258:	4798      	blx	r3
 800a25a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a25c:	e029      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa11 	bl	800a688 <USBD_CtlError>
        err++;
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	3301      	adds	r3, #1
 800a26a:	72fb      	strb	r3, [r7, #11]
      break;
 800a26c:	e021      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	7c1b      	ldrb	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10d      	bne.n	800a292 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27e:	f107 0208 	add.w	r2, r7, #8
 800a282:	4610      	mov	r0, r2
 800a284:	4798      	blx	r3
 800a286:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	2207      	movs	r2, #7
 800a28e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a290:	e00f      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f9f7 	bl	800a688 <USBD_CtlError>
        err++;
 800a29a:	7afb      	ldrb	r3, [r7, #11]
 800a29c:	3301      	adds	r3, #1
 800a29e:	72fb      	strb	r3, [r7, #11]
      break;
 800a2a0:	e007      	b.n	800a2b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f9ef 	bl	800a688 <USBD_CtlError>
      err++;
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b0:	bf00      	nop
  }

  if (err != 0U)
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d11e      	bne.n	800a2f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	88db      	ldrh	r3, [r3, #6]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d016      	beq.n	800a2ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a2c0:	893b      	ldrh	r3, [r7, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00e      	beq.n	800a2e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	88da      	ldrh	r2, [r3, #6]
 800a2ca:	893b      	ldrh	r3, [r7, #8]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	bf28      	it	cs
 800a2d0:	4613      	movcs	r3, r2
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2d6:	893b      	ldrh	r3, [r7, #8]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fa44 	bl	800a76a <USBD_CtlSendData>
 800a2e2:	e009      	b.n	800a2f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f9ce 	bl	800a688 <USBD_CtlError>
 800a2ec:	e004      	b.n	800a2f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa95 	bl	800a81e <USBD_CtlSendStatus>
 800a2f4:	e000      	b.n	800a2f8 <USBD_GetDescriptor+0x320>
    return;
 800a2f6:	bf00      	nop
  }
}
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop

0800a300 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	889b      	ldrh	r3, [r3, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d131      	bne.n	800a376 <USBD_SetAddress+0x76>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	88db      	ldrh	r3, [r3, #6]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d12d      	bne.n	800a376 <USBD_SetAddress+0x76>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	2b7f      	cmp	r3, #127	; 0x7f
 800a320:	d829      	bhi.n	800a376 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	885b      	ldrh	r3, [r3, #2]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a32c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b03      	cmp	r3, #3
 800a338:	d104      	bne.n	800a344 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f9a3 	bl	800a688 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a342:	e01d      	b.n	800a380 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7bfa      	ldrb	r2, [r7, #15]
 800a348:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fe90 	bl	800b076 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa61 	bl	800a81e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d004      	beq.n	800a36c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2202      	movs	r2, #2
 800a366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36a:	e009      	b.n	800a380 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a374:	e004      	b.n	800a380 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f985 	bl	800a688 <USBD_CtlError>
  }
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	885b      	ldrh	r3, [r3, #2]
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	4b4c      	ldr	r3, [pc, #304]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a39e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3a0:	4b4b      	ldr	r3, [pc, #300]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d905      	bls.n	800a3b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f96c 	bl	800a688 <USBD_CtlError>
    return USBD_FAIL;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e088      	b.n	800a4c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d002      	beq.n	800a3c6 <USBD_SetConfig+0x3e>
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d025      	beq.n	800a410 <USBD_SetConfig+0x88>
 800a3c4:	e071      	b.n	800a4aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3c6:	4b42      	ldr	r3, [pc, #264]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d01c      	beq.n	800a408 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a3ce:	4b40      	ldr	r3, [pc, #256]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3d8:	4b3d      	ldr	r3, [pc, #244]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff f992 	bl	8009708 <USBD_SetClassConfig>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f949 	bl	800a688 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3f6:	e065      	b.n	800a4c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fa10 	bl	800a81e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2203      	movs	r2, #3
 800a402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a406:	e05d      	b.n	800a4c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fa08 	bl	800a81e <USBD_CtlSendStatus>
      break;
 800a40e:	e059      	b.n	800a4c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a410:	4b2f      	ldr	r3, [pc, #188]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d112      	bne.n	800a43e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a420:	4b2b      	ldr	r3, [pc, #172]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	461a      	mov	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a42a:	4b29      	ldr	r3, [pc, #164]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7ff f985 	bl	8009740 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f9f1 	bl	800a81e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a43c:	e042      	b.n	800a4c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a43e:	4b24      	ldr	r3, [pc, #144]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d02a      	beq.n	800a4a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff f973 	bl	8009740 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a45a:	4b1d      	ldr	r3, [pc, #116]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a464:	4b1a      	ldr	r3, [pc, #104]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff f94c 	bl	8009708 <USBD_SetClassConfig>
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00f      	beq.n	800a49a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a47a:	6839      	ldr	r1, [r7, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f903 	bl	800a688 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff f958 	bl	8009740 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2202      	movs	r2, #2
 800a494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a498:	e014      	b.n	800a4c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f9bf 	bl	800a81e <USBD_CtlSendStatus>
      break;
 800a4a0:	e010      	b.n	800a4c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f9bb 	bl	800a81e <USBD_CtlSendStatus>
      break;
 800a4a8:	e00c      	b.n	800a4c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f8eb 	bl	800a688 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4b2:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <USBD_SetConfig+0x148>)
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff f941 	bl	8009740 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c2:	bf00      	nop
  }

  return ret;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200001ab 	.word	0x200001ab

0800a4d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	88db      	ldrh	r3, [r3, #6]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d004      	beq.n	800a4f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f8cd 	bl	800a688 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4ee:	e023      	b.n	800a538 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	dc02      	bgt.n	800a502 <USBD_GetConfig+0x2e>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dc03      	bgt.n	800a508 <USBD_GetConfig+0x34>
 800a500:	e015      	b.n	800a52e <USBD_GetConfig+0x5a>
 800a502:	2b03      	cmp	r3, #3
 800a504:	d00b      	beq.n	800a51e <USBD_GetConfig+0x4a>
 800a506:	e012      	b.n	800a52e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3308      	adds	r3, #8
 800a512:	2201      	movs	r2, #1
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f927 	bl	800a76a <USBD_CtlSendData>
        break;
 800a51c:	e00c      	b.n	800a538 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3304      	adds	r3, #4
 800a522:	2201      	movs	r2, #1
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f91f 	bl	800a76a <USBD_CtlSendData>
        break;
 800a52c:	e004      	b.n	800a538 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f8a9 	bl	800a688 <USBD_CtlError>
        break;
 800a536:	bf00      	nop
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a550:	b2db      	uxtb	r3, r3
 800a552:	3b01      	subs	r3, #1
 800a554:	2b02      	cmp	r3, #2
 800a556:	d81e      	bhi.n	800a596 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	88db      	ldrh	r3, [r3, #6]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d004      	beq.n	800a56a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f890 	bl	800a688 <USBD_CtlError>
        break;
 800a568:	e01a      	b.n	800a5a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a576:	2b00      	cmp	r3, #0
 800a578:	d005      	beq.n	800a586 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	f043 0202 	orr.w	r2, r3, #2
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	330c      	adds	r3, #12
 800a58a:	2202      	movs	r2, #2
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f8eb 	bl	800a76a <USBD_CtlSendData>
      break;
 800a594:	e004      	b.n	800a5a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f875 	bl	800a688 <USBD_CtlError>
      break;
 800a59e:	bf00      	nop
  }
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	885b      	ldrh	r3, [r3, #2]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d106      	bne.n	800a5c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f92b 	bl	800a81e <USBD_CtlSendStatus>
  }
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d80b      	bhi.n	800a600 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	885b      	ldrh	r3, [r3, #2]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d10c      	bne.n	800a60a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f910 	bl	800a81e <USBD_CtlSendStatus>
      }
      break;
 800a5fe:	e004      	b.n	800a60a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f840 	bl	800a688 <USBD_CtlError>
      break;
 800a608:	e000      	b.n	800a60c <USBD_ClrFeature+0x3c>
      break;
 800a60a:	bf00      	nop
  }
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	781a      	ldrb	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3301      	adds	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	781a      	ldrb	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f7ff fa92 	bl	8009b68 <SWAPBYTE>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3301      	adds	r3, #1
 800a650:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3301      	adds	r3, #1
 800a656:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7ff fa85 	bl	8009b68 <SWAPBYTE>
 800a65e:	4603      	mov	r3, r0
 800a660:	461a      	mov	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3301      	adds	r3, #1
 800a66a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3301      	adds	r3, #1
 800a670:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fa78 	bl	8009b68 <SWAPBYTE>
 800a678:	4603      	mov	r3, r0
 800a67a:	461a      	mov	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	80da      	strh	r2, [r3, #6]
}
 800a680:	bf00      	nop
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a692:	2180      	movs	r1, #128	; 0x80
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc83 	bl	800afa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a69a:	2100      	movs	r1, #0
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fc7f 	bl	800afa0 <USBD_LL_StallEP>
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d036      	beq.n	800a72e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a6c4:	6938      	ldr	r0, [r7, #16]
 800a6c6:	f000 f836 	bl	800a736 <USBD_GetLen>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	4413      	add	r3, r2
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6fa:	e013      	b.n	800a724 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	4413      	add	r3, r2
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	7812      	ldrb	r2, [r2, #0]
 800a706:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3301      	adds	r3, #1
 800a70c:	613b      	str	r3, [r7, #16]
    idx++;
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	3301      	adds	r3, #1
 800a712:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	4413      	add	r3, r2
 800a71a:	2200      	movs	r2, #0
 800a71c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	3301      	adds	r3, #1
 800a722:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e7      	bne.n	800a6fc <USBD_GetString+0x52>
 800a72c:	e000      	b.n	800a730 <USBD_GetString+0x86>
    return;
 800a72e:	bf00      	nop
  }
}
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a736:	b480      	push	{r7}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a746:	e005      	b.n	800a754 <USBD_GetLen+0x1e>
  {
    len++;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	3301      	adds	r3, #1
 800a74c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	3301      	adds	r3, #1
 800a752:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1f5      	bne.n	800a748 <USBD_GetLen+0x12>
  }

  return len;
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	60f8      	str	r0, [r7, #12]
 800a772:	60b9      	str	r1, [r7, #8]
 800a774:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2202      	movs	r2, #2
 800a77a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	2100      	movs	r1, #0
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f000 fc8f 	bl	800b0b4 <USBD_LL_Transmit>

  return USBD_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 fc7e 	bl	800b0b4 <USBD_LL_Transmit>

  return USBD_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 fc82 	bl	800b0f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	2100      	movs	r1, #0
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 fc71 	bl	800b0f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2204      	movs	r2, #4
 800a82a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a82e:	2300      	movs	r3, #0
 800a830:	2200      	movs	r2, #0
 800a832:	2100      	movs	r1, #0
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fc3d 	bl	800b0b4 <USBD_LL_Transmit>

  return USBD_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2205      	movs	r2, #5
 800a850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a854:	2300      	movs	r3, #0
 800a856:	2200      	movs	r2, #0
 800a858:	2100      	movs	r1, #0
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc4b 	bl	800b0f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a870:	2200      	movs	r2, #0
 800a872:	4912      	ldr	r1, [pc, #72]	; (800a8bc <MX_USB_Device_Init+0x50>)
 800a874:	4812      	ldr	r0, [pc, #72]	; (800a8c0 <MX_USB_Device_Init+0x54>)
 800a876:	f7fe fed9 	bl	800962c <USBD_Init>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a880:	f7f6 facc 	bl	8000e1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a884:	490f      	ldr	r1, [pc, #60]	; (800a8c4 <MX_USB_Device_Init+0x58>)
 800a886:	480e      	ldr	r0, [pc, #56]	; (800a8c0 <MX_USB_Device_Init+0x54>)
 800a888:	f7fe ff00 	bl	800968c <USBD_RegisterClass>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a892:	f7f6 fac3 	bl	8000e1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a896:	490c      	ldr	r1, [pc, #48]	; (800a8c8 <MX_USB_Device_Init+0x5c>)
 800a898:	4809      	ldr	r0, [pc, #36]	; (800a8c0 <MX_USB_Device_Init+0x54>)
 800a89a:	f7fe fe21 	bl	80094e0 <USBD_CDC_RegisterInterface>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a8a4:	f7f6 faba 	bl	8000e1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a8a8:	4805      	ldr	r0, [pc, #20]	; (800a8c0 <MX_USB_Device_Init+0x54>)
 800a8aa:	f7fe ff16 	bl	80096da <USBD_Start>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a8b4:	f7f6 fab2 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a8b8:	bf00      	nop
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20000130 	.word	0x20000130
 800a8c0:	2000074c 	.word	0x2000074c
 800a8c4:	20000018 	.word	0x20000018
 800a8c8:	2000011c 	.word	0x2000011c

0800a8cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4905      	ldr	r1, [pc, #20]	; (800a8e8 <CDC_Init_FS+0x1c>)
 800a8d4:	4805      	ldr	r0, [pc, #20]	; (800a8ec <CDC_Init_FS+0x20>)
 800a8d6:	f7fe fe18 	bl	800950a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8da:	4905      	ldr	r1, [pc, #20]	; (800a8f0 <CDC_Init_FS+0x24>)
 800a8dc:	4803      	ldr	r0, [pc, #12]	; (800a8ec <CDC_Init_FS+0x20>)
 800a8de:	f7fe fe32 	bl	8009546 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	20000e04 	.word	0x20000e04
 800a8ec:	2000074c 	.word	0x2000074c
 800a8f0:	20000a1c 	.word	0x20000a1c

0800a8f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	71fb      	strb	r3, [r7, #7]
 800a910:	4613      	mov	r3, r2
 800a912:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	2b23      	cmp	r3, #35	; 0x23
 800a918:	d84a      	bhi.n	800a9b0 <CDC_Control_FS+0xac>
 800a91a:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <CDC_Control_FS+0x1c>)
 800a91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a920:	0800a9b1 	.word	0x0800a9b1
 800a924:	0800a9b1 	.word	0x0800a9b1
 800a928:	0800a9b1 	.word	0x0800a9b1
 800a92c:	0800a9b1 	.word	0x0800a9b1
 800a930:	0800a9b1 	.word	0x0800a9b1
 800a934:	0800a9b1 	.word	0x0800a9b1
 800a938:	0800a9b1 	.word	0x0800a9b1
 800a93c:	0800a9b1 	.word	0x0800a9b1
 800a940:	0800a9b1 	.word	0x0800a9b1
 800a944:	0800a9b1 	.word	0x0800a9b1
 800a948:	0800a9b1 	.word	0x0800a9b1
 800a94c:	0800a9b1 	.word	0x0800a9b1
 800a950:	0800a9b1 	.word	0x0800a9b1
 800a954:	0800a9b1 	.word	0x0800a9b1
 800a958:	0800a9b1 	.word	0x0800a9b1
 800a95c:	0800a9b1 	.word	0x0800a9b1
 800a960:	0800a9b1 	.word	0x0800a9b1
 800a964:	0800a9b1 	.word	0x0800a9b1
 800a968:	0800a9b1 	.word	0x0800a9b1
 800a96c:	0800a9b1 	.word	0x0800a9b1
 800a970:	0800a9b1 	.word	0x0800a9b1
 800a974:	0800a9b1 	.word	0x0800a9b1
 800a978:	0800a9b1 	.word	0x0800a9b1
 800a97c:	0800a9b1 	.word	0x0800a9b1
 800a980:	0800a9b1 	.word	0x0800a9b1
 800a984:	0800a9b1 	.word	0x0800a9b1
 800a988:	0800a9b1 	.word	0x0800a9b1
 800a98c:	0800a9b1 	.word	0x0800a9b1
 800a990:	0800a9b1 	.word	0x0800a9b1
 800a994:	0800a9b1 	.word	0x0800a9b1
 800a998:	0800a9b1 	.word	0x0800a9b1
 800a99c:	0800a9b1 	.word	0x0800a9b1
 800a9a0:	0800a9b1 	.word	0x0800a9b1
 800a9a4:	0800a9b1 	.word	0x0800a9b1
 800a9a8:	0800a9b1 	.word	0x0800a9b1
 800a9ac:	0800a9b1 	.word	0x0800a9b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9b0:	bf00      	nop
  }

  return (USBD_OK);
 800a9b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7f5 fc23 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9d2:	6879      	ldr	r1, [r7, #4]
 800a9d4:	4805      	ldr	r0, [pc, #20]	; (800a9ec <CDC_Receive_FS+0x2c>)
 800a9d6:	f7fe fdb6 	bl	8009546 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9da:	4804      	ldr	r0, [pc, #16]	; (800a9ec <CDC_Receive_FS+0x2c>)
 800a9dc:	f7fe fdfc 	bl	80095d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a9e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	2000074c 	.word	0x2000074c

0800a9f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa00:	4b0d      	ldr	r3, [pc, #52]	; (800aa38 <CDC_Transmit_FS+0x48>)
 800aa02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa06:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState != 0){
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e00b      	b.n	800aa2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa16:	887b      	ldrh	r3, [r7, #2]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6879      	ldr	r1, [r7, #4]
 800aa1c:	4806      	ldr	r0, [pc, #24]	; (800aa38 <CDC_Transmit_FS+0x48>)
 800aa1e:	f7fe fd74 	bl	800950a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa22:	4805      	ldr	r0, [pc, #20]	; (800aa38 <CDC_Transmit_FS+0x48>)
 800aa24:	f7fe fda8 	bl	8009578 <USBD_CDC_TransmitPacket>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	2000074c 	.word	0x2000074c

0800aa3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	4613      	mov	r3, r2
 800aa48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	371c      	adds	r7, #28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	6039      	str	r1, [r7, #0]
 800aa6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2212      	movs	r2, #18
 800aa70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800aa72:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	20000150 	.word	0x20000150

0800aa84 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2204      	movs	r2, #4
 800aa94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa96:	4b03      	ldr	r3, [pc, #12]	; (800aaa4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	20000164 	.word	0x20000164

0800aaa8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4907      	ldr	r1, [pc, #28]	; (800aadc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aabe:	4808      	ldr	r0, [pc, #32]	; (800aae0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aac0:	f7ff fdf3 	bl	800a6aa <USBD_GetString>
 800aac4:	e004      	b.n	800aad0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4904      	ldr	r1, [pc, #16]	; (800aadc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aaca:	4805      	ldr	r0, [pc, #20]	; (800aae0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aacc:	f7ff fded 	bl	800a6aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200011ec 	.word	0x200011ec
 800aae0:	0800b2ec 	.word	0x0800b2ec

0800aae4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	4904      	ldr	r1, [pc, #16]	; (800ab04 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800aaf4:	4804      	ldr	r0, [pc, #16]	; (800ab08 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800aaf6:	f7ff fdd8 	bl	800a6aa <USBD_GetString>
  return USBD_StrDesc;
 800aafa:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	200011ec 	.word	0x200011ec
 800ab08:	0800b304 	.word	0x0800b304

0800ab0c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	6039      	str	r1, [r7, #0]
 800ab16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	221a      	movs	r2, #26
 800ab1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab1e:	f000 f843 	bl	800aba8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab22:	4b02      	ldr	r3, [pc, #8]	; (800ab2c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000168 	.word	0x20000168

0800ab30 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab3c:	79fb      	ldrb	r3, [r7, #7]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d105      	bne.n	800ab4e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4907      	ldr	r1, [pc, #28]	; (800ab64 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ab46:	4808      	ldr	r0, [pc, #32]	; (800ab68 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ab48:	f7ff fdaf 	bl	800a6aa <USBD_GetString>
 800ab4c:	e004      	b.n	800ab58 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	4904      	ldr	r1, [pc, #16]	; (800ab64 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ab52:	4805      	ldr	r0, [pc, #20]	; (800ab68 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ab54:	f7ff fda9 	bl	800a6aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab58:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	200011ec 	.word	0x200011ec
 800ab68:	0800b318 	.word	0x0800b318

0800ab6c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d105      	bne.n	800ab8a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	4907      	ldr	r1, [pc, #28]	; (800aba0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ab82:	4808      	ldr	r0, [pc, #32]	; (800aba4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ab84:	f7ff fd91 	bl	800a6aa <USBD_GetString>
 800ab88:	e004      	b.n	800ab94 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	4904      	ldr	r1, [pc, #16]	; (800aba0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ab8e:	4805      	ldr	r0, [pc, #20]	; (800aba4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ab90:	f7ff fd8b 	bl	800a6aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab94:	4b02      	ldr	r3, [pc, #8]	; (800aba0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200011ec 	.word	0x200011ec
 800aba4:	0800b324 	.word	0x0800b324

0800aba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abae:	4b0f      	ldr	r3, [pc, #60]	; (800abec <Get_SerialNum+0x44>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <Get_SerialNum+0x48>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abba:	4b0e      	ldr	r3, [pc, #56]	; (800abf4 <Get_SerialNum+0x4c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abce:	2208      	movs	r2, #8
 800abd0:	4909      	ldr	r1, [pc, #36]	; (800abf8 <Get_SerialNum+0x50>)
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f814 	bl	800ac00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abd8:	2204      	movs	r2, #4
 800abda:	4908      	ldr	r1, [pc, #32]	; (800abfc <Get_SerialNum+0x54>)
 800abdc:	68b8      	ldr	r0, [r7, #8]
 800abde:	f000 f80f 	bl	800ac00 <IntToUnicode>
  }
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	1fff7590 	.word	0x1fff7590
 800abf0:	1fff7594 	.word	0x1fff7594
 800abf4:	1fff7598 	.word	0x1fff7598
 800abf8:	2000016a 	.word	0x2000016a
 800abfc:	2000017a 	.word	0x2000017a

0800ac00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac12:	2300      	movs	r3, #0
 800ac14:	75fb      	strb	r3, [r7, #23]
 800ac16:	e027      	b.n	800ac68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	0f1b      	lsrs	r3, r3, #28
 800ac1c:	2b09      	cmp	r3, #9
 800ac1e:	d80b      	bhi.n	800ac38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	0f1b      	lsrs	r3, r3, #28
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	440b      	add	r3, r1
 800ac30:	3230      	adds	r2, #48	; 0x30
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e00a      	b.n	800ac4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4619      	mov	r1, r3
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	440b      	add	r3, r1
 800ac48:	3237      	adds	r2, #55	; 0x37
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	3301      	adds	r3, #1
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	3301      	adds	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
 800ac68:	7dfa      	ldrb	r2, [r7, #23]
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d3d3      	bcc.n	800ac18 <IntToUnicode+0x18>
  }
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
	...

0800ac80 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a0d      	ldr	r2, [pc, #52]	; (800acc4 <HAL_PCD_MspInit+0x44>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d113      	bne.n	800acba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ac92:	4b0d      	ldr	r3, [pc, #52]	; (800acc8 <HAL_PCD_MspInit+0x48>)
 800ac94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac96:	4a0c      	ldr	r2, [pc, #48]	; (800acc8 <HAL_PCD_MspInit+0x48>)
 800ac98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac9c:	6593      	str	r3, [r2, #88]	; 0x58
 800ac9e:	4b0a      	ldr	r3, [pc, #40]	; (800acc8 <HAL_PCD_MspInit+0x48>)
 800aca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800acaa:	2200      	movs	r2, #0
 800acac:	2100      	movs	r1, #0
 800acae:	2014      	movs	r0, #20
 800acb0:	f7f7 fd5b 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800acb4:	2014      	movs	r0, #20
 800acb6:	f7f7 fd72 	bl	800279e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800acba:	bf00      	nop
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	40005c00 	.word	0x40005c00
 800acc8:	40021000 	.word	0x40021000

0800accc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f7fe fd44 	bl	8009770 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	440b      	add	r3, r1
 800ad10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f7fe fd7e 	bl	800981a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ad38:	78fa      	ldrb	r2, [r7, #3]
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	440b      	add	r3, r1
 800ad46:	333c      	adds	r3, #60	; 0x3c
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f7fe fdc7 	bl	80098e0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe fedb 	bl	8009b24 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ad6e:	bf00      	nop
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d001      	beq.n	800ad8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad8a:	f7f6 f847 	bl	8000e1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ad94:	7bfa      	ldrb	r2, [r7, #15]
 800ad96:	4611      	mov	r1, r2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fe fe85 	bl	8009aa8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe fe31 	bl	8009a0c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
	...

0800adb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fe80 	bl	8009ac8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d005      	beq.n	800addc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800add0:	4b04      	ldr	r3, [pc, #16]	; (800ade4 <HAL_PCD_SuspendCallback+0x30>)
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	4a03      	ldr	r2, [pc, #12]	; (800ade4 <HAL_PCD_SuspendCallback+0x30>)
 800add6:	f043 0306 	orr.w	r3, r3, #6
 800adda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	e000ed00 	.word	0xe000ed00

0800ade8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d007      	beq.n	800ae08 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adf8:	4b08      	ldr	r3, [pc, #32]	; (800ae1c <HAL_PCD_ResumeCallback+0x34>)
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	4a07      	ldr	r2, [pc, #28]	; (800ae1c <HAL_PCD_ResumeCallback+0x34>)
 800adfe:	f023 0306 	bic.w	r3, r3, #6
 800ae02:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ae04:	f000 f9fa 	bl	800b1fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fe70 	bl	8009af4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	e000ed00 	.word	0xe000ed00

0800ae20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ae28:	4a2b      	ldr	r2, [pc, #172]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a29      	ldr	r2, [pc, #164]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ae38:	4b27      	ldr	r3, [pc, #156]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae3a:	4a28      	ldr	r2, [pc, #160]	; (800aedc <USBD_LL_Init+0xbc>)
 800ae3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ae3e:	4b26      	ldr	r3, [pc, #152]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae40:	2208      	movs	r2, #8
 800ae42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ae44:	4b24      	ldr	r3, [pc, #144]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae46:	2202      	movs	r2, #2
 800ae48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae4a:	4b23      	ldr	r3, [pc, #140]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ae50:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ae56:	4b20      	ldr	r3, [pc, #128]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ae5c:	4b1e      	ldr	r3, [pc, #120]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ae62:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ae68:	481b      	ldr	r0, [pc, #108]	; (800aed8 <USBD_LL_Init+0xb8>)
 800ae6a:	f7f8 fa05 	bl	8003278 <HAL_PCD_Init>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ae74:	f7f5 ffd2 	bl	8000e1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae7e:	2318      	movs	r3, #24
 800ae80:	2200      	movs	r2, #0
 800ae82:	2100      	movs	r1, #0
 800ae84:	f7f9 fe1f 	bl	8004ac6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae8e:	2358      	movs	r3, #88	; 0x58
 800ae90:	2200      	movs	r2, #0
 800ae92:	2180      	movs	r1, #128	; 0x80
 800ae94:	f7f9 fe17 	bl	8004ac6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae9e:	23c0      	movs	r3, #192	; 0xc0
 800aea0:	2200      	movs	r2, #0
 800aea2:	2181      	movs	r1, #129	; 0x81
 800aea4:	f7f9 fe0f 	bl	8004ac6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aeae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	f7f9 fe06 	bl	8004ac6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aec4:	2200      	movs	r2, #0
 800aec6:	2182      	movs	r1, #130	; 0x82
 800aec8:	f7f9 fdfd 	bl	8004ac6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	200013ec 	.word	0x200013ec
 800aedc:	40005c00 	.word	0x40005c00

0800aee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f8 faa3 	bl	8003442 <HAL_PCD_Start>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 f980 	bl	800b208 <USBD_Get_USB_Status>
 800af08:	4603      	mov	r3, r0
 800af0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	4608      	mov	r0, r1
 800af20:	4611      	mov	r1, r2
 800af22:	461a      	mov	r2, r3
 800af24:	4603      	mov	r3, r0
 800af26:	70fb      	strb	r3, [r7, #3]
 800af28:	460b      	mov	r3, r1
 800af2a:	70bb      	strb	r3, [r7, #2]
 800af2c:	4613      	mov	r3, r2
 800af2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af3e:	78bb      	ldrb	r3, [r7, #2]
 800af40:	883a      	ldrh	r2, [r7, #0]
 800af42:	78f9      	ldrb	r1, [r7, #3]
 800af44:	f7f8 fc12 	bl	800376c <HAL_PCD_EP_Open>
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f95a 	bl	800b208 <USBD_Get_USB_Status>
 800af54:	4603      	mov	r3, r0
 800af56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af58:	7bbb      	ldrb	r3, [r7, #14]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af7c:	78fa      	ldrb	r2, [r7, #3]
 800af7e:	4611      	mov	r1, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f7f8 fc59 	bl	8003838 <HAL_PCD_EP_Close>
 800af86:	4603      	mov	r3, r0
 800af88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 f93b 	bl	800b208 <USBD_Get_USB_Status>
 800af92:	4603      	mov	r3, r0
 800af94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af96:	7bbb      	ldrb	r3, [r7, #14]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7f8 fd1a 	bl	80039f8 <HAL_PCD_EP_SetStall>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 f91c 	bl	800b208 <USBD_Get_USB_Status>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	460b      	mov	r3, r1
 800afe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aff8:	78fa      	ldrb	r2, [r7, #3]
 800affa:	4611      	mov	r1, r2
 800affc:	4618      	mov	r0, r3
 800affe:	f7f8 fd4d 	bl	8003a9c <HAL_PCD_EP_ClrStall>
 800b002:	4603      	mov	r3, r0
 800b004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 f8fd 	bl	800b208 <USBD_Get_USB_Status>
 800b00e:	4603      	mov	r3, r0
 800b010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b012:	7bbb      	ldrb	r3, [r7, #14]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b02e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b034:	2b00      	cmp	r3, #0
 800b036:	da0c      	bge.n	800b052 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b038:	78fb      	ldrb	r3, [r7, #3]
 800b03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	00db      	lsls	r3, r3, #3
 800b04a:	440b      	add	r3, r1
 800b04c:	3302      	adds	r3, #2
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	e00b      	b.n	800b06a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b052:	78fb      	ldrb	r3, [r7, #3]
 800b054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b058:	68f9      	ldr	r1, [r7, #12]
 800b05a:	4613      	mov	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	440b      	add	r3, r1
 800b064:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b068:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b090:	78fa      	ldrb	r2, [r7, #3]
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f7f8 fb44 	bl	8003722 <HAL_PCD_SetAddress>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 f8b1 	bl	800b208 <USBD_Get_USB_Status>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	607a      	str	r2, [r7, #4]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0d2:	7af9      	ldrb	r1, [r7, #11]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	f7f8 fc4b 	bl	8003972 <HAL_PCD_EP_Transmit>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f890 	bl	800b208 <USBD_Get_USB_Status>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b086      	sub	sp, #24
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	603b      	str	r3, [r7, #0]
 800b102:	460b      	mov	r3, r1
 800b104:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b114:	7af9      	ldrb	r1, [r7, #11]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	f7f8 fbd5 	bl	80038c8 <HAL_PCD_EP_Receive>
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 f86f 	bl	800b208 <USBD_Get_USB_Status>
 800b12a:	4603      	mov	r3, r0
 800b12c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b12e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b14a:	78fa      	ldrb	r2, [r7, #3]
 800b14c:	4611      	mov	r1, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f7f8 fbf7 	bl	8003942 <HAL_PCD_EP_GetRxCount>
 800b154:	4603      	mov	r3, r0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b16c:	78fb      	ldrb	r3, [r7, #3]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <HAL_PCDEx_LPM_Callback+0x18>
 800b172:	2b01      	cmp	r3, #1
 800b174:	d013      	beq.n	800b19e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b176:	e023      	b.n	800b1c0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d007      	beq.n	800b190 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b180:	f000 f83c 	bl	800b1fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b184:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	4a0f      	ldr	r2, [pc, #60]	; (800b1c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b18a:	f023 0306 	bic.w	r3, r3, #6
 800b18e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe fcac 	bl	8009af4 <USBD_LL_Resume>
    break;
 800b19c:	e010      	b.n	800b1c0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe fc8f 	bl	8009ac8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d005      	beq.n	800b1be <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1b2:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	4a04      	ldr	r2, [pc, #16]	; (800b1c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1b8:	f043 0306 	orr.w	r3, r3, #6
 800b1bc:	6113      	str	r3, [r2, #16]
    break;
 800b1be:	bf00      	nop
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	e000ed00 	.word	0xe000ed00

0800b1cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1d4:	4b03      	ldr	r3, [pc, #12]	; (800b1e4 <USBD_static_malloc+0x18>)
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	200001ac 	.word	0x200001ac

0800b1e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]

}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b200:	f7f5 f89e 	bl	8000340 <SystemClock_Config>
}
 800b204:	bf00      	nop
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4603      	mov	r3, r0
 800b210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d817      	bhi.n	800b24c <USBD_Get_USB_Status+0x44>
 800b21c:	a201      	add	r2, pc, #4	; (adr r2, 800b224 <USBD_Get_USB_Status+0x1c>)
 800b21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b222:	bf00      	nop
 800b224:	0800b235 	.word	0x0800b235
 800b228:	0800b23b 	.word	0x0800b23b
 800b22c:	0800b241 	.word	0x0800b241
 800b230:	0800b247 	.word	0x0800b247
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
    break;
 800b238:	e00b      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b23a:	2303      	movs	r3, #3
 800b23c:	73fb      	strb	r3, [r7, #15]
    break;
 800b23e:	e008      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b240:	2301      	movs	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
    break;
 800b244:	e005      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b246:	2303      	movs	r3, #3
 800b248:	73fb      	strb	r3, [r7, #15]
    break;
 800b24a:	e002      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	73fb      	strb	r3, [r7, #15]
    break;
 800b250:	bf00      	nop
  }
  return usb_status;
 800b252:	7bfb      	ldrb	r3, [r7, #15]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <__libc_init_array>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	4d0d      	ldr	r5, [pc, #52]	; (800b298 <__libc_init_array+0x38>)
 800b264:	4c0d      	ldr	r4, [pc, #52]	; (800b29c <__libc_init_array+0x3c>)
 800b266:	1b64      	subs	r4, r4, r5
 800b268:	10a4      	asrs	r4, r4, #2
 800b26a:	2600      	movs	r6, #0
 800b26c:	42a6      	cmp	r6, r4
 800b26e:	d109      	bne.n	800b284 <__libc_init_array+0x24>
 800b270:	4d0b      	ldr	r5, [pc, #44]	; (800b2a0 <__libc_init_array+0x40>)
 800b272:	4c0c      	ldr	r4, [pc, #48]	; (800b2a4 <__libc_init_array+0x44>)
 800b274:	f000 f82e 	bl	800b2d4 <_init>
 800b278:	1b64      	subs	r4, r4, r5
 800b27a:	10a4      	asrs	r4, r4, #2
 800b27c:	2600      	movs	r6, #0
 800b27e:	42a6      	cmp	r6, r4
 800b280:	d105      	bne.n	800b28e <__libc_init_array+0x2e>
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	f855 3b04 	ldr.w	r3, [r5], #4
 800b288:	4798      	blx	r3
 800b28a:	3601      	adds	r6, #1
 800b28c:	e7ee      	b.n	800b26c <__libc_init_array+0xc>
 800b28e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b292:	4798      	blx	r3
 800b294:	3601      	adds	r6, #1
 800b296:	e7f2      	b.n	800b27e <__libc_init_array+0x1e>
 800b298:	0800b344 	.word	0x0800b344
 800b29c:	0800b344 	.word	0x0800b344
 800b2a0:	0800b344 	.word	0x0800b344
 800b2a4:	0800b348 	.word	0x0800b348

0800b2a8 <memcpy>:
 800b2a8:	440a      	add	r2, r1
 800b2aa:	4291      	cmp	r1, r2
 800b2ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2b0:	d100      	bne.n	800b2b4 <memcpy+0xc>
 800b2b2:	4770      	bx	lr
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2be:	4291      	cmp	r1, r2
 800b2c0:	d1f9      	bne.n	800b2b6 <memcpy+0xe>
 800b2c2:	bd10      	pop	{r4, pc}

0800b2c4 <memset>:
 800b2c4:	4402      	add	r2, r0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d100      	bne.n	800b2ce <memset+0xa>
 800b2cc:	4770      	bx	lr
 800b2ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b2d2:	e7f9      	b.n	800b2c8 <memset+0x4>

0800b2d4 <_init>:
 800b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d6:	bf00      	nop
 800b2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2da:	bc08      	pop	{r3}
 800b2dc:	469e      	mov	lr, r3
 800b2de:	4770      	bx	lr

0800b2e0 <_fini>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr
